from typing import Any, Tuple
from gi.repository import GLib
from gi.repository import Gio
'Wrapper of ``Gimp.get_pdb()`` to simplify invoking GIMP PDB procedures.'
import abc
from typing import List, Optional
import gi
gi.require_version('Gegl', '0.4')
from gi.repository import Gegl
gi.require_version('Gimp', '3.0')
from gi.repository import Gimp
from gi.repository import GObject
__all__ = ['pdb', 'GeglProcedure', 'GimpPDBProcedure', 'PDBProcedure', 'PDBProcedureError']

class _PyPDB:

    def __init__(self):
        self._last_status = None
        self._last_error = None
        self._proc_cache = None

    @property
    def last_status(self):
        pass

    @property
    def last_error(self):
        pass

    def __getattr__(self, name: str):
        pass

    def __getitem__(self, name: str):
        pass

    def __contains__(self, name: Optional[str]) -> bool:
        pass

    @staticmethod
    def list_all_gegl_operations():
        pass

    @staticmethod
    def list_all_gimp_pdb_procedures():
        pass

    def list_all_procedure_names(self) -> List[str]:
        pass

    def remove_from_cache(self, name: str):
        pass

    def _get_proc_by_name(self, proc_name, proc_class):
        pass

    @staticmethod
    def _gimp_pdb_procedure_exists(proc_name):
        pass

    @staticmethod
    def _gegl_operation_exists(proc_name):
        pass

    @staticmethod
    def _process_procedure_name(name):
        pass

    def extension_gimp_help(self, domain_names: List[str]=None, domain_uris: List[str]=None):
        """Parameters:
        
        * domain_names - Domain names.
        
        * domain_uris - Domain URIs.
        """
        pass

    def extension_script_fu(self):
        """A scheme interpreter for scripting GIMP operations.
        
        More help here later.
        """
        pass

    def file_aa_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None, file_type: int=0):
        """Saves grayscale image in various text formats.
        
        Image types: *
        Menu label: ASCII art
        
        This plug-in uses aalib to save grayscale image as ascii art into a
        variety of text formats.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        
        * file_type (default: 0) - File type to use.
        """
        pass

    def file_ani_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None, cursor_name: str=None, author_name: str=None, default_delay: int=8, hot_spot_x: Gimp.Int32Array=None, hot_spot_y: Gimp.Int32Array=None):
        """Saves files in Windows ANI file format.
        
        Image types: *
        Menu label: Microsoft Windows animated cursor
        
        Saves files in Windows ANI file format.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        
        * cursor_name - Cursor Name (Optional).
        
        * author_name - Cursor Author (Optional).
        
        * default_delay (default: 8) - Default delay between frames in jiffies
          (1/60 of a second).
        
        * hot_spot_x - X coordinates of hot spot (one per layer).
        
        * hot_spot_y - Y coordinates of hot spot (one per layer).
        """
        pass

    def file_ani_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Loads files of Windows ANI file format.
        
        Menu label: Microsoft Windows animated cursor
        
        Loads files of Windows ANI file format.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_ani_load_thumb(self, file: Gio.File=None, thumb_size: int=256) -> Tuple[Gimp.Image, int, int, Gimp.ImageType, int]:
        """Loads a preview from a Windows ANI files.
        
        Parameters:
        
        * file - The file to load the thumbnail from.
        
        * thumb_size (default: 256) - Preferred thumbnail size.
        
        Returns:
        
        * image - Thumbnail image.
        
        * image_width (default: 0) - Width of the full-sized image (0 for
          unknown).
        
        * image_height (default: 0) - Height of the full-sized image (0 for
          unknown).
        
        * image_type (default: Gimp.ImageType.RGB_IMAGE) - Type of the image.
        
        * num_layers (default: 1) - Number of layers in the image.
        """
        pass

    def file_bmp_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None, use_rle: bool=False, write_color_space: bool=True, rgb_format: str='rgb-888'):
        """Saves files in Windows BMP file format.
        
        Image types: INDEXED, GRAY, RGB*
        Menu label: Windows BMP image
        
        Saves files in Windows BMP file format.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        
        * use_rle (default: False) - Use run-length-encoding compression (only
          valid for 4 and 8-bit indexed images).
        
        * write_color_space (default: True) - Whether or not to write
          BITMAPV5HEADER color space data.
        
        * rgb_format (default: rgb-888) - Export format for RGB images.
        """
        pass

    def file_bmp_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Loads files of Windows BMP file format.
        
        Menu label: Windows BMP image
        
        Loads files of Windows BMP file format.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_bz2_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None):
        """Saves files compressed with bzip2.
        
        Image types: RGB*, GRAY*, INDEXED*
        Menu label: bzip archive
        
        This procedure saves files in the bzip2 compressed format.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        """
        pass

    def file_bz2_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Loads files compressed with bzip2.
        
        Menu label: bzip archive
        
        This procedure loads files in the bzip2 compressed format.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_cel_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None, palette_file: Gio.File=None):
        """Exports files in KISS CEL file format.
        
        Image types: RGB*, INDEXED*
        Menu label: KISS CEL
        
        This plug-in exports individual KISS cell files.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        
        * palette_file - File to save palette to.
        """
        pass

    def file_cel_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None, palette_file: Gio.File=None) -> Gimp.Image:
        """Loads files in KISS CEL file format.
        
        Menu label: KISS CEL
        
        This plug-in loads individual KISS cell files.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        * palette_file - KCF file to load palette from.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_colorxhtml_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None, source_file: bool=False, characters: str='foo', font_size: int=10, separate: bool=False):
        """Save as colored HTML text.
        
        Image types: RGB
        Menu label: Colored HTML text
        
        Saves the image as colored XHTML text (based on Perl version by Marc
        Lehmann).
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        
        * source_file (default: False) - Read characters from file, if true,
          or use text entry.
        
        * characters (default: foo) - Characters that will be used as colored
          pixels.
        
        * font_size (default: 10) - Font size in pixels.
        
        * separate (default: False) - Write a separate CSS file.
        """
        pass

    def file_csource_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None):
        """Dump image data in RGB(A) format for C source.
        
        Image types: *
        Menu label: C source code
        
        CSource cannot be run non-interactively.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        """
        pass

    def file_cur_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None, hot_spot_x: Gimp.Int32Array=None, hot_spot_y: Gimp.Int32Array=None):
        """Saves files in Windows CUR file format.
        
        Image types: *
        Menu label: Microsoft Windows cursor
        
        Saves files in Windows CUR file format.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        
        * hot_spot_x - X coordinates of hot spot (one per layer).
        
        * hot_spot_y - Y coordinates of hot spot (one per layer).
        """
        pass

    def file_cur_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Loads files of Windows CUR file format.
        
        Menu label: Microsoft Windows cursor
        
        Loads files of Windows CUR file format.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_dcx_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None, override_palette: str='use-built-in-palette') -> Gimp.Image:
        """Loads files in Zsoft DCX file format.
        
        Menu label: ZSoft DCX image
        
        FIXME: write help for dcx_load.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        * override_palette (default: use-built-in-palette) - Whether to use
          the built-in palette or a black and white palette for 1 bit
          images.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_dds_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None, compression_format: str='none', perceptual_metric: bool=False, format: str='default', save_type: str='layer', flip_image: bool=False, transparent_color: bool=False, transparent_index: int=0, mipmaps: str='none', mipmap_filter: str='default', mipmap_wrap: str='default', gamma_correct: bool=False, srgb: bool=False, gamma: float=0.0, preserve_alpha_coverage: bool=False, alpha_test_threshold: float=0.5):
        """Saves files in DDS image format.
        
        Image types: INDEXED, GRAY, RGB
        Menu label: DDS image
        
        Saves files in DDS image format.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        
        * compression_format (default: none) - Compression format.
        
        * perceptual_metric (default: False) - Use a perceptual error metric
          during compression.
        
        * format (default: default) - Pixel format.
        
        * save_type (default: layer) - How to save the image.
        
        * flip_image (default: False) - Flip the image vertically on export.
        
        * transparent_color (default: False) - Make an indexed color
          transparent.
        
        * transparent_index (default: 0) - Index of transparent color or -1 to
          disable (for indexed images only).
        
        * mipmaps (default: none) - How to handle mipmaps.
        
        * mipmap_filter (default: default) - Filtering to use when generating
          mipmaps.
        
        * mipmap_wrap (default: default) - Wrap mode to use when generating
          mipmaps.
        
        * gamma_correct (default: False) - Use gamma correct mipmap filtering.
        
        * srgb (default: False) - Use sRGB colorspace for gamma correction.
        
        * gamma (default: 0.0) - Gamma value to use for gamma correction (e.g.
          2.2).
        
        * preserve_alpha_coverage (default: False) - Preserve alpha test
          coverage for alpha channel maps.
        
        * alpha_test_threshold (default: 0.5) - Alpha test threshold value for
          which alpha test coverage should be preserved.
        """
        pass

    def file_dds_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None, load_mipmaps: bool=True, flip_image: bool=False) -> Gimp.Image:
        """Loads files in DDS image format.
        
        Menu label: DDS image
        
        Loads files in DDS image format.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        * load_mipmaps (default: True) - Load mipmaps if present.
        
        * flip_image (default: False) - Flip the image vertically on import.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_desktop_link_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Follows a link to an image in a .desktop file.
        
        Menu label: Desktop Link
        
        Opens a .desktop file and if it is a link, it asks GIMP to open the file
        the link points to.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_dicom_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None):
        """Save file in the DICOM file format.
        
        Image types: RGB, GRAY
        Menu label: Digital Imaging and Communications in Medicine image
        
        Save an image in the medical standard DICOM image formats. The standard
        is defined at http://medical.nema.org/. The file format is
        defined in section 10 of the standard. The files are saved
        uncompressed and the compulsory DICOM tags are filled with
        default dummy values.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        """
        pass

    def file_dicom_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Loads files of the dicom file format.
        
        Menu label: DICOM image
        
        Load a file in the DICOM standard format. The standard is defined at
        http://medical.nema.org/. The plug-in currently only supports
        reading images with uncompressed pixel sections.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_eps_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None, width: float=287.0, height: float=200.0, x_offset: float=5.0, y_offset: float=5.0, unit: str='inch', keep_ratio: bool=True, rotation: int=0, level: bool=True, eps_flag: bool=False, show_preview: bool=False, preview: int=256):
        """Export image as Encapsulated PostScript image.
        
        Image types: RGB, GRAY, INDEXED
        Menu label: Encapsulated PostScript
        
        PostScript exporting handles all image types except those with alpha
        channels.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        
        * width (default: 287.0) - Width of the image in PostScript file (0:
          use input image size).
        
        * height (default: 200.0) - Height of the image in PostScript file (0:
          use input image size).
        
        * x_offset (default: 5.0) - X-offset to image from lower left corner.
        
        * y_offset (default: 5.0) - Y-offset to image from lower left corner.
        
        * unit (default: inch) - Unit of measure for offset values.
        
        * keep_ratio (default: True) - If enabled, aspect ratio will be
          maintained on export. Otherwise, the width and height values
          will be used.
        
        * rotation (default: 0) - 0, 90, 180, 270.
        
        * level (default: True) - If enabled, export in PostScript Level 2
          format. Otherwise, export in PostScript Level 1 format.
        
        * eps_flag (default: False) - If enabled, export as Encapsulated
          PostScript. Otherwise, export as PostScript.
        
        * show_preview (default: False) - Show Preview.
        
        * preview (default: 256) - Maximum size of preview. Set to 0 for no
          preview.
        """
        pass

    def file_eps_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None, width: int=0, height: int=0, keep_ratio: bool=True, prefer_native_dimensions: bool=False, check_bbox: bool=True, pages: str='1', coloring: str='rgb', text_alpha_bits: str='none', graphic_alpha_bits: str='none') -> Gimp.Image:
        """Load Encapsulated PostScript images.
        
        Menu label: Encapsulated PostScript image
        
        Load Encapsulated PostScript images.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        * width (default: 0) - Width (in pixels) to load the image in. (0 for
          the corresponding width per native ratio).
        
        * height (default: 0) - Height (in pixels) to load the image in. (0
          for the corresponding height per native ratio).
        
        * keep_ratio (default: True) - Force dimensions with aspect ratio.
        
        * prefer_native_dimensions (default: False) - Load and use dimensions
          from source file.
        
        * check_bbox (default: True) - FALSE: Use width/height, TRUE: Use
          BoundingBox.
        
        * pages (default: 1) - Pages to load (e.g.: 1,3,5-7).
        
        * coloring (default: rgb) - Import color format.
        
        * text_alpha_bits (default: none) - Text anti-aliasing strength.
        
        * graphic_alpha_bits (default: none) - Graphic anti-aliasing strength.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_exr_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None):
        """Saves files in the OpenEXR file format.
        
        Image types: *
        Menu label: OpenEXR image
        
        This procedure saves images in the OpenEXR format, using gegl:exr-save.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        """
        pass

    def file_exr_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Loads files in the OpenEXR file format.
        
        Menu label: OpenEXR image
        
        This plug-in loads OpenEXR files.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_farbfeld_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None):
        """Export image in the Farbfeld file format.
        
        Image types: *
        Menu label: Farbfeld
        
        Export image in the Farbfeld file format.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        """
        pass

    def file_farbfeld_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Load file in the Farbfeld file format.
        
        Menu label: Farbfeld
        
        Load file in the Farbfeld file format.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_faxg3_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Loads g3 fax files.
        
        Menu label: G3 fax image
        
        This plug-in loads Fax G3 Image files.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_fits_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None):
        """Export file in the FITS file format.
        
        Image types: RGB, GRAY, INDEXED
        Menu label: Flexible Image Transport System
        
        FITS exporting handles all image types except those with alpha channels.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        """
        pass

    def file_fits_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Load file of the FITS file format.
        
        Menu label: Flexible Image Transport System
        
        Load file of the FITS file format (Flexible Image Transport System).
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_fli_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None, from_frame: int=-1, to_frame: int=-1):
        """Export FLI-movies.
        
        Image types: INDEXED, GRAY
        Menu label: AutoDesk FLIC animation
        
        This is an experimental plug-in to handle FLI movies.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        
        * from_frame (default: -1) - Export beginning from this frame.
        
        * to_frame (default: -1) - End exporting with this frame (or -1 for
          all frames).
        """
        pass

    def file_fli_info(self, file: Gio.File=None) -> Tuple[int, int, int]:
        """Get information about a Fli movie.
        
        This is an experimental plug-in to handle FLI movies.
        
        Parameters:
        
        * file - The local file to get info about.
        
        Returns:
        
        * width (default: 0) - Width of one frame.
        
        * height (default: 0) - Height of one frame.
        
        * frames (default: 0) - Number of frames.
        """
        pass

    def file_fli_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None, from_frame: int=-1, to_frame: int=-1) -> Gimp.Image:
        """Load FLI-movies.
        
        Menu label: AutoDesk FLIC animation
        
        This is an experimental plug-in to handle FLI movies.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        * from_frame (default: -1) - Load beginning from this frame.
        
        * to_frame (default: -1) - End loading with this frame.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_gbr_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None, spacing: int=10, description: str='GIMP Brush'):
        """Exports files in the GIMP brush file format.
        
        Image types: *
        Menu label: GIMP brush
        
        Exports files in the GIMP brush file format.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        
        * spacing (default: 10) - Spacing of the brush.
        
        * description (default: GIMP Brush) - Short description of the brush.
        """
        pass

    def file_gbr_export_internal(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, file: Gio.File=None, spacing: int=10, name: str='GIMP Brush'):
        """Exports Gimp brush file (.GBR).
        
        Exports Gimp brush file (.GBR).
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - Dummy parameter.
        
        * image - Input image.
        
        * drawables - Selected drawables.
        
        * file - The file to export.
        
        * spacing (default: 10) - Spacing of the brush.
        
        * name (default: GIMP Brush) - The name of the brush.
        """
        pass

    def file_gbr_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Loads GIMP brushes.
        
        Loads GIMP brushes (1 or 4 bpp and old .gpb format).
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - Dummy parameter.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_gex_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> str:
        """Loads GIMP extension.
        
        Loads GIMP extension.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - Dummy parameter.
        
        * file - The file to load.
        
        Returns:
        
        * extension_id - Identifier of the newly installed extension.
        """
        pass

    def file_gif_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None, interlace: bool=False, loop: bool=True, number_of_repeats: int=0, default_delay: int=100, default_dispose: str='unspecified', as_animation: bool=False, force_delay: bool=False, force_dispose: bool=False):
        """Exports files in GIF file format.
        
        Image types: INDEXED*, GRAY*
        Menu label: GIF image
        
        Export a file in GIF format, with possible animation, transparency, and
        comment. To export an animation, operate on a multi-layer file
        and give the 'as-animation' parameter as TRUE. The plug-in will
        interpret <50% alpha as transparent. When run non-interactively,
        the value for the comment is taken from the 'gimp-comment'
        parasite.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        
        * interlace (default: False) - Try to export as interlaced.
        
        * loop (default: True) - (animated gif) Loop infinitely.
        
        * number_of_repeats (default: 0) - (animated gif) Number of repeats
          (Ignored if 'loop' is TRUE).
        
        * default_delay (default: 100) - (animated gif) Default delay between
          frames in milliseconds.
        
        * default_dispose (default: unspecified) - (animated gif) Default
          disposal type.
        
        * as_animation (default: False) - Export GIF as animation?.
        
        * force_delay (default: False) - (animated gif) Use specified delay
          for all frames.
        
        * force_dispose (default: False) - (animated gif) Use specified
          disposal for all frames.
        """
        pass

    def file_gif_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Loads files of Compuserve GIF file format.
        
        Menu label: GIF image
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_gif_load_thumb(self, file: Gio.File=None, thumb_size: int=256) -> Tuple[Gimp.Image, int, int, Gimp.ImageType, int]:
        """Loads only the first frame of a GIF image, to be used as a thumbnail.
        
        Parameters:
        
        * file - The file to load the thumbnail from.
        
        * thumb_size (default: 256) - Preferred thumbnail size.
        
        Returns:
        
        * image - Thumbnail image.
        
        * image_width (default: 0) - Width of the full-sized image (0 for
          unknown).
        
        * image_height (default: 0) - Height of the full-sized image (0 for
          unknown).
        
        * image_type (default: Gimp.ImageType.RGB_IMAGE) - Type of the image.
        
        * num_layers (default: 1) - Number of layers in the image.
        """
        pass

    def file_gih_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None, spacing: int=20, description: str='GIMP Brush Pipe', cell_width: int=1, cell_height: int=1, num_cells: int=1, ranks: GLib.Bytes=None, selection_modes: List[str]=None):
        """Exports images in GIMP Brush Pipe format.
        
        Image types: RGB*, GRAY*
        Menu label: GIMP brush (animated)
        
        This plug-in exports an image in the GIMP brush pipe format. For a
        colored brush pipe, RGBA layers are used, otherwise the layers
        should be grayscale masks. The image can be multi-layered, and
        additionally the layers can be divided into a rectangular array
        of brushes.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        
        * spacing (default: 20) - Spacing of the brush.
        
        * description (default: GIMP Brush Pipe) - Short description of the
          GIH brush pipe.
        
        * cell_width (default: 1) - Width of the brush cells in pixels.
        
        * cell_height (default: 1) - Height of the brush cells in pixels.
        
        * num_cells (default: 1) - Number of cells to cut up.
        
        * ranks - Ranks of the dimensions.
        
        * selection_modes - Selection modes.
        """
        pass

    def file_gih_export_internal(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, file: Gio.File=None, spacing: int=10, name: str='GIMP Brush', params: str=None):
        """Exports Gimp animated brush file (.gih).
        
        Exports Gimp animated brush file (.gih).
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - Dummy parameter.
        
        * image - Input image.
        
        * drawables - Drawables to save.
        
        * file - The file to export.
        
        * spacing (default: 10) - Spacing of the brush.
        
        * name (default: GIMP Brush) - The name of the brush.
        
        * params - The pipe's parameters.
        """
        pass

    def file_gih_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Loads GIMP animated brushes.
        
        This procedure loads a GIMP brush pipe as an image.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - Dummy parameter.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_glob(self, pattern: str=None, filename_encoding: bool=False) -> List[str]:
        """Returns a list of matching filenames.
        
        This can be useful in scripts and other plug-ins (e.g.,
        batch-conversion). See the glob(7) manpage for more info. Note
        however that this isn't a full-featured glob implementation. It
        only handles simple patterns like "/home/foo/bar/*.jpg".
        
        Parameters:
        
        * pattern - The glob pattern (in UTF-8 encoding).
        
        * filename_encoding (default: False) - FALSE to return UTF-8 strings,
          TRUE to return strings in filename encoding.
        
        Returns:
        
        * files - The list of matching filenames.
        """
        pass

    def file_gz_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None):
        """Saves files compressed with gzip.
        
        Image types: RGB*, GRAY*, INDEXED*
        Menu label: gzip archive
        
        This procedure saves files in the gzip compressed format.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        """
        pass

    def file_gz_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Loads files compressed with gzip.
        
        Menu label: gzip archive
        
        This procedure loads files in the gzip compressed format.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_header_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None):
        """Saves files as C unsigned character array.
        
        Image types: INDEXED, RGB
        Menu label: C source code header
        
        FIXME: write help.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        """
        pass

    def file_heif_av1_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None, quality: int=50, lossless: bool=False, save_bit_depth: int=8, pixel_format: str='yuv420', encoder_speed: str='balanced', save_exif: bool=False, save_xmp: bool=False):
        """Exports AVIF images.
        
        Image types: RGB*
        Menu label: HEIF/AVIF
        
        Save image in AV1 Image File Format (AVIF).
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        
        * quality (default: 50) - Quality factor (0 = worst, 100 = best).
        
        * lossless (default: False) - Use lossless compression.
        
        * save_bit_depth (default: 8) - Bit depth of exported image.
        
        * pixel_format (default: yuv420) - Format of color sub-sampling.
        
        * encoder_speed (default: balanced) - Tradeoff between speed and
          compression.
        
        * save_exif (default: False) - Toggle saving Exif data.
        
        * save_xmp (default: False) - Toggle saving XMP data.
        """
        pass

    def file_heif_av1_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Loads AVIF images.
        
        Menu label: HEIF/AVIF
        
        Load image stored in AV1 Image File Format (AVIF).
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_heif_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None, quality: int=50, lossless: bool=False, save_bit_depth: int=8, pixel_format: str='yuv420', encoder_speed: str='balanced', save_exif: bool=False, save_xmp: bool=False):
        """Exports HEIF images.
        
        Image types: RGB*
        Menu label: HEIF/HEIC
        
        Save image in HEIF format (High Efficiency Image File Format).
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        
        * quality (default: 50) - Quality factor (0 = worst, 100 = best).
        
        * lossless (default: False) - Use lossless compression.
        
        * save_bit_depth (default: 8) - Bit depth of exported image.
        
        * pixel_format (default: yuv420) - Format of color sub-sampling.
        
        * encoder_speed (default: balanced) - Tradeoff between speed and
          compression.
        
        * save_exif (default: False) - Toggle saving Exif data.
        
        * save_xmp (default: False) - Toggle saving XMP data.
        """
        pass

    def file_heif_hej2_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Loads HEJ2 images.
        
        Menu label: JPEG 2000 encapsulated in HEIF
        
        Load JPEG 2000 image encapsulated in HEIF (HEJ2).
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_heif_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Loads HEIF images.
        
        Menu label: HEIF/HEIC
        
        Load image stored in HEIF format (High Efficiency Image File Format).
        Typical suffices for HEIF files are .heif, .heic.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_hgt_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None, sample_spacing: str='auto-detect', palette_offset: int=0, palette_type: str='rgb', palette_file: Gio.File=None) -> Gimp.Image:
        """Load HGT data as images.
        
        Menu label: Digital Elevation Model data
        
        Load Digital Elevation Model data in HGT format from the Shuttle Radar
        Topography Mission as images. Though the output image will be
        RGB, all colors are grayscale by default and the contrast will
        be quite low on most earth relief. Therefore you will likely
        want to remap elevation to colors as a second step, for instance
        with the "Gradient Map" plug-in.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        * sample_spacing (default: auto-detect) - The sample spacing of the
          data.
        
        * palette_offset (default: 0) - Offset to beginning of data in the
          palette file.
        
        * palette_type (default: rgb) - The layout for the palette's color
          channels.
        
        * palette_file - The file containing palette data.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_html_table_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None):
        """GIMP Table Magic.
        
        Image types: *
        Menu label: HTML table
        
        Allows you to draw an HTML table in GIMP. See help for more info.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        """
        pass

    def file_icns_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None):
        """Saves files in Apple Icon Image file format.
        
        Image types: *
        Menu label: Apple Icon Image
        
        Saves files in Apple Icon Image file format.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        """
        pass

    def file_icns_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Loads files in Apple Icon Image format.
        
        Menu label: Icns
        
        Loads Apple Icon Image files.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_icns_load_thumb(self, file: Gio.File=None, thumb_size: int=256) -> Tuple[Gimp.Image, int, int, Gimp.ImageType, int]:
        """Loads a preview from an Apple Icon Image file.
        
        Parameters:
        
        * file - The file to load the thumbnail from.
        
        * thumb_size (default: 256) - Preferred thumbnail size.
        
        Returns:
        
        * image - Thumbnail image.
        
        * image_width (default: 0) - Width of the full-sized image (0 for
          unknown).
        
        * image_height (default: 0) - Height of the full-sized image (0 for
          unknown).
        
        * image_type (default: Gimp.ImageType.RGB_IMAGE) - Type of the image.
        
        * num_layers (default: 1) - Number of layers in the image.
        """
        pass

    def file_ico_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None):
        """Saves files in Windows ICO file format.
        
        Image types: *
        Menu label: Microsoft Windows icon
        
        Saves files in Windows ICO file format.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        """
        pass

    def file_ico_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Loads files of Windows ICO file format.
        
        Menu label: Microsoft Windows icon
        
        Loads files of Windows ICO file format.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_ico_load_thumb(self, file: Gio.File=None, thumb_size: int=256) -> Tuple[Gimp.Image, int, int, Gimp.ImageType, int]:
        """Loads a preview from a Windows ICO or CUR files.
        
        Parameters:
        
        * file - The file to load the thumbnail from.
        
        * thumb_size (default: 256) - Preferred thumbnail size.
        
        Returns:
        
        * image - Thumbnail image.
        
        * image_width (default: 0) - Width of the full-sized image (0 for
          unknown).
        
        * image_height (default: 0) - Height of the full-sized image (0 for
          unknown).
        
        * image_type (default: Gimp.ImageType.RGB_IMAGE) - Type of the image.
        
        * num_layers (default: 1) - Number of layers in the image.
        """
        pass

    def file_iff_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Load file in the IFF file format.
        
        Menu label: Amiga IFF
        
        Load file in the IFF file format.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_iff_load_thumb(self, file: Gio.File=None, thumb_size: int=256) -> Tuple[Gimp.Image, int, int, Gimp.ImageType, int]:
        """Load IFF file as thumbnail.
        
        Parameters:
        
        * file - The file to load the thumbnail from.
        
        * thumb_size (default: 256) - Preferred thumbnail size.
        
        Returns:
        
        * image - Thumbnail image.
        
        * image_width (default: 0) - Width of the full-sized image (0 for
          unknown).
        
        * image_height (default: 0) - Height of the full-sized image (0 for
          unknown).
        
        * image_type (default: Gimp.ImageType.RGB_IMAGE) - Type of the image.
        
        * num_layers (default: 1) - Number of layers in the image.
        """
        pass

    def file_j2k_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None, colorspace: str='unknown') -> Gimp.Image:
        """Loads JPEG 2000 codestream.
        
        Menu label: JPEG 2000 codestream
        
        Loads JPEG 2000 codestream. If the color space is set to UNKNOWN (0), we
        will try to guess, which is only possible for few spaces (such
        as grayscale). Most such calls will fail. You are rather
        expected to know the color space of your data.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        * colorspace (default: unknown) - Color space.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_jp2_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Loads JPEG 2000 images.
        
        Menu label: JPEG 2000 image
        
        The JPEG 2000 image loader.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_jpeg_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None, quality: float=0.9, smoothing: float=0.0, optimize: bool=True, progressive: bool=True, cmyk: bool=False, sub_sampling: str='sub-sampling-1x1', baseline: bool=True, restart: int=0, dct: str='integer'):
        """Exports files in the JPEG file format.
        
        Image types: RGB*, GRAY*
        Menu label: JPEG image
        
        Exports files in the lossy, widely supported JPEG format.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        
        * quality (default: 0.9) - Quality of exported image.
        
        * smoothing (default: 0.0) - Smoothing factor for exported image.
        
        * optimize (default: True) - Use optimized tables during Huffman
          coding.
        
        * progressive (default: True) - Create progressive JPEG images.
        
        * cmyk (default: False) - Create a CMYK JPEG image using the
          soft-proofing color profile.
        
        * sub_sampling (default: sub-sampling-1x1) - Sub-sampling type.
        
        * baseline (default: True) - Force creation of a baseline JPEG
          (non-baseline JPEGs can't be read by all decoders).
        
        * restart (default: 0) - Interval of restart markers (in MCU rows, 0 =
          no restart markers).
        
        * dct (default: integer) - DCT method to use.
        """
        pass

    def file_jpeg_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Loads files in the JPEG file format.
        
        Menu label: JPEG image
        
        Loads files in the JPEG file format.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_jpeg_load_thumb(self, file: Gio.File=None, thumb_size: int=256) -> Tuple[Gimp.Image, int, int, Gimp.ImageType, int]:
        """Loads a thumbnail from a JPEG image.
        
        Loads a thumbnail from a JPEG image, if one exists.
        
        Parameters:
        
        * file - The file to load the thumbnail from.
        
        * thumb_size (default: 256) - Preferred thumbnail size.
        
        Returns:
        
        * image - Thumbnail image.
        
        * image_width (default: 0) - Width of the full-sized image (0 for
          unknown).
        
        * image_height (default: 0) - Height of the full-sized image (0 for
          unknown).
        
        * image_type (default: Gimp.ImageType.RGB_IMAGE) - Type of the image.
        
        * num_layers (default: 1) - Number of layers in the image.
        """
        pass

    def file_jpegxl_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None, lossless: bool=False, compression: float=1.0, save_bit_depth: int=8, speed: str='squirrel', uses_original_profile: bool=False, cmyk: bool=False, save_exif: bool=False, save_xmp: bool=False):
        """Saves files in the JPEG XL file format.
        
        Image types: RGB*, GRAY*
        Menu label: JPEG XL image
        
        Saves files in the JPEG XL file format.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        
        * lossless (default: False) - Use lossless compression.
        
        * compression (default: 1.0) - Max. butteraugli distance, lower =
          higher quality. Range: 0 .. 15. 1.0 = visually lossless.
        
        * save_bit_depth (default: 8) - Bit depth of exported image.
        
        * speed (default: squirrel) - Encoder effort setting.
        
        * uses_original_profile (default: False) - Store ICC profile to
          exported JXL file.
        
        * cmyk (default: False) - Create a CMYK JPEG XL image using the
          soft-proofing color profile.
        
        * save_exif (default: False) - Toggle saving Exif data.
        
        * save_xmp (default: False) - Toggle saving XMP data.
        """
        pass

    def file_jpegxl_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Loads files in the JPEG XL file format.
        
        Menu label: JPEG XL image
        
        Loads files in the JPEG XL file format.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_lnk_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Follows a link to an image in a .lnk file.
        
        Menu label: Windows Shortcut
        
        Opens a .lnk file and if it points to an image, it asks GIMP to open the
        linked image.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_mng_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None, interlaced: bool=False, png_compression: int=9, jpeg_quality: float=0.75, jpeg_smoothing: float=0.0, loop: bool=True, default_delay: int=100, default_chunks: str='png-delta', default_dispose: str='combine', bkgd: bool=False, gama: bool=False, phys: bool=True, time: bool=True):
        """Saves images in the MNG file format.
        
        Image types: *
        Menu label: MNG animation
        
        This plug-in saves images in the Multiple-image Network Graphics (MNG)
        format which can be used as a replacement for animated GIFs, and
        more.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        
        * interlaced (default: False) - Use interlacing.
        
        * png_compression (default: 9) - PNG compression level, choose a high
          compression level for small file size.
        
        * jpeg_quality (default: 0.75) - JPEG quality factor.
        
        * jpeg_smoothing (default: 0.0) - JPEG smoothing factor.
        
        * loop (default: True) - (ANIMATED MNG) Loop infinitely.
        
        * default_delay (default: 100) - (ANIMATED MNG) Default delay between
          frames in milliseconds.
        
        * default_chunks (default: png-delta) - (ANIMATED MNG) Default chunks
          type.
        
        * default_dispose (default: combine) - (ANIMATED MNG) Default dispose
          type.
        
        * bkgd (default: False) - Write bKGd (background color) chunk.
        
        * gama (default: False) - Write gAMA (gamma) chunk.
        
        * phys (default: True) - Write pHYs (image resolution) chunk.
        
        * time (default: True) - Write tIME (creation time) chunk.
        """
        pass

    def file_openraster_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None):
        """Save an OpenRaster (.ora) file.
        
        Image types: *
        Menu label: OpenRaster
        
        Save an OpenRaster (.ora) file.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        """
        pass

    def file_openraster_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Load an OpenRaster (.ora) file.
        
        Menu label: OpenRaster
        
        Load an OpenRaster (.ora) file.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_openraster_load_thumb(self, file: Gio.File=None, thumb_size: int=256) -> Tuple[Gimp.Image, int, int, Gimp.ImageType, int]:
        """Loads a thumbnail from an OpenRaster (.ora) file.
        
        Loads a thumbnail from an OpenRaster (.ora) file.
        
        Parameters:
        
        * file - The file to load the thumbnail from.
        
        * thumb_size (default: 256) - Preferred thumbnail size.
        
        Returns:
        
        * image - Thumbnail image.
        
        * image_width (default: 0) - Width of the full-sized image (0 for
          unknown).
        
        * image_height (default: 0) - Height of the full-sized image (0 for
          unknown).
        
        * image_type (default: Gimp.ImageType.RGB_IMAGE) - Type of the image.
        
        * num_layers (default: 1) - Number of layers in the image.
        """
        pass

    def file_pam_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None):
        """Exports files in the PAM file format.
        
        Image types: RGB*, GRAY*, INDEXED*
        Menu label: PAM image
        
        PAM export handles RGB images with or without transparency.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        """
        pass

    def file_pat_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None, description: str='GIMP Pattern'):
        """Exports GIMP pattern file (.PAT).
        
        Image types: *
        Menu label: GIMP pattern
        
        New GIMP patterns can be created by exporting them in the appropriate
        place with this plug-in.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        
        * description (default: GIMP Pattern) - Short description of the
          pattern.
        """
        pass

    def file_pat_export_internal(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, file: Gio.File=None, name: str='GIMP Pattern'):
        """Exports Gimp pattern file (.PAT).
        
        Exports Gimp pattern file (.PAT).
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - Dummy parameter.
        
        * image - Input image.
        
        * drawables - Selected drawables.
        
        * file - The file to export.
        
        * name (default: GIMP Pattern) - The name of the pattern.
        """
        pass

    def file_pat_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Loads GIMP patterns.
        
        Loads GIMP patterns.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - Dummy parameter.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_pbm_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None, raw: str='raw-output'):
        """Exports files in the PBM file format.
        
        Image types: RGB, GRAY, INDEXED
        Menu label: PBM image
        
        PBM exporting produces mono images without transparency.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        
        * raw (default: raw-output) - Whether to export ASCII or raw output.
        """
        pass

    def file_pcx_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None):
        """Exports files in ZSoft PCX file format.
        
        Image types: INDEXED, RGB, GRAY
        Menu label: ZSoft PCX image
        
        FIXME: write help for pcx_export.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        """
        pass

    def file_pcx_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None, override_palette: str='use-built-in-palette') -> Gimp.Image:
        """Loads files in Zsoft PCX file format.
        
        Menu label: ZSoft PCX image
        
        FIXME: write help for pcx_load.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        * override_palette (default: use-built-in-palette) - Whether to use
          the built-in palette or a black and white palette for 1 bit
          images.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_pdf_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None, vectorize: bool=True, ignore_hidden: bool=True, apply_masks: bool=True, layers_as_pages: bool=False, reverse_order: bool=False, root_layers_only: bool=True, convert_text_layers: bool=False, fill_background_color: bool=True):
        """Save files in PDF format.
        
        Image types: *
        Menu label: Portable Document Format
        
        Saves files in Adobe's Portable Document Format. PDF is designed to be
        easily processed by a variety of different platforms, and is a
        distant cousin of PostScript.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        
        * vectorize (default: True) - Convert bitmaps to vector graphics where
          possible.
        
        * ignore_hidden (default: True) - Non-visible layers will not be
          exported.
        
        * apply_masks (default: True) - Apply layer masks before saving
          (Keeping the mask will not change the output, only the PDF
          structure).
        
        * layers_as_pages (default: False) - Layers as pages (bottom layers
          first).
        
        * reverse_order (default: False) - Reverse the pages order (top layers
          first).
        
        * root_layers_only (default: True) - Only the root layers are
          considered pages.
        
        * convert_text_layers (default: False) - Convert text layers to raster
          graphics.
        
        * fill_background_color (default: True) - Fill transparent areas with
          background color if layer has an alpha channel.
        """
        pass

    def file_pdf_export_multi(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, images: GObject.Value=None, vectorize: bool=True, ignore_hidden: bool=True, apply_masks: bool=True, fill_background_color: bool=True, uri: str=None):
        """Save files in PDF format.
        
        Image types: *
        Menu label: _Create multipage PDF...
        
        Saves files in Adobe's Portable Document Format. PDF is designed to be
        easily processed by a variety of different platforms, and is a
        distant cousin of PostScript.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * images - Input image for each page (An image can appear more than
          once).
        
        * vectorize (default: True) - Convert bitmaps to vector graphics where
          possible.
        
        * ignore_hidden (default: True) - Non-visible layers will not be
          exported.
        
        * apply_masks (default: True) - Apply layer masks before saving
          (Keeping the mask will not change the output, only the PDF
          structure).
        
        * fill_background_color (default: True) - Fill transparent areas with
          background color if layer has an alpha channel.
        
        * uri - The URI of the file to save to.
        """
        pass

    def file_pdf_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None, width: int=0, height: int=0, keep_ratio: bool=True, prefer_native_dimensions: bool=False, password: str=None, reverse_order: bool=False, pages: Gimp.Int32Array=None, antialias: bool=True, white_background: bool=True) -> Gimp.Image:
        """Load file in PDF format.
        
        Menu label: Portable Document Format
        
        Loads files in Adobe's Portable Document Format. PDF is designed to be
        easily processed by a variety of different platforms, and is a
        distant cousin of PostScript.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        * width (default: 0) - Width (in pixels) to load the image in. (0 for
          the corresponding width per native ratio).
        
        * height (default: 0) - Height (in pixels) to load the image in. (0
          for the corresponding height per native ratio).
        
        * keep_ratio (default: True) - Force dimensions with aspect ratio.
        
        * prefer_native_dimensions (default: False) - Load and use dimensions
          from source file.
        
        * password - The password to decrypt the encrypted PDF file.
        
        * reverse_order (default: False) - Load PDF pages in reverse order.
        
        * pages - The pages to load in the expected order.
        
        * antialias (default: True) - Render texts with anti-aliasing.
        
        * white_background (default: True) - Render all pages as opaque by
          filling the background in white.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_pdf_load_thumb(self, file: Gio.File=None, thumb_size: int=256) -> Tuple[Gimp.Image, int, int, Gimp.ImageType, int]:
        """Loads a preview from a PDF file.
        
        Loads a small preview of the first page of the PDF format file. Uses the
        embedded thumbnail if present.
        
        Parameters:
        
        * file - The file to load the thumbnail from.
        
        * thumb_size (default: 256) - Preferred thumbnail size.
        
        Returns:
        
        * image - Thumbnail image.
        
        * image_width (default: 0) - Width of the full-sized image (0 for
          unknown).
        
        * image_height (default: 0) - Height of the full-sized image (0 for
          unknown).
        
        * image_type (default: Gimp.ImageType.RGB_IMAGE) - Type of the image.
        
        * num_layers (default: 1) - Number of layers in the image.
        """
        pass

    def file_pfm_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None):
        """Exports files in the PFM file format.
        
        Image types: RGB, GRAY, INDEXED
        Menu label: PFM image
        
        PFM export handles all images without transparency.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        """
        pass

    def file_pgm_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None, raw: str='raw-output'):
        """Exports files in the PGM file format.
        
        Image types: RGB, GRAY, INDEXED
        Menu label: PGM image
        
        PGM exporting produces grayscale images without transparency.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        
        * raw (default: raw-output) - Whether to export ASCII or raw output.
        """
        pass

    def file_pix_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None):
        """Export file in the Alias|Wavefront pix/matte file format.
        
        Image types: *
        Menu label: Alias Pix image
        
        Export file in the Alias|Wavefront pix/matte file format.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        """
        pass

    def file_pix_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Loads files of the Alias|Wavefront or Esm Software Pix file format.
        
        Menu label: Alias Pix image
        
        Loads files of the Alias|Wavefront or Esm Software Pix file format.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_png_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None, interlaced: bool=False, compression: int=9, bkgd: bool=True, offs: bool=False, phys: bool=True, time: bool=True, save_transparent: bool=False, optimize_palette: bool=False, format: str='auto'):
        """Exports files in PNG file format.
        
        Image types: *
        Menu label: PNG image
        
        This plug-in exports Portable Network Graphics (PNG) files.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        
        * interlaced (default: False) - Use Adam7 interlacing.
        
        * compression (default: 9) - Deflate Compression factor (0..9).
        
        * bkgd (default: True) - Write bKGD chunk (PNG metadata).
        
        * offs (default: False) - Write oFFs chunk (PNG metadata).
        
        * phys (default: True) - Write pHYs chunk (PNG metadata).
        
        * time (default: True) - Write tIME chunk (PNG metadata).
        
        * save_transparent (default: False) - Preserve color of completely
          transparent pixels.
        
        * optimize_palette (default: False) - When checked, save as 1, 2, 4,
          or 8-bit depending on number of colors used. When unchecked,
          always save as 8-bit.
        
        * format (default: auto) - PNG export format.
        """
        pass

    def file_png_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Loads files in PNG file format.
        
        Menu label: PNG image
        
        This plug-in loads Portable Network Graphics (PNG) files.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_pnm_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None, raw: str='raw-output'):
        """Exports files in the PNM file format.
        
        Image types: RGB, GRAY, INDEXED
        Menu label: PNM image
        
        PNM export handles all image types without transparency.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        
        * raw (default: raw-output) - Whether to export ASCII or raw output.
        """
        pass

    def file_pnm_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Loads files in the PNM file format.
        
        Menu label: PNM Image
        
        This plug-in loads files in the various Netpbm portable file formats.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_ppm_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None, raw: str='raw-output'):
        """Exports files in the PPM file format.
        
        Image types: RGB, GRAY, INDEXED
        Menu label: PPM image
        
        PPM export handles RGB images without transparency.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        
        * raw (default: raw-output) - Whether to export ASCII or raw output.
        """
        pass

    def file_print_gtk(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None):
        """Print the image.
        
        Image types: *
        Menu label: _Print...
        Menu path: <Image>/File/[Send]
        
        Print the image using the GTK+ Print API.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        """
        pass

    def file_print_gtk_page_setup(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None):
        """Adjust page size and orientation for printing.
        
        Image types: *
        Menu label: Page Set_up...
        Menu path: <Image>/File/[Send]
        
        Adjust page size and orientation for printing the image using the GTK+
        Print API.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        """
        pass

    def file_ps_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None, width: float=287.0, height: float=200.0, x_offset: float=5.0, y_offset: float=5.0, unit: str='inch', keep_ratio: bool=True, rotation: int=0, level: bool=True, eps_flag: bool=False, show_preview: bool=False, preview: int=256):
        """Export image as PostScript document.
        
        Image types: RGB, GRAY, INDEXED
        Menu label: PostScript document
        
        PostScript exporting handles all image types except those with alpha
        channels.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        
        * width (default: 287.0) - Width of the image in PostScript file (0:
          use input image size).
        
        * height (default: 200.0) - Height of the image in PostScript file (0:
          use input image size).
        
        * x_offset (default: 5.0) - X-offset to image from lower left corner.
        
        * y_offset (default: 5.0) - Y-offset to image from lower left corner.
        
        * unit (default: inch) - Unit of measure for offset values.
        
        * keep_ratio (default: True) - If enabled, aspect ratio will be
          maintained on export. Otherwise, the width and height values
          will be used.
        
        * rotation (default: 0) - 0, 90, 180, 270.
        
        * level (default: True) - If enabled, export in PostScript Level 2
          format. Otherwise, export in PostScript Level 1 format.
        
        * eps_flag (default: False) - If enabled, export as Encapsulated
          PostScript. Otherwise, export as PostScript.
        
        * show_preview (default: False) - Show Preview.
        
        * preview (default: 256) - Maximum size of preview. Set to 0 for no
          preview.
        """
        pass

    def file_ps_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None, width: int=0, height: int=0, keep_ratio: bool=True, prefer_native_dimensions: bool=False, check_bbox: bool=True, pages: str='1', coloring: str='rgb', text_alpha_bits: str='none', graphic_alpha_bits: str='none') -> Gimp.Image:
        """Load PostScript documents.
        
        Menu label: PostScript document
        
        Load PostScript documents.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        * width (default: 0) - Width (in pixels) to load the image in. (0 for
          the corresponding width per native ratio).
        
        * height (default: 0) - Height (in pixels) to load the image in. (0
          for the corresponding height per native ratio).
        
        * keep_ratio (default: True) - Force dimensions with aspect ratio.
        
        * prefer_native_dimensions (default: False) - Load and use dimensions
          from source file.
        
        * check_bbox (default: True) - FALSE: Use width/height, TRUE: Use
          BoundingBox.
        
        * pages (default: 1) - Pages to load (e.g.: 1,3,5-7).
        
        * coloring (default: rgb) - Import color format.
        
        * text_alpha_bits (default: none) - Text anti-aliasing strength.
        
        * graphic_alpha_bits (default: none) - Graphic anti-aliasing strength.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_ps_load_thumb(self, file: Gio.File=None, thumb_size: int=256) -> Tuple[Gimp.Image, int, int, Gimp.ImageType, int]:
        """Loads a small preview from a PostScript or PDF document.
        
        Parameters:
        
        * file - The file to load the thumbnail from.
        
        * thumb_size (default: 256) - Preferred thumbnail size.
        
        Returns:
        
        * image - Thumbnail image.
        
        * image_width (default: 0) - Width of the full-sized image (0 for
          unknown).
        
        * image_height (default: 0) - Height of the full-sized image (0 for
          unknown).
        
        * image_type (default: Gimp.ImageType.RGB_IMAGE) - Type of the image.
        
        * num_layers (default: 1) - Number of layers in the image.
        """
        pass

    def file_psd_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None, clippingpath: bool=False, clippingpathname: str=None, clippingpathflatness: float=0.2, cmyk: bool=False, duotone: bool=False):
        """Saves files in the Photoshop (TM) PSD file format.
        
        Image types: *
        Menu label: Photoshop image
        
        This filter saves files of Adobe Photoshop (TM) native PSD format. These
        files may be of any image type supported by GIMP, with or
        without layers, layer masks, aux channels and guides.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        
        * clippingpath (default: False) - Select a path to be the clipping
          path.
        
        * clippingpathname - Clipping path name (ignored if no clipping path).
        
        * clippingpathflatness (default: 0.2) - Clipping path flatness in
          device pixels (ignored if no clipping path).
        
        * cmyk (default: False) - Export a CMYK PSD image using the
          soft-proofing color profile.
        
        * duotone (default: False) - Export as a Duotone PSD file if Duotone
          color space information was attached to the image when
          originally imported.
        """
        pass

    def file_psd_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Loads images from the Photoshop PSD and PSB file formats.
        
        Menu label: Photoshop image
        
        This plug-in loads images in Adobe Photoshop (TM) native PSD and PSB
        format.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_psd_load_merged(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Loads images from the Photoshop PSD and PSB file formats.
        
        Menu label: Photoshop image (merged)
        
        This plug-in loads the merged image data in Adobe Photoshop (TM) native
        PSD and PSB format.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_psd_load_metadata(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None, size: int=0, image: Gimp.Image=None, metadata_type: bool=False, cmyk: bool=False) -> Gimp.Image:
        """Loads Photoshop-format metadata from other file formats.
        
        Loads Photoshop-format metadata from other file formats.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        * size (default: 0)
        
        * image - The image.
        
        * metadata_type (default: False) - If the metadata contains image or
          layer PSD resources.
        
        * cmyk (default: False) - If the layer metadata needs to be converted
          from CMYK colorspace.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_psd_load_thumb(self, file: Gio.File=None, thumb_size: int=256) -> Tuple[Gimp.Image, int, int, Gimp.ImageType, int]:
        """Loads thumbnails from the Photoshop PSD file format.
        
        This plug-in loads thumbnail images from Adobe Photoshop (TM) native PSD
        format files.
        
        Parameters:
        
        * file - The file to load the thumbnail from.
        
        * thumb_size (default: 256) - Preferred thumbnail size.
        
        Returns:
        
        * image - Thumbnail image.
        
        * image_width (default: 0) - Width of the full-sized image (0 for
          unknown).
        
        * image_height (default: 0) - Height of the full-sized image (0 for
          unknown).
        
        * image_type (default: Gimp.ImageType.RGB_IMAGE) - Type of the image.
        
        * num_layers (default: 1) - Number of layers in the image.
        """
        pass

    def file_psp_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Loads images from the Paint Shop Pro PSP file format.
        
        Menu label: Paint Shop Pro image
        
        This plug-in loads and exports images in Paint Shop Pro's native PSP
        format. Vector layers aren't handled. Exporting isn't yet
        implemented.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_qoi_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None):
        """Export image in the QOI file format.
        
        Image types: *
        Menu label: Quite OK Image
        
        Export image in the QOI file format (Quite OK Image).
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        """
        pass

    def file_qoi_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Load file in the QOI file format.
        
        Menu label: Quite OK Image
        
        Load file in the QOI file format (Quite OK Image).
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_raw_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None, planar_configuration: str='contiguous', palette_type: str='rgb'):
        """Dump images to disk in raw format.
        
        Image types: INDEXED, GRAY, RGB, RGBA
        Menu label: Raw image data
        
        Dump images to disk in raw format.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        
        * planar_configuration (default: contiguous) - How color pixel data
          are stored.
        
        * palette_type (default: rgb) - The layout for the palette's color
          channels.
        """
        pass

    def file_raw_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None, width: int=350, height: int=350, offset: int=0, pixel_format: str='rgb-8bpc', data_type: str='unsigned', endianness: str='little-endian', planar_configuration: str='contiguous', palette_offset: int=0, palette_type: str='rgb', palette_file: Gio.File=None) -> Gimp.Image:
        """Load raw images, specifying image information.
        
        Menu label: Raw image data
        
        Load raw images, specifying image information.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        * width (default: 350) - Image width in number of pixels.
        
        * height (default: 350) - Image height in number of pixels.
        
        * offset (default: 0) - Offset to beginning of image in raw data.
        
        * pixel_format (default: rgb-8bpc) - The layout of pixel data, such as
          components and their order.
        
        * data_type (default: unsigned) - Data type used to represent pixel
          values.
        
        * endianness (default: little-endian) - Order of sequences of bytes.
        
        * planar_configuration (default: contiguous) - How color pixel data
          are stored.
        
        * palette_offset (default: 0) - Offset to beginning of data in the
          palette file.
        
        * palette_type (default: rgb) - The layout for the palette's color
          channels.
        
        * palette_file - The file containing palette data.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_raw_placeholder_ari_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Load files in the ARI raw format via placeholder.
        
        This plug-in loads files in Arriflex' raw ARI format by calling
        placeholder.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_raw_placeholder_bay_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Load files in the BAY raw format via placeholder.
        
        This plug-in loads files in Casio's raw BAY format by calling
        placeholder.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_raw_placeholder_canon_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Load files in the Canon raw formats via placeholder.
        
        This plug-in loads files in Canon's raw formats by calling placeholder.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_raw_placeholder_cine_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Load files in the CINE raw format via placeholder.
        
        This plug-in loads files in Phantom Software's raw CINE format by
        calling placeholder.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_raw_placeholder_dng_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Load files in the DNG raw format via placeholder.
        
        This plug-in loads files in the Adobe Digital Negative DNG format by
        calling placeholder.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_raw_placeholder_erf_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Load files in the ERF raw format via placeholder.
        
        This plug-in loads files in Epson's raw ERF format by calling
        placeholder.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_raw_placeholder_hasselblad_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Load files in the Hasselblad raw formats via placeholder.
        
        This plug-in loads files in Hasselblad's raw formats by calling
        placeholder.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_raw_placeholder_kodak_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Load files in the Kodak raw formats via placeholder.
        
        This plug-in loads files in Kodak's raw formats by calling placeholder.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_raw_placeholder_mef_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Load files in the MEF raw format via placeholder.
        
        This plug-in loads files in Mamiya's raw MEF format by calling
        placeholder.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_raw_placeholder_minolta_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Load files in the Minolta raw formats via placeholder.
        
        This plug-in loads files in Minolta's raw formats by calling
        placeholder.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_raw_placeholder_mos_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Load files in the MOS raw format via placeholder.
        
        This plug-in loads files in Leaf's raw MOS format by calling
        placeholder.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_raw_placeholder_nikon_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Load files in the Nikon raw formats via placeholder.
        
        This plug-in loads files in Nikon's raw formats by calling placeholder.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_raw_placeholder_orf_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Load files in the ORF raw format via placeholder.
        
        This plug-in loads files in Olympus' raw ORF format by calling
        placeholder.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_raw_placeholder_panasonic_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Load files in the Panasonic raw formats via placeholder.
        
        This plug-in loads files in Panasonic's raw formats by calling
        placeholder.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_raw_placeholder_pef_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Load files in the PEF raw format via placeholder.
        
        This plug-in loads files in Pentax' raw PEF format by calling
        placeholder.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_raw_placeholder_phaseone_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Load files in the Phase One raw formats via placeholder.
        
        This plug-in loads files in Phase One's raw formats by calling
        placeholder.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_raw_placeholder_pxn_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Load files in the PXN raw format via placeholder.
        
        This plug-in loads files in Logitech's raw PXN format by calling
        placeholder.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_raw_placeholder_qtk_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Load files in the QTK raw format via placeholder.
        
        This plug-in loads files in Apple's QuickTake QTK raw format by calling
        placeholder.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_raw_placeholder_raf_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Load files in the RAF raw format via placeholder.
        
        This plug-in loads files in Fujifilm's raw RAF format by calling
        placeholder.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_raw_placeholder_rdc_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Load files in the RDC raw format via placeholder.
        
        This plug-in loads files in Digital Foto Maker's raw RDC format by
        calling placeholder.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_raw_placeholder_rwl_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Load files in the RWL raw format via placeholder.
        
        This plug-in loads files in Leica's raw RWL format by calling
        placeholder.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_raw_placeholder_sinar_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Load files in the Sinar raw formats via placeholder.
        
        This plug-in loads files in Sinar's raw formats by calling placeholder.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_raw_placeholder_sony_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Load files in the Sony raw formats via placeholder.
        
        This plug-in loads files in Sony's raw formats by calling placeholder.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_raw_placeholder_srw_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Load files in the SRW raw format via placeholder.
        
        This plug-in loads files in Samsung's raw SRW format by calling
        placeholder.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_raw_placeholder_x3f_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Load files in the X3F raw format via placeholder.
        
        This plug-in loads files in Sigma's raw X3F format by calling
        placeholder.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_rgbe_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None):
        """Saves files in the RGBE file format.
        
        Image types: *
        Menu label: Radiance RGBE
        
        This procedure exports images in the RGBE format, using gegl:rgbe-save.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        """
        pass

    def file_rgbe_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Load files in the RGBE file format.
        
        Menu label: Radiance RGBE
        
        This procedure loads images in the RGBE format, using gegl:rgbe-load.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_sgi_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None, compression: str='rle'):
        """Exports files in SGI image file format.
        
        Image types: *
        Menu label: Silicon Graphics IRIS image
        
        This plug-in exports SGI image files.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        
        * compression (default: rle) - Compression level.
        """
        pass

    def file_sgi_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Loads files in SGI image file format.
        
        Menu label: Silicon Graphics IRIS image
        
        This plug-in loads SGI image files.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_sunras_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None, rle: str='rle'):
        """Export file in the SunRaster file format.
        
        Image types: RGB, GRAY, INDEXED
        Menu label: SUN Rasterfile image
        
        SUNRAS exporting handles all image types except those with alpha
        channels.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        
        * rle (default: rle) - Use standard or Run-Length Encoded output.
        """
        pass

    def file_sunras_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Load file of the SunRaster file format.
        
        Menu label: SUN Rasterfile image
        
        Load file of the SunRaster file format.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_svg_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None, width: int=0, height: int=0, keep_ratio: bool=True, prefer_native_dimensions: bool=False, paths: str='no-import') -> Gimp.Image:
        """Loads files in the SVG file format.
        
        Menu label: SVG image
        
        Renders SVG files to raster graphics using librsvg.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        * width (default: 0) - Width (in pixels) to load the image in. (0 for
          the corresponding width per native ratio).
        
        * height (default: 0) - Height (in pixels) to load the image in. (0
          for the corresponding height per native ratio).
        
        * keep_ratio (default: True) - Force dimensions with aspect ratio.
        
        * prefer_native_dimensions (default: False) - Load and use dimensions
          from source file.
        
        * paths (default: no-import) - Whether and how to import paths so that
          they can be used with the path tool.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_tga_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None, rle: bool=True, origin: str='bottom-left'):
        """Exports files in the Targa file format.
        
        Image types: *
        Menu label: TarGA image
        
        FIXME: write help for tga_export.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        
        * rle (default: True) - Use RLE compression.
        
        * origin (default: bottom-left) - Image origin.
        """
        pass

    def file_tga_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Loads files of Targa file format.
        
        Menu label: TarGA image
        
        FIXME: write help for tga_load.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_tiff_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None, bigtiff: bool=False, compression: str='none', save_transparent_pixels: bool=True, cmyk: bool=False):
        """Exports files in the TIFF or BigTIFF file formats.
        
        Image types: *
        Menu label: TIFF or BigTIFF image
        
        Exports files in the Tag Image File Format (TIFF) or its 64-bit offsets
        variant (BigTIFF) able to support much bigger file sizes.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        
        * bigtiff (default: False) - The BigTIFF variant file format uses
          64-bit offsets, hence supporting over 4GiB files and bigger.
        
        * compression (default: none) - Compression type.
        
        * save_transparent_pixels (default: True) - Keep the color data masked
          by an alpha channel intact (do not store premultiplied
          components).
        
        * cmyk (default: False) - Create a CMYK TIFF image using the
          soft-proofing color profile.
        """
        pass

    def file_tiff_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Loads files of the TIFF and BigTIFF file formats.
        
        Menu label: TIFF or BigTIFF image
        
        Loads files of the Tag Image File Format (TIFF) and its 64-bit offsets
        variant (BigTIFF).
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_wbmp_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Loads files of Wireless BMP file format.
        
        Menu label: Wireless BMP image
        
        Loads files of Wireless BMP file format.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_webp_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None, preset: str='default', lossless: bool=False, quality: float=90.0, alpha_quality: float=100.0, use_sharp_yuv: bool=False, animation_loop: bool=True, minimize_size: bool=True, keyframe_distance: int=50, default_delay: int=200, force_delay: bool=False, animation: bool=False):
        """Saves files in the WebP image format.
        
        Image types: *
        Menu label: WebP image
        
        Saves files in the WebP image format.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        
        * preset (default: default) - WebP encoder preset.
        
        * lossless (default: False) - Use lossless encoding.
        
        * quality (default: 90.0) - Quality of the image.
        
        * alpha_quality (default: 100.0) - Quality of the image's alpha
          channel.
        
        * use_sharp_yuv (default: False) - Use sharper (but slower) RGB→YUV
          conversion.
        
        * animation_loop (default: True) - Loop animation infinitely.
        
        * minimize_size (default: True) - Minimize output file size.
        
        * keyframe_distance (default: 50) - Maximum distance between
          keyframes.
        
        * default_delay (default: 200) - Default delay (in milliseconds) to
          use when timestamps for frames are not available or forced.
        
        * force_delay (default: False) - Force default delay on all frames.
        
        * animation (default: False) - Use layers for animation.
        """
        pass

    def file_webp_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Loads images in the WebP file format.
        
        Menu label: WebP image
        
        Loads images in the WebP file format.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_wmf_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None, width: int=0, height: int=0, keep_ratio: bool=True, prefer_native_dimensions: bool=False) -> Gimp.Image:
        """Loads files in the WMF file format.
        
        Menu label: Microsoft WMF file
        
        Loads files in the WMF file format.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        * width (default: 0) - Width (in pixels) to load the image in. (0 for
          the corresponding width per native ratio).
        
        * height (default: 0) - Height (in pixels) to load the image in. (0
          for the corresponding height per native ratio).
        
        * keep_ratio (default: True) - Force dimensions with aspect ratio.
        
        * prefer_native_dimensions (default: False) - Load and use dimensions
          from source file.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_wmf_load_thumb(self, file: Gio.File=None, thumb_size: int=256) -> Tuple[Gimp.Image, int, int, Gimp.ImageType, int]:
        """Loads a small preview from a WMF image.
        
        Parameters:
        
        * file - The file to load the thumbnail from.
        
        * thumb_size (default: 256) - Preferred thumbnail size.
        
        Returns:
        
        * image - Thumbnail image.
        
        * image_width (default: 0) - Width of the full-sized image (0 for
          unknown).
        
        * image_height (default: 0) - Height of the full-sized image (0 for
          unknown).
        
        * image_type (default: Gimp.ImageType.RGB_IMAGE) - Type of the image.
        
        * num_layers (default: 1) - Number of layers in the image.
        """
        pass

    def file_xbm_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None, save_comment: bool=False, gimp_comment: str='Created with GIMP', x10_format: bool=False, use_hot_spot: bool=False, hot_spot_x: int=0, hot_spot_y: int=0, prefix: str='bitmap', write_mask: bool=False, mask_suffix: str='-mask'):
        """Export a file in X10 or X11 bitmap (XBM) file format.
        
        Image types: INDEXED
        Menu label: X BitMap image
        
        X10 or X11 bitmap (XBM) file format. XBM is a lossless format for flat
        black-and-white (two color indexed) images.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        
        * save_comment (default: False) - Write a comment at the beginning of
          the file.
        
        * gimp_comment (default: Created with GIMP) - Image description
          (maximum 72 bytes).
        
        * x10_format (default: False) - Export in X10 format.
        
        * use_hot_spot (default: False) - Write hotspot information.
        
        * hot_spot_x (default: 0) - X coordinate of hotspot.
        
        * hot_spot_y (default: 0) - Y coordinate of hotspot.
        
        * prefix (default: bitmap) - Identifier prefix [determined from
          filename].
        
        * write_mask (default: False) - Write extra mask file.
        
        * mask_suffix (default: -mask) - Suffix of the mask file.
        """
        pass

    def file_xbm_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Load a file in X10 or X11 bitmap (XBM) file format.
        
        Menu label: X BitMap image
        
        Load a file in X10 or X11 bitmap (XBM) file format. XBM is a lossless
        format for flat black-and-white (two color indexed) images.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_xpm_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None, threshold: int=127):
        """Export files in XPM (X11 Pixmap) format.
        
        Image types: *
        Menu label: X PixMap image
        
        Export files in XPM (X11 Pixmap) format. XPM is a portable image format
        designed to be included in C source code. XLib provides utility
        functions to read this format. Newer code should however be
        using gdk-pixbuf-csource instead. XPM supports colored images,
        unlike the XBM format which XPM was designed to replace.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        
        * threshold (default: 127) - Alpha threshold.
        """
        pass

    def file_xpm_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Load files in XPM (X11 Pixmap) format.
        
        Menu label: X PixMap image
        
        Load files in XPM (X11 Pixmap) format. XPM is a portable image format
        designed to be included in C source code. XLib provides utility
        functions to read this format. Newer code should however be
        using gdk-pixbuf-csource instead. XPM supports colored images,
        unlike the XBM format which XPM was designed to replace.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_xwd_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None):
        """Exports files in the XWD (X Window Dump) format.
        
        Image types: RGB, GRAY, INDEXED
        Menu label: X window dump
        
        XWD exporting handles all image types except those with alpha channels.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        """
        pass

    def file_xwd_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Loads files in the XWD (X Window Dump) format.
        
        Menu label: X window dump
        
        Loads files in the XWD (X Window Dump) format. XWD image files are
        produced by the program xwd. Xwd is an X Window System window
        dumping utility.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def file_xz_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None):
        """Saves files compressed with xz.
        
        Image types: RGB*, GRAY*, INDEXED*
        Menu label: xz archive
        
        This procedure saves files in the xz compressed format.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The image to export.
        
        * file - The file to export to.
        
        * options - Export options.
        """
        pass

    def file_xz_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Loads files compressed with xz.
        
        Menu label: xz archive
        
        This procedure loads files in the xz compressed format.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def gimp_airbrush(self, drawable: Gimp.Drawable=None, pressure: float=0.0, strokes: Gimp.DoubleArray=None):
        """Paint in the current brush with varying pressure. Paint application
        is time-dependent.
        
        This tool simulates the use of an airbrush. Paint pressure represents
        the relative intensity of the paint application. High pressure
        results in a thicker layer of paint while low pressure results
        in a thinner layer.
        
        Parameters:
        
        * drawable - The affected drawable.
        
        * pressure (default: 0.0) - The pressure of the airbrush strokes.
        
        * strokes - Array of stroke coordinates: { s1.x, s1.y, s2.x, s2.y,
          ..., sn.x, sn.y }.
        """
        pass

    def gimp_airbrush_default(self, drawable: Gimp.Drawable=None, strokes: Gimp.DoubleArray=None):
        """Paint in the current brush with varying pressure. Paint application
        is time-dependent.
        
        This tool simulates the use of an airbrush. It is similar to
        'gimp-airbrush' except that the pressure is derived from the
        airbrush tools options box. It the option has not been set the
        default for the option will be used.
        
        Parameters:
        
        * drawable - The affected drawable.
        
        * strokes - Array of stroke coordinates: { s1.x, s1.y, s2.x, s2.y,
          ..., sn.x, sn.y }.
        """
        pass

    def gimp_attach_parasite(self, parasite: Gimp.Parasite=None):
        """Add a global parasite.
        
        This procedure attaches a global parasite. It has no return values.
        
        Parameters:
        
        * parasite - The parasite to attach.
        """
        pass

    def gimp_brush_get_angle(self, brush: Gimp.Brush=None) -> float:
        """Gets the rotation angle of a generated brush.
        
        Gets the angle of rotation for a generated brush. Returns an error when
        called for a non-parametric brush.
        
        Parameters:
        
        * brush - The brush.
        
        Returns:
        
        * angle (default: 0.0) - The rotation angle of the brush in degree.
        """
        pass

    def gimp_brush_get_aspect_ratio(self, brush: Gimp.Brush=None) -> float:
        """Gets the aspect ratio of a generated brush.
        
        Gets the aspect ratio of a generated brush. Returns an error when called
        for a non-parametric brush. The aspect ratio is a double between
        0.0 and 1000.0.
        
        Parameters:
        
        * brush - The brush.
        
        Returns:
        
        * aspect_ratio (default: 0.0) - The aspect ratio of the brush.
        """
        pass

    def gimp_brush_get_by_name(self, name: str=None) -> Gimp.Brush:
        """Returns the brush with the given name.
        
        Return an existing brush having the given name. Returns %NULL when no
        brush exists of that name.
        
        Parameters:
        
        * name - The name of the brush.
        
        Returns:
        
        * brush - The brush.
        """
        pass

    def gimp_brush_get_hardness(self, brush: Gimp.Brush=None) -> float:
        """Gets the hardness of a generated brush.
        
        Gets the hardness of a generated brush. The hardness of a brush is the
        amount its intensity fades at the outside edge, as a double
        between 0.0 and 1.0. Returns an error when called for a
        non-parametric brush.
        
        Parameters:
        
        * brush - The brush.
        
        Returns:
        
        * hardness (default: 0.0) - The hardness of the brush.
        """
        pass

    def gimp_brush_get_info(self, brush: Gimp.Brush=None) -> Tuple[int, int, int, int]:
        """Gets information about the brush.
        
        Gets information about the brush: brush extents (width and height),
        color depth and mask depth (bpp). The color bpp is zero when the
        brush is parametric versus raster.
        
        Parameters:
        
        * brush - The brush.
        
        Returns:
        
        * width (default: 0) - The brush width.
        
        * height (default: 0) - The brush height.
        
        * mask_bpp (default: 0) - The brush mask bpp.
        
        * color_bpp (default: 0) - The brush color bpp.
        """
        pass

    def gimp_brush_get_pixels(self, brush: Gimp.Brush=None) -> Tuple[int, int, int, GLib.Bytes, int, GLib.Bytes]:
        """Gets information about the brush.
        
        Gets information about the brush: the brush extents (width and height)
        and its pixels data. The color bpp is zero and pixels empty when
        the brush is parametric versus raster.
        
        Parameters:
        
        * brush - The brush.
        
        Returns:
        
        * width (default: 0) - The brush width.
        
        * height (default: 0) - The brush height.
        
        * mask_bpp (default: 0) - The brush mask bpp.
        
        * mask_bytes - The brush mask data.
        
        * color_bpp (default: 0) - The brush color bpp.
        
        * color_bytes - The brush color data.
        """
        pass

    def gimp_brush_get_radius(self, brush: Gimp.Brush=None) -> float:
        """Gets the radius of a generated brush.
        
        Gets the radius of a generated brush. Returns an error when called for a
        non-parametric brush.
        
        Parameters:
        
        * brush - The brush.
        
        Returns:
        
        * radius (default: 0.0) - The radius of the brush in pixels.
        """
        pass

    def gimp_brush_get_shape(self, brush: Gimp.Brush=None) -> Gimp.BrushGeneratedShape:
        """Gets the shape of a generated brush.
        
        Gets the shape of a generated brush. Returns an error when called for a
        non-parametric brush. The choices for shape are Circle
        (GIMP_BRUSH_GENERATED_CIRCLE), Square
        (GIMP_BRUSH_GENERATED_SQUARE), and Diamond
        (GIMP_BRUSH_GENERATED_DIAMOND). Other shapes might be added in
        the future.
        
        Parameters:
        
        * brush - The brush.
        
        Returns:
        
        * shape (default: Gimp.BrushGeneratedShape.CIRCLE) - The brush shape.
        """
        pass

    def gimp_brush_get_spacing(self, brush: Gimp.Brush=None) -> int:
        """Gets the brush spacing, the stamping frequency.
        
        Returns the spacing setting for the brush. Spacing is an integer between
        0 and 1000 which represents a percentage of the maximum of the
        width and height of the mask. Both parametric and raster brushes
        have a spacing.
        
        Parameters:
        
        * brush - The brush.
        
        Returns:
        
        * spacing (default: 0) - The brush spacing.
        """
        pass

    def gimp_brush_get_spikes(self, brush: Gimp.Brush=None) -> int:
        """Gets the number of spikes for a generated brush.
        
        Gets the number of spikes for a generated brush. Returns an error when
        called for a non-parametric brush.
        
        Parameters:
        
        * brush - The brush.
        
        Returns:
        
        * spikes (default: 0) - The number of spikes on the brush.
        """
        pass

    def gimp_brush_is_generated(self, brush: Gimp.Brush=None) -> bool:
        """Whether the brush is generated (parametric versus raster).
        
        Returns TRUE when brush is parametric.
        
        Parameters:
        
        * brush - The brush.
        
        Returns:
        
        * generated (default: False) - TRUE if the brush is generated.
        """
        pass

    def gimp_brush_new(self, name: str=None) -> Gimp.Brush:
        """Create a new generated brush having default parameters.
        
        Creates a new, parametric brush.
        
        Parameters:
        
        * name - The requested name of the new brush.
        
        Returns:
        
        * brush - The brush.
        """
        pass

    def gimp_brush_set_angle(self, brush: Gimp.Brush=None, angle_in: float=0.0) -> float:
        """Sets the rotation angle of a generated brush.
        
        Sets the rotation angle for a generated brush. Sets the angle modulo
        180, in the range [-180.0, 180.0]. Returns the clamped value.
        Returns an error when brush is non-parametric or not editable.
        
        Parameters:
        
        * brush - The brush.
        
        * angle_in (default: 0.0) - The desired brush rotation angle in
          degrees.
        
        Returns:
        
        * angle_out (default: 0.0) - The brush rotation angle actually
          assigned.
        """
        pass

    def gimp_brush_set_aspect_ratio(self, brush: Gimp.Brush=None, aspect_ratio_in: float=0.0) -> float:
        """Sets the aspect ratio of a generated brush.
        
        Sets the aspect ratio for a generated brush. Clamps aspect ratio to
        [0.0, 1000.0]. Returns the clamped value. Returns an error when
        brush is non-parametric or not editable.
        
        Parameters:
        
        * brush - The brush.
        
        * aspect_ratio_in (default: 0.0) - The desired brush aspect ratio.
        
        Returns:
        
        * aspect_ratio_out (default: 0.0) - The brush aspect ratio actually
          assigned.
        """
        pass

    def gimp_brush_set_hardness(self, brush: Gimp.Brush=None, hardness_in: float=0.0) -> float:
        """Sets the hardness of a generated brush.
        
        Sets the hardness for a generated brush. Clamps hardness to [0.0, 1.0].
        Returns the clamped value. Returns an error when brush is
        non-parametric or not editable.
        
        Parameters:
        
        * brush - The brush.
        
        * hardness_in (default: 0.0) - The desired brush hardness.
        
        Returns:
        
        * hardness_out (default: 0.0) - The brush hardness actually assigned.
        """
        pass

    def gimp_brush_set_radius(self, brush: Gimp.Brush=None, radius_in: float=0.0) -> float:
        """Sets the radius of a generated brush.
        
        Sets the radius for a generated brush. Clamps radius to [0.0, 32767.0].
        Returns the clamped value. Returns an error when brush is
        non-parametric or not editable.
        
        Parameters:
        
        * brush - The brush.
        
        * radius_in (default: 0.0) - The desired brush radius in pixel.
        
        Returns:
        
        * radius_out (default: 0.0) - The brush radius actually assigned.
        """
        pass

    def gimp_brush_set_shape(self, brush: Gimp.Brush=None, shape_in: Gimp.BrushGeneratedShape=Gimp.BrushGeneratedShape.CIRCLE) -> Gimp.BrushGeneratedShape:
        """Sets the shape of a generated brush.
        
        Sets the shape of a generated brush. Returns an error when brush is
        non-parametric or not editable. The choices for shape are Circle
        (GIMP_BRUSH_GENERATED_CIRCLE), Square
        (GIMP_BRUSH_GENERATED_SQUARE), and Diamond
        (GIMP_BRUSH_GENERATED_DIAMOND).
        
        Parameters:
        
        * brush - The brush.
        
        * shape_in (default: Gimp.BrushGeneratedShape.CIRCLE) - The brush
          shape.
        
        Returns:
        
        * shape_out (default: Gimp.BrushGeneratedShape.CIRCLE) - The brush
          shape actually assigned.
        """
        pass

    def gimp_brush_set_spacing(self, brush: Gimp.Brush=None, spacing: int=0):
        """Sets the brush spacing.
        
        Set the spacing for the brush. The spacing must be an integer between 0
        and 1000. Both parametric and raster brushes have a spacing.
        Returns an error when the brush is not editable. Create a new or
        copied brush or to get an editable brush.
        
        Parameters:
        
        * brush - The brush.
        
        * spacing (default: 0) - The brush spacing.
        """
        pass

    def gimp_brush_set_spikes(self, brush: Gimp.Brush=None, spikes_in: int=0) -> int:
        """Sets the number of spikes for a generated brush.
        
        Sets the number of spikes for a generated brush. Clamps spikes to
        [2,20]. Returns the clamped value. Returns an error when brush
        is non-parametric or not editable.
        
        Parameters:
        
        * brush - The brush.
        
        * spikes_in (default: 0) - The desired number of spikes.
        
        Returns:
        
        * spikes_out (default: 0) - The number of spikes actually assigned.
        """
        pass

    def gimp_brushes_close_popup(self, brush_callback: str=None):
        """Close the brush selection dialog.
        
        Closes an open brush selection dialog.
        
        Parameters:
        
        * brush_callback - The name of the callback registered for this
          pop-up.
        """
        pass

    def gimp_brushes_get_list(self, filter: str=None) -> Any:
        """Retrieve a complete listing of the available brushes.
        
        This procedure returns a complete listing of available GIMP brushes.
        Each brush returned can be used as input to
        [func@Gimp.context_set_brush].
        
        Parameters:
        
        * filter - An optional regular expression used to filter the list.
        
        Returns:
        
        * brush_list - The list of brushes.
        """
        pass

    def gimp_brushes_popup(self, brush_callback: str=None, popup_title: str=None, initial_brush: Gimp.Brush=None, parent_window: GLib.Bytes=None):
        """Invokes the GIMP brush selection dialog.
        
        Opens a dialog letting a user choose a brush.
        
        Parameters:
        
        * brush_callback - The callback PDB proc to call when user chooses a
          brush.
        
        * popup_title - Title of the brush selection dialog.
        
        * initial_brush - The brush to set as the initial choice.
        
        * parent_window - An optional parent window handle for the popup to be
          set transient to.
        """
        pass

    def gimp_brushes_refresh(self):
        """Refresh current brushes. This function always succeeds.
        
        This procedure retrieves all brushes currently in the user's brush path
        and updates the brush dialogs accordingly.
        """
        pass

    def gimp_brushes_set_popup(self, brush_callback: str=None, brush: Gimp.Brush=None):
        """Sets the selected brush in a brush selection dialog.
        
        Sets the selected brush in a brush selection dialog.
        
        Parameters:
        
        * brush_callback - The name of the callback registered for this
          pop-up.
        
        * brush - The brush to set as selected.
        """
        pass

    def gimp_buffer_delete(self, buffer_name: str=None):
        """Deletes a named buffer.
        
        This procedure deletes a named buffer.
        
        Parameters:
        
        * buffer_name - The buffer name.
        """
        pass

    def gimp_buffer_get_bytes(self, buffer_name: str=None) -> int:
        """Retrieves the specified buffer's bytes.
        
        This procedure retrieves the specified named buffer's bytes.
        
        Parameters:
        
        * buffer_name - The buffer name.
        
        Returns:
        
        * bytes (default: 0) - The buffer bpp.
        """
        pass

    def gimp_buffer_get_height(self, buffer_name: str=None) -> int:
        """Retrieves the specified buffer's height.
        
        This procedure retrieves the specified named buffer's height.
        
        Parameters:
        
        * buffer_name - The buffer name.
        
        Returns:
        
        * height (default: 0) - The buffer height.
        """
        pass

    def gimp_buffer_get_image_type(self, buffer_name: str=None) -> Gimp.ImageType:
        """Retrieves the specified buffer's image type.
        
        This procedure retrieves the specified named buffer's image type.
        
        Parameters:
        
        * buffer_name - The buffer name.
        
        Returns:
        
        * image_type (default: Gimp.ImageType.RGB_IMAGE) - The buffer image
          type.
        """
        pass

    def gimp_buffer_get_width(self, buffer_name: str=None) -> int:
        """Retrieves the specified buffer's width.
        
        This procedure retrieves the specified named buffer's width.
        
        Parameters:
        
        * buffer_name - The buffer name.
        
        Returns:
        
        * width (default: 0) - The buffer width.
        """
        pass

    def gimp_buffer_rename(self, buffer_name: str=None, new_name: str=None) -> str:
        """Renames a named buffer.
        
        This procedure renames a named buffer.
        
        Parameters:
        
        * buffer_name - The buffer name.
        
        * new_name - The buffer's new name.
        
        Returns:
        
        * real_name - The real name given to the buffer.
        """
        pass

    def gimp_buffers_get_name_list(self, filter: str=None) -> List[str]:
        """Retrieve a complete listing of the available buffers.
        
        This procedure returns a complete listing of available named buffers.
        
        Parameters:
        
        * filter - An optional regular expression used to filter the list.
        
        Returns:
        
        * buffer_list - The list of buffer names.
        """
        pass

    def gimp_channel_combine_masks(self, channel1: Gimp.Channel=None, channel2: Gimp.Channel=None, operation: Gimp.ChannelOps=Gimp.ChannelOps.ADD, offx: int=0, offy: int=0):
        """Combine two channel masks.
        
        This procedure combines two channel masks. The result is stored in the
        first channel.
        
        Parameters:
        
        * channel1 - The channel1.
        
        * channel2 - The channel2.
        
        * operation (default: Gimp.ChannelOps.ADD) - The selection operation.
        
        * offx (default: 0) - x offset between upper left corner of channels:
          (second - first).
        
        * offy (default: 0) - y offset between upper left corner of channels:
          (second - first).
        """
        pass

    def gimp_channel_copy(self, channel: Gimp.Channel=None) -> Gimp.Channel:
        """Copy a channel.
        
        This procedure copies the specified channel and returns the copy. The
        new channel still needs to be added to the image, as this is not
        automatic. Add the new channel with 'gimp-image-insert-channel'.
        
        Parameters:
        
        * channel - The channel to copy.
        
        Returns:
        
        * channel_copy - The newly copied channel.
        """
        pass

    def gimp_channel_get_color(self, channel: Gimp.Channel=None) -> Gegl.Color:
        """Get the compositing color of the specified channel.
        
        This procedure returns the specified channel's compositing color.
        
        Parameters:
        
        * channel - The channel.
        
        Returns:
        
        * color - The channel compositing color.
        """
        pass

    def gimp_channel_get_opacity(self, channel: Gimp.Channel=None) -> float:
        """Get the opacity of the specified channel.
        
        This procedure returns the specified channel's opacity.
        
        Parameters:
        
        * channel - The channel.
        
        Returns:
        
        * opacity (default: 0.0) - The channel opacity.
        """
        pass

    def gimp_channel_get_show_masked(self, channel: Gimp.Channel=None) -> bool:
        """Get the composite method of the specified channel.
        
        This procedure returns the specified channel's composite method. If it
        is TRUE, then the channel is composited with the image so that
        masked regions are shown. Otherwise, selected regions are shown.
        
        Parameters:
        
        * channel - The channel.
        
        Returns:
        
        * show_masked (default: False) - The channel composite method.
        """
        pass

    def gimp_channel_new(self, image: Gimp.Image=None, name: str=None, width: int=1, height: int=1, opacity: float=0.0, color: Gegl.Color=None) -> Gimp.Channel:
        """Create a new channel.
        
        This procedure creates a new channel with the specified @width, @height,
        @name, @opacity and @color.
        
        Other attributes, such as channel visibility, should be set with
        explicit procedure calls.
        
        The new channel still needs to be added to the image, as this is not
        automatic. Add the new channel with
        [method@Gimp.Image.insert_channel].
        
        The channel's contents are undefined initially.
        
        Parameters:
        
        * image - The image to which to add the channel.
        
        * name - The channel name.
        
        * width (default: 1) - The channel width.
        
        * height (default: 1) - The channel height.
        
        * opacity (default: 0.0) - The channel opacity.
        
        * color - The channel compositing color.
        
        Returns:
        
        * channel - The newly created channel.
        """
        pass

    def gimp_channel_new_from_component(self, image: Gimp.Image=None, component: Gimp.ChannelType=Gimp.ChannelType.RED, name: str=None) -> Gimp.Channel:
        """Create a new channel from a color component.
        
        This procedure creates a new channel from a color component. The new
        channel still needs to be added to the image, as this is not
        automatic. Add the new channel with 'gimp-image-insert-channel'.
        Other attributes, such as channel visibility, should be set with
        explicit procedure calls.
        
        Parameters:
        
        * image - The image to which to add the channel.
        
        * component (default: Gimp.ChannelType.RED) - The image component.
        
        * name - The channel name.
        
        Returns:
        
        * channel - The newly created channel.
        """
        pass

    def gimp_channel_set_color(self, channel: Gimp.Channel=None, color: Gegl.Color=None):
        """Set the compositing color of the specified channel.
        
        This procedure sets the specified channel's compositing color.
        
        Parameters:
        
        * channel - The channel.
        
        * color - The new channel compositing color.
        """
        pass

    def gimp_channel_set_opacity(self, channel: Gimp.Channel=None, opacity: float=0.0):
        """Set the opacity of the specified channel.
        
        This procedure sets the specified channel's opacity.
        
        Parameters:
        
        * channel - The channel.
        
        * opacity (default: 0.0) - The new channel opacity.
        """
        pass

    def gimp_channel_set_show_masked(self, channel: Gimp.Channel=None, show_masked: bool=False):
        """Set the composite method of the specified channel.
        
        This procedure sets the specified channel's composite method. If it is
        TRUE, then the channel is composited with the image so that
        masked regions are shown. Otherwise, selected regions are shown.
        
        Parameters:
        
        * channel - The channel.
        
        * show_masked (default: False) - The new channel composite method.
        """
        pass

    def gimp_clone(self, drawable: Gimp.Drawable=None, src_drawable: Gimp.Drawable=None, clone_type: Gimp.CloneType=Gimp.CloneType.IMAGE, src_x: float=0.0, src_y: float=0.0, strokes: Gimp.DoubleArray=None):
        """Clone from the source to the dest drawable using the current brush.
        
        This tool clones (copies) from the source drawable starting at the
        specified source coordinates to the dest drawable. If the
        "clone_type" argument is set to PATTERN-CLONE, then the current
        pattern is used as the source and the "src_drawable" argument is
        ignored. Pattern cloning assumes a tileable pattern and mods the
        sum of the src coordinates and subsequent stroke offsets with
        the width and height of the pattern. For image cloning, if the
        sum of the src coordinates and subsequent stroke offsets exceeds
        the extents of the src drawable, then no paint is transferred.
        The clone tool is capable of transforming between any image
        types including RGB->Indexed--although converting from any type
        to indexed is significantly slower.
        
        Parameters:
        
        * drawable - The affected drawable.
        
        * src_drawable - The source drawable.
        
        * clone_type (default: Gimp.CloneType.IMAGE) - The type of clone.
        
        * src_x (default: 0.0) - The x coordinate in the source image.
        
        * src_y (default: 0.0) - The y coordinate in the source image.
        
        * strokes - Array of stroke coordinates: { s1.x, s1.y, s2.x, s2.y,
          ..., sn.x, sn.y }.
        """
        pass

    def gimp_clone_default(self, drawable: Gimp.Drawable=None, strokes: Gimp.DoubleArray=None):
        """Clone from the source to the dest drawable using the current brush.
        
        This tool clones (copies) from the source drawable starting at the
        specified source coordinates to the dest drawable. This function
        performs exactly the same as the 'gimp-clone' function except
        that the tools arguments are obtained from the clones option
        dialog. It this dialog has not been activated then the dialogs
        default values will be used.
        
        Parameters:
        
        * drawable - The affected drawable.
        
        * strokes - Array of stroke coordinates: { s1.x, s1.y, s2.x, s2.y,
          ..., sn.x, sn.y }.
        """
        pass

    def gimp_context_are_dynamics_enabled(self) -> bool:
        """Whether the currently active paint dynamics will be applied to
        painting.
        
        Returns whether the currently active paint dynamics (as returned by
        'gimp-context-get-dynamics') is enabled.
        
        Returns:
        
        * enabled (default: False) - Whether dynamics enabled or disabled.
        """
        pass

    def gimp_context_enable_dynamics(self, enable: bool=False):
        """Enables paint dynamics using the active paint dynamics.
        
        Enables the active paint dynamics to be used in all subsequent paint
        operations.
        
        Parameters:
        
        * enable (default: False) - Whether to enable or disable dynamics.
        """
        pass

    def gimp_context_get_antialias(self) -> bool:
        """Get the antialias setting.
        
        Returns the antialias setting.
        
        Returns:
        
        * antialias (default: False) - The antialias setting.
        """
        pass

    def gimp_context_get_background(self) -> Gegl.Color:
        """Get the current GIMP background color.
        
        Returns the current GIMP background color. The background color is used
        in a variety of tools such as blending, erasing (with non-alpha
        images), and image filling.
        
        Returns:
        
        * background - The background color.
        """
        pass

    def gimp_context_get_brush(self) -> Gimp.Brush:
        """Get the currently active brush.
        
        Returns the currently active brush. All paint and stroke operations use
        this brush.
        
        Returns:
        
        * brush - The active brush.
        """
        pass

    def gimp_context_get_brush_angle(self) -> float:
        """Get brush angle in degrees.
        
        Set the angle in degrees for brush based paint tools.
        
        Returns:
        
        * angle (default: -180.0) - Angle in degrees.
        """
        pass

    def gimp_context_get_brush_aspect_ratio(self) -> float:
        """Get brush aspect ratio.
        
        Set the aspect ratio for brush based paint tools.
        
        Returns:
        
        * aspect (default: -20.0) - Aspect ratio.
        """
        pass

    def gimp_context_get_brush_force(self) -> float:
        """Get brush force in paint options.
        
        Get the brush application force for brush based paint tools.
        
        Returns:
        
        * force (default: 0.0) - Brush application force.
        """
        pass

    def gimp_context_get_brush_hardness(self) -> float:
        """Get brush hardness in paint options.
        
        Get the brush hardness for brush based paint tools.
        
        Returns:
        
        * hardness (default: 0.0) - Brush hardness.
        """
        pass

    def gimp_context_get_brush_size(self) -> float:
        """Get brush size in pixels.
        
        Get the brush size in pixels for brush based paint tools.
        
        Returns:
        
        * size (default: 0.0) - Brush size in pixels.
        """
        pass

    def gimp_context_get_brush_spacing(self) -> float:
        """Get brush spacing as percent of size.
        
        Get the brush spacing as percent of size for brush based paint tools.
        
        Returns:
        
        * spacing (default: 0.01) - Brush spacing as fraction of size.
        """
        pass

    def gimp_context_get_diagonal_neighbors(self) -> bool:
        """Get the diagonal neighbors setting.
        
        Returns the diagonal neighbors setting.
        
        Returns:
        
        * diagonal_neighbors (default: False) - The diagonal neighbors
          setting.
        """
        pass

    def gimp_context_get_distance_metric(self) -> Gegl.DistanceMetric:
        """Get the distance metric used in some computations.
        
        Returns the distance metric in the current context. See
        'gimp-context-set-distance-metric' to know more about its usage.
        
        Returns:
        
        * metric (default: Gegl.DistanceMetric.EUCLIDEAN) - The distance
          metric.
        """
        pass

    def gimp_context_get_dynamics_name(self) -> str:
        """Get the currently active paint dynamics.
        
        Returns the name of the currently active paint dynamics. If enabled, all
        paint operations and stroke operations use this paint dynamics
        to control the application of paint to the image. If disabled,
        the dynamics will be ignored during paint actions. See
        'gimp-context-are-dynamics-enabled' to enquire whether dynamics
        are used or ignored.
        
        Returns:
        
        * name - The name of the active paint dynamics.
        """
        pass

    def gimp_context_get_emulate_brush_dynamics(self) -> bool:
        """Retrieve the currently active stroke option's emulate brush dynamics
        setting.
        
        This procedure returns the emulate brush dynamics property of the
        currently active stroke options.
        
        Returns:
        
        * emulate_dynamics (default: False) - The emulate brush dynamics
          setting.
        """
        pass

    def gimp_context_get_feather(self) -> bool:
        """Get the feather setting.
        
        Returns the feather setting.
        
        Returns:
        
        * feather (default: False) - The feather setting.
        """
        pass

    def gimp_context_get_feather_radius(self) -> Tuple[float, float]:
        """Get the feather radius setting.
        
        Returns the feather radius setting.
        
        Returns:
        
        * feather_radius_x (default: 0.0) - The horizontal feather radius.
        
        * feather_radius_y (default: 0.0) - The vertical feather radius.
        """
        pass

    def gimp_context_get_font(self) -> Gimp.Font:
        """Get the currently active font.
        
        Returns the currently active font.
        
        Returns:
        
        * font - The active font.
        """
        pass

    def gimp_context_get_foreground(self) -> Gegl.Color:
        """Get the current GIMP foreground color.
        
        Returns the current GIMP foreground color. The foreground color is used
        in a variety of tools such as paint tools, blending, and bucket
        fill.
        
        Returns:
        
        * foreground - The foreground color.
        """
        pass

    def gimp_context_get_gradient(self) -> Gimp.Gradient:
        """Get the currently active gradient.
        
        Returns the currently active gradient.
        
        Returns:
        
        * gradient - The active gradient.
        """
        pass

    def gimp_context_get_gradient_blend_color_space(self) -> Gimp.GradientBlendColorSpace:
        """Get the gradient blend color space.
        
        Get the gradient blend color space for paint tools and the gradient
        tool.
        
        Returns:
        
        * blend_color_space (default:
          Gimp.GradientBlendColorSpace.RGB_PERCEPTUAL) - Color blend
          space.
        """
        pass

    def gimp_context_get_gradient_repeat_mode(self) -> Gimp.RepeatMode:
        """Get the gradient repeat mode.
        
        Get the gradient repeat mode for paint tools and the gradient tool.
        
        Returns:
        
        * repeat_mode (default: Gimp.RepeatMode.NONE) - Repeat mode.
        """
        pass

    def gimp_context_get_gradient_reverse(self) -> bool:
        """Get the gradient reverse setting.
        
        Get the gradient reverse setting for paint tools and the gradient tool.
        
        Returns:
        
        * reverse (default: False) - Reverse.
        """
        pass

    def gimp_context_get_ink_angle(self) -> float:
        """Get ink angle in degrees.
        
        Get the ink angle in degrees for ink tool.
        
        Returns:
        
        * angle (default: -90.0) - ink angle in degrees.
        """
        pass

    def gimp_context_get_ink_blob_angle(self) -> float:
        """Get ink blob angle in degrees.
        
        Get the ink blob angle in degrees for ink tool.
        
        Returns:
        
        * angle (default: -180.0) - ink blob angle in degrees.
        """
        pass

    def gimp_context_get_ink_blob_aspect_ratio(self) -> float:
        """Get ink blob aspect ratio.
        
        Get the ink blob aspect ratio for ink tool.
        
        Returns:
        
        * aspect (default: 1.0) - ink blob aspect ratio.
        """
        pass

    def gimp_context_get_ink_blob_type(self) -> Gimp.InkBlobType:
        """Get ink blob type.
        
        Get the ink blob type for ink tool.
        
        Returns:
        
        * type (default: Gimp.InkBlobType.CIRCLE) - Ink blob type.
        """
        pass

    def gimp_context_get_ink_size(self) -> float:
        """Get ink blob size in pixels.
        
        Get the ink blob size in pixels for ink tool.
        
        Returns:
        
        * size (default: 0.0) - ink blob size in pixels.
        """
        pass

    def gimp_context_get_ink_size_sensitivity(self) -> float:
        """Get ink size sensitivity.
        
        Get the ink size sensitivity for ink tool.
        
        Returns:
        
        * size (default: 0.0) - ink size sensitivity.
        """
        pass

    def gimp_context_get_ink_speed_sensitivity(self) -> float:
        """Get ink speed sensitivity.
        
        Get the ink speed sensitivity for ink tool.
        
        Returns:
        
        * speed (default: 0.0) - ink speed sensitivity.
        """
        pass

    def gimp_context_get_ink_tilt_sensitivity(self) -> float:
        """Get ink tilt sensitivity.
        
        Get the ink tilt sensitivity for ink tool.
        
        Returns:
        
        * tilt (default: 0.0) - ink tilt sensitivity.
        """
        pass

    def gimp_context_get_interpolation(self) -> Gimp.InterpolationType:
        """Get the interpolation type.
        
        Returns the interpolation setting. The return value is an integer which
        corresponds to the values listed in the argument description. If
        the interpolation has not been set explicitly by
        'gimp-context-set-interpolation', the default interpolation set
        in gimprc will be used.
        
        Returns:
        
        * interpolation (default: Gimp.InterpolationType.NONE) - The
          interpolation type.
        """
        pass

    def gimp_context_get_line_cap_style(self) -> Gimp.CapStyle:
        """Get the line cap style setting.
        
        Returns the line cap style setting.
        
        Returns:
        
        * cap_style (default: Gimp.CapStyle.BUTT) - The line cap style
          setting.
        """
        pass

    def gimp_context_get_line_dash_offset(self) -> float:
        """Get the line dash offset setting.
        
        Returns the line dash offset setting.
        
        Returns:
        
        * dash_offset (default: 0.0) - The line dash offset setting.
        """
        pass

    def gimp_context_get_line_dash_pattern(self) -> Gimp.DoubleArray:
        """Get the line dash pattern setting.
        
        Returns the line dash pattern setting.
        
        Returns:
        
        * dashes - The line dash pattern setting.
        """
        pass

    def gimp_context_get_line_join_style(self) -> Gimp.JoinStyle:
        """Get the line join style setting.
        
        Returns the line join style setting.
        
        Returns:
        
        * join_style (default: Gimp.JoinStyle.MITER) - The line join style
          setting.
        """
        pass

    def gimp_context_get_line_miter_limit(self) -> float:
        """Get the line miter limit setting.
        
        Returns the line miter limit setting.
        
        Returns:
        
        * miter_limit (default: 0.0) - The line miter limit setting.
        """
        pass

    def gimp_context_get_line_width(self) -> float:
        """Get the line width setting.
        
        Returns the line width setting.
        
        Returns:
        
        * line_width (default: 0.0) - The line width setting.
        """
        pass

    def gimp_context_get_line_width_unit(self) -> Gimp.Unit:
        """Get the line width unit setting.
        
        Returns the line width unit setting.
        
        Returns:
        
        * line_width_unit - The line width unit setting.
        """
        pass

    def gimp_context_get_mypaint_brush(self) -> str:
        """Get the currently active MyPaint brush.
        
        Returns the name of the currently active MyPaint brush.
        
        Returns:
        
        * name - The name of the active MyPaint brush.
        """
        pass

    def gimp_context_get_opacity(self) -> float:
        """Get the opacity.
        
        Returns the opacity setting. The return value is a floating point number
        between 0 and 100.
        
        Returns:
        
        * opacity (default: 0.0) - The opacity.
        """
        pass

    def gimp_context_get_paint_method(self) -> str:
        """Get the currently active paint method.
        
        Returns the name of the currently active paint method.
        
        Returns:
        
        * name - The name of the active paint method.
        """
        pass

    def gimp_context_get_paint_mode(self) -> Gimp.LayerMode:
        """Get the paint mode.
        
        Returns the paint-mode setting. The return value is an integer which
        corresponds to the values listed in the argument description.
        
        Returns:
        
        * paint_mode (default: Gimp.LayerMode.NORMAL) - The paint mode.
        """
        pass

    def gimp_context_get_palette(self) -> Gimp.Palette:
        """Get the currently active palette.
        
        Returns the currently active palette.
        
        Returns:
        
        * palette - The active palette.
        """
        pass

    def gimp_context_get_pattern(self) -> Gimp.Pattern:
        """Get the currently active pattern.
        
        Returns the active pattern in the current context. All clone and
        bucket-fill operations with patterns will use this pattern to
        control the application of paint to the image.
        
        Returns:
        
        * pattern - The active pattern.
        """
        pass

    def gimp_context_get_resource(self, type_name: str=None) -> Gimp.Resource:
        """Get the currently active resource for a type.
        
        Returns the currently active resource for the given type name.
        
        Parameters:
        
        * type_name - The name of the resource type.
        
        Returns:
        
        * resource - The active resource.
        """
        pass

    def gimp_context_get_sample_criterion(self) -> Gimp.SelectCriterion:
        """Get the sample criterion setting.
        
        Returns the sample criterion setting.
        
        Returns:
        
        * sample_criterion (default: Gimp.SelectCriterion.COMPOSITE) - The
          sample criterion setting.
        """
        pass

    def gimp_context_get_sample_merged(self) -> bool:
        """Get the sample merged setting.
        
        Returns the sample merged setting.
        
        Returns:
        
        * sample_merged (default: False) - The sample merged setting.
        """
        pass

    def gimp_context_get_sample_threshold(self) -> float:
        """Get the sample threshold setting.
        
        Returns the sample threshold setting.
        
        Returns:
        
        * sample_threshold (default: 0.0) - The sample threshold setting.
        """
        pass

    def gimp_context_get_sample_threshold_int(self) -> int:
        """Get the sample threshold setting as an integer value.
        
        Returns the sample threshold setting as an integer value. See
        'gimp-context-get-sample-threshold'.
        
        Returns:
        
        * sample_threshold (default: 0) - The sample threshold setting.
        """
        pass

    def gimp_context_get_sample_transparent(self) -> bool:
        """Get the sample transparent setting.
        
        Returns the sample transparent setting.
        
        Returns:
        
        * sample_transparent (default: False) - The sample transparent
          setting.
        """
        pass

    def gimp_context_get_stroke_method(self) -> Gimp.StrokeMethod:
        """Get the currently active stroke method.
        
        Returns the currently active stroke method.
        
        Returns:
        
        * stroke_method (default: Gimp.StrokeMethod.LINE) - The active stroke
          method.
        """
        pass

    def gimp_context_get_transform_direction(self) -> Gimp.TransformDirection:
        """Get the transform direction.
        
        Returns the transform direction. The return value is an integer which
        corresponds to the values listed in the argument description.
        
        Returns:
        
        * transform_direction (default: Gimp.TransformDirection.FORWARD) - The
          transform direction.
        """
        pass

    def gimp_context_get_transform_resize(self) -> Gimp.TransformResize:
        """Get the transform resize type.
        
        Returns the transform resize setting. The return value is an integer
        which corresponds to the values listed in the argument
        description.
        
        Returns:
        
        * transform_resize (default: Gimp.TransformResize.ADJUST) - The
          transform resize type.
        """
        pass

    def gimp_context_list_paint_methods(self) -> List[str]:
        """Lists the available paint methods.
        
        Lists the names of the available paint methods. Any of the names can be
        used for 'gimp-context-set-paint-method'.
        
        Returns:
        
        * paint_methods - The names of the available paint methods.
        """
        pass

    def gimp_context_pop(self):
        """Pops the topmost context from the plug-in's context stack.
        
        Removes the topmost context from the plug-in's context stack. The next
        context on the stack becomes the new current context of the
        plug-in, that is, the context that was active before the
        corresponding call to 'gimp-context-push'.
        """
        pass

    def gimp_context_push(self):
        """Pushes a context onto the top of the plug-in's context stack.
        
        Creates a new context by copying the current context. The copy becomes
        the new current context for the calling plug-in until it is
        popped again using 'gimp-context-pop'.
        """
        pass

    def gimp_context_set_antialias(self, antialias: bool=False):
        """Set the antialias setting.
        
        Modifies the antialias setting. If antialiasing is turned on, the edges
        of selected region will contain intermediate values which give
        the appearance of a sharper, less pixelized edge. This should be
        set as TRUE most of the time unless a binary-only selection is
        wanted.
        
        This setting affects the following procedures:
        'gimp-image-select-color', 'gimp-image-select-contiguous-color',
        'gimp-image-select-round-rectangle',
        'gimp-image-select-ellipse', 'gimp-image-select-polygon',
        'gimp-image-select-item', 'gimp-drawable-edit-bucket-fill',
        'gimp-drawable-edit-stroke-item',
        'gimp-drawable-edit-stroke-selection'.
        
        Parameters:
        
        * antialias (default: False) - The antialias setting.
        """
        pass

    def gimp_context_set_background(self, background: Gegl.Color=None):
        """Set the current GIMP background color.
        
        Sets the current GIMP background color. After this is set, operations
        which use background such as blending, filling images, clearing,
        and erasing (in non-alpha images) will use the new value.
        
        Parameters:
        
        * background - The background color.
        """
        pass

    def gimp_context_set_brush(self, brush: Gimp.Brush=None):
        """Set the active brush.
        
        Sets the active brush in the current context. The brush will be used in
        subsequent paint and stroke operations. Returns an error when
        the brush data was uninstalled since the brush object was
        created.
        
        Parameters:
        
        * brush - The brush.
        """
        pass

    def gimp_context_set_brush_angle(self, angle: float=-180.0):
        """Set brush angle in degrees.
        
        Set the angle in degrees for brush based paint tools.
        
        Parameters:
        
        * angle (default: -180.0) - Angle in degrees.
        """
        pass

    def gimp_context_set_brush_aspect_ratio(self, aspect: float=-20.0):
        """Set brush aspect ratio.
        
        Set the aspect ratio for brush based paint tools.
        
        Parameters:
        
        * aspect (default: -20.0) - Aspect ratio.
        """
        pass

    def gimp_context_set_brush_default_hardness(self):
        """Set brush spacing to its default.
        
        Set the brush spacing to the default for paintbrush, airbrush, or pencil
        tools.
        """
        pass

    def gimp_context_set_brush_default_size(self):
        """Set brush size to its default.
        
        Set the brush size to the default (max of width and height) for
        paintbrush, airbrush, or pencil tools.
        """
        pass

    def gimp_context_set_brush_default_spacing(self):
        """Set brush spacing to its default.
        
        Set the brush spacing to the default for paintbrush, airbrush, or pencil
        tools.
        """
        pass

    def gimp_context_set_brush_force(self, force: float=0.0):
        """Set brush application force.
        
        Set the brush application force for brush based paint tools.
        
        Parameters:
        
        * force (default: 0.0) - Brush application force.
        """
        pass

    def gimp_context_set_brush_hardness(self, hardness: float=0.0):
        """Set brush hardness.
        
        Set the brush hardness for brush based paint tools.
        
        Parameters:
        
        * hardness (default: 0.0) - Brush hardness.
        """
        pass

    def gimp_context_set_brush_size(self, size: float=1.0):
        """Set brush size in pixels.
        
        Set the brush size in pixels for brush based paint tools.
        
        Parameters:
        
        * size (default: 1.0) - Brush size in pixels.
        """
        pass

    def gimp_context_set_brush_spacing(self, spacing: float=0.01):
        """Set brush spacing as percent of size.
        
        Set the brush spacing as percent of size for brush based paint tools.
        
        Parameters:
        
        * spacing (default: 0.01) - Brush spacing as fraction of size.
        """
        pass

    def gimp_context_set_default_colors(self):
        """Set the current GIMP foreground and background colors to black and
        white.
        
        Sets the current GIMP foreground and background colors to their initial
        default values, black and white.
        """
        pass

    def gimp_context_set_defaults(self):
        """Reset context settings to their default values.
        
        Resets context settings used by various procedures to their default
        value. You should usually call this after a context push so that
        a script which calls procedures affected by context settings
        will not be affected by changes in the global context.
        """
        pass

    def gimp_context_set_diagonal_neighbors(self, diagonal_neighbors: bool=False):
        """Set the diagonal neighbors setting.
        
        Modifies the diagonal neighbors setting. If the affected region of an
        operation is based on a seed point, like when doing a seed fill,
        then, when this setting is TRUE, all eight neighbors of each
        pixel are considered when calculating the affected region; in
        contrast, when this setting is FALSE, only the four orthogonal
        neighbors of each pixel are considered.
        
        This setting affects the following procedures:
        'gimp-image-select-contiguous-color',
        'gimp-drawable-edit-bucket-fill'.
        
        Parameters:
        
        * diagonal_neighbors (default: False) - The diagonal neighbors
          setting.
        """
        pass

    def gimp_context_set_distance_metric(self, metric: Gegl.DistanceMetric=Gegl.DistanceMetric.EUCLIDEAN):
        """Set the distance metric used in some computations.
        
        Modifies the distance metric used in some computations, such as
        'gimp-drawable-edit-gradient-fill'. In particular, it does not
        change the metric used in generic distance computation on
        canvas, as in the Measure tool.
        
        This setting affects the following procedures:
        'gimp-drawable-edit-gradient-fill'.
        
        Parameters:
        
        * metric (default: Gegl.DistanceMetric.EUCLIDEAN) - The distance
          metric.
        """
        pass

    def gimp_context_set_dynamics_name(self, name: str=None):
        """Set the active paint dynamics.
        
        Sets the active paint dynamics. The paint dynamics will be used in all
        subsequent paint operations when dynamics are enabled. The name
        should be a name of an installed paint dynamics. Returns an
        error if no matching paint dynamics is found.
        
        Parameters:
        
        * name - A name of a paint dynamics.
        """
        pass

    def gimp_context_set_emulate_brush_dynamics(self, emulate_dynamics: bool=False):
        """Set the stroke option's emulate brush dynamics setting.
        
        This procedure sets the specified emulate brush dynamics setting. The
        new method will be used in all subsequent stroke operations.
        
        Parameters:
        
        * emulate_dynamics (default: False) - The new emulate brush dynamics
          setting.
        """
        pass

    def gimp_context_set_feather(self, feather: bool=False):
        """Set the feather setting.
        
        Modifies the feather setting. If the feather option is enabled,
        selections will be blurred before combining. The blur is a
        gaussian blur; its radii can be controlled using
        'gimp-context-set-feather-radius'.
        
        This setting affects the following procedures:
        'gimp-image-select-color', 'gimp-image-select-contiguous-color',
        'gimp-image-select-rectangle',
        'gimp-image-select-round-rectangle',
        'gimp-image-select-ellipse', 'gimp-image-select-polygon',
        'gimp-image-select-item'.
        
        Parameters:
        
        * feather (default: False) - The feather setting.
        """
        pass

    def gimp_context_set_feather_radius(self, feather_radius_x: float=0.0, feather_radius_y: float=0.0):
        """Set the feather radius setting.
        
        Modifies the feather radius setting.
        
        This setting affects all procedures that are affected by
        'gimp-context-set-feather'.
        
        Parameters:
        
        * feather_radius_x (default: 0.0) - The horizontal feather radius.
        
        * feather_radius_y (default: 0.0) - The vertical feather radius.
        """
        pass

    def gimp_context_set_font(self, font: Gimp.Font=None):
        """Set the active font.
        
        Sets the active font in the current context. The font will be used in
        subsequent text operations. Returns an error when the font data
        was uninstalled since the font object was created.
        
        Parameters:
        
        * font - The font.
        """
        pass

    def gimp_context_set_foreground(self, foreground: Gegl.Color=None):
        """Set the current GIMP foreground color.
        
        Sets the current GIMP foreground color. After this is set, operations
        which use foreground such as paint tools, blending, and bucket
        fill will use the new value.
        
        Parameters:
        
        * foreground - The foreground color.
        """
        pass

    def gimp_context_set_gradient(self, gradient: Gimp.Gradient=None):
        """Sets the active gradient.
        
        Sets the active gradient in the current context. The gradient will be
        used in subsequent gradient operations. Returns an error when
        the gradient data was uninstalled since the gradient object was
        created.
        
        Parameters:
        
        * gradient - The gradient.
        """
        pass

    def gimp_context_set_gradient_blend_color_space(self, blend_color_space: Gimp.GradientBlendColorSpace=Gimp.GradientBlendColorSpace.RGB_PERCEPTUAL):
        """Set the gradient blend color space.
        
        Set the gradient blend color space for paint tools and the gradient
        tool.
        
        Parameters:
        
        * blend_color_space (default:
          Gimp.GradientBlendColorSpace.RGB_PERCEPTUAL) - Blend color
          space.
        """
        pass

    def gimp_context_set_gradient_fg_bg_hsv_ccw(self):
        """Sets the built-in FG-BG HSV (ccw) gradient as the active gradient.
        
        Sets the built-in FG-BG HSV (ccw) gradient as the active gradient. The
        gradient will be used for subsequent gradient operations.
        """
        pass

    def gimp_context_set_gradient_fg_bg_hsv_cw(self):
        """Sets the built-in FG-BG HSV (cw) gradient as the active gradient.
        
        Sets the built-in FG-BG HSV (cw) gradient as the active gradient. The
        gradient will be used for subsequent gradient operations.
        """
        pass

    def gimp_context_set_gradient_fg_bg_rgb(self):
        """Sets the built-in FG-BG RGB gradient as the active gradient.
        
        Sets the built-in FG-BG RGB gradient as the active gradient. The
        gradient will be used for subsequent gradient operations.
        """
        pass

    def gimp_context_set_gradient_fg_transparent(self):
        """Sets the built-in FG-Transparent gradient as the active gradient.
        
        Sets the built-in FG-Transparent gradient as the active gradient. The
        gradient will be used for subsequent gradient operations.
        """
        pass

    def gimp_context_set_gradient_repeat_mode(self, repeat_mode: Gimp.RepeatMode=Gimp.RepeatMode.NONE):
        """Set the gradient repeat mode.
        
        Set the gradient repeat mode for paint tools and the gradient tool.
        
        Parameters:
        
        * repeat_mode (default: Gimp.RepeatMode.NONE) - Repeat mode.
        """
        pass

    def gimp_context_set_gradient_reverse(self, reverse: bool=False):
        """Set the gradient reverse setting.
        
        Set the gradient reverse setting for paint tools and the gradient tool.
        
        Parameters:
        
        * reverse (default: False) - Reverse.
        """
        pass

    def gimp_context_set_ink_angle(self, angle: float=-90.0):
        """Set ink angle in degrees.
        
        Set the ink angle in degrees for ink tool.
        
        Parameters:
        
        * angle (default: -90.0) - ink angle in degrees.
        """
        pass

    def gimp_context_set_ink_blob_angle(self, angle: float=-180.0):
        """Set ink blob angle in degrees.
        
        Set the ink blob angle in degrees for ink tool.
        
        Parameters:
        
        * angle (default: -180.0) - ink blob angle in degrees.
        """
        pass

    def gimp_context_set_ink_blob_aspect_ratio(self, aspect: float=1.0):
        """Set ink blob aspect ratio.
        
        Set the ink blob aspect ratio for ink tool.
        
        Parameters:
        
        * aspect (default: 1.0) - ink blob aspect ratio.
        """
        pass

    def gimp_context_set_ink_blob_type(self, type: Gimp.InkBlobType=Gimp.InkBlobType.CIRCLE):
        """Set ink blob type.
        
        Set the ink blob type for ink tool.
        
        Parameters:
        
        * type (default: Gimp.InkBlobType.CIRCLE) - Ink blob type.
        """
        pass

    def gimp_context_set_ink_size(self, size: float=0.0):
        """Set ink blob size in pixels.
        
        Set the ink blob size in pixels for ink tool.
        
        Parameters:
        
        * size (default: 0.0) - ink blob size in pixels.
        """
        pass

    def gimp_context_set_ink_size_sensitivity(self, size: float=0.0):
        """Set ink size sensitivity.
        
        Set the ink size sensitivity for ink tool.
        
        Parameters:
        
        * size (default: 0.0) - ink size sensitivity.
        """
        pass

    def gimp_context_set_ink_speed_sensitivity(self, speed: float=0.0):
        """Set ink speed sensitivity.
        
        Set the ink speed sensitivity for ink tool.
        
        Parameters:
        
        * speed (default: 0.0) - ink speed sensitivity.
        """
        pass

    def gimp_context_set_ink_tilt_sensitivity(self, tilt: float=0.0):
        """Set ink tilt sensitivity.
        
        Set the ink tilt sensitivity for ink tool.
        
        Parameters:
        
        * tilt (default: 0.0) - ink tilt sensitivity.
        """
        pass

    def gimp_context_set_interpolation(self, interpolation: Gimp.InterpolationType=Gimp.InterpolationType.NONE):
        """Set the interpolation type.
        
        Modifies the interpolation setting.
        
        This setting affects affects the following procedures:
        'gimp-item-transform-flip', 'gimp-item-transform-perspective',
        'gimp-item-transform-rotate', 'gimp-item-transform-scale',
        'gimp-item-transform-shear', 'gimp-item-transform-2d',
        'gimp-item-transform-matrix', 'gimp-image-scale',
        'gimp-layer-scale'.
        
        Parameters:
        
        * interpolation (default: Gimp.InterpolationType.NONE) - The
          interpolation type.
        """
        pass

    def gimp_context_set_line_cap_style(self, cap_style: Gimp.CapStyle=Gimp.CapStyle.BUTT):
        """Set the line cap style setting.
        
        Modifies the line cap style setting for stroking lines.
        
        This setting affects the following procedures:
        'gimp-drawable-edit-stroke-selection',
        'gimp-drawable-edit-stroke-item'.
        
        Parameters:
        
        * cap_style (default: Gimp.CapStyle.BUTT) - The line cap style
          setting.
        """
        pass

    def gimp_context_set_line_dash_offset(self, dash_offset: float=0.0):
        """Set the line dash offset setting.
        
        Modifies the line dash offset setting for stroking lines.
        
        This setting affects the following procedures:
        'gimp-drawable-edit-stroke-selection',
        'gimp-drawable-edit-stroke-item'.
        
        Parameters:
        
        * dash_offset (default: 0.0) - The line dash offset setting.
        """
        pass

    def gimp_context_set_line_dash_pattern(self, dashes: Gimp.DoubleArray=None):
        """Set the line dash pattern setting.
        
        Modifies the line dash pattern setting for stroking lines.
        
        The unit of the dash pattern segments is the actual line width used for
        the stroke operation, in other words a segment length of 1.0
        results in a square segment shape (or gap shape).
        
        This setting affects the following procedures:
        'gimp-drawable-edit-stroke-selection',
        'gimp-drawable-edit-stroke-item'.
        
        Parameters:
        
        * dashes - The line dash pattern setting.
        """
        pass

    def gimp_context_set_line_join_style(self, join_style: Gimp.JoinStyle=Gimp.JoinStyle.MITER):
        """Set the line join style setting.
        
        Modifies the line join style setting for stroking lines. This setting
        affects the following procedures:
        'gimp-drawable-edit-stroke-selection',
        'gimp-drawable-edit-stroke-item'.
        
        Parameters:
        
        * join_style (default: Gimp.JoinStyle.MITER) - The line join style
          setting.
        """
        pass

    def gimp_context_set_line_miter_limit(self, miter_limit: float=0.0):
        """Set the line miter limit setting.
        
        Modifies the line miter limit setting for stroking lines. A mitered join
        is converted to a bevelled join if the miter would extend to a
        distance of more than (miter-limit * line-width) from the actual
        join point. This setting affects the following procedures:
        'gimp-drawable-edit-stroke-selection',
        'gimp-drawable-edit-stroke-item'.
        
        Parameters:
        
        * miter_limit (default: 0.0) - The line miter limit setting.
        """
        pass

    def gimp_context_set_line_width(self, line_width: float=0.0):
        """Set the line width setting.
        
        Modifies the line width setting for stroking lines.
        
        This setting affects the following procedures:
        'gimp-drawable-edit-stroke-selection',
        'gimp-drawable-edit-stroke-item'.
        
        Parameters:
        
        * line_width (default: 0.0) - The line width setting.
        """
        pass

    def gimp_context_set_line_width_unit(self, line_width_unit: Gimp.Unit=None):
        """Set the line width unit setting.
        
        Modifies the line width unit setting for stroking lines.
        
        This setting affects the following procedures:
        'gimp-drawable-edit-stroke-selection',
        'gimp-drawable-edit-stroke-item'.
        
        Parameters:
        
        * line_width_unit - The line width setting unit.
        """
        pass

    def gimp_context_set_mypaint_brush(self, name: str=None):
        """Set a MyPaint brush as the active MyPaint brush.
        
        Sets the active MyPaint brush to the named MyPaint brush. The brush will
        be used in all subsequent MyPaint paint operations. The name
        should be a name of an installed MyPaint brush. Returns an error
        if no matching MyPaint brush is found.
        
        Parameters:
        
        * name - A name of a MyPaint brush.
        """
        pass

    def gimp_context_set_opacity(self, opacity: float=0.0):
        """Set the opacity.
        
        Modifies the opacity setting. The value should be a floating point
        number between 0 and 100.
        
        Parameters:
        
        * opacity (default: 0.0) - The opacity.
        """
        pass

    def gimp_context_set_paint_method(self, name: str=None):
        """Set the active paint method.
        
        Sets the active paint method to the named paint method. The paint method
        will be used in all subsequent paint operations. The name should
        be a name of an available paint method. Returns an error if no
        matching paint method is found.
        
        Parameters:
        
        * name - The name of the paint method.
        """
        pass

    def gimp_context_set_paint_mode(self, paint_mode: Gimp.LayerMode=Gimp.LayerMode.NORMAL):
        """Set the paint mode.
        
        Modifies the paint_mode setting.
        
        Parameters:
        
        * paint_mode (default: Gimp.LayerMode.NORMAL) - The paint mode.
        """
        pass

    def gimp_context_set_palette(self, palette: Gimp.Palette=None):
        """Set the active palette.
        
        Sets the active palette in the current context. The palette will be used
        in subsequent paint operations. Returns an error when the
        palette data was uninstalled since the palette object was
        created.
        
        Parameters:
        
        * palette - The palette.
        """
        pass

    def gimp_context_set_pattern(self, pattern: Gimp.Pattern=None):
        """Set the active pattern.
        
        Sets the active pattern in the current context. The pattern will be used
        in subsequent fill operations using a pattern. Returns an error
        when the pattern data was uninstalled since the pattern object
        was created.
        
        Parameters:
        
        * pattern - The pattern.
        """
        pass

    def gimp_context_set_sample_criterion(self, sample_criterion: Gimp.SelectCriterion=Gimp.SelectCriterion.COMPOSITE):
        """Set the sample criterion setting.
        
        Modifies the sample criterion setting. If an operation depends on the
        colors of the pixels present in a drawable, like when doing a
        seed fill, this setting controls how color similarity is
        determined. SELECT_CRITERION_COMPOSITE is the default value.
        
        This setting affects the following procedures:
        'gimp-image-select-color', 'gimp-image-select-contiguous-color',
        'gimp-drawable-edit-bucket-fill'.
        
        Parameters:
        
        * sample_criterion (default: Gimp.SelectCriterion.COMPOSITE) - The
          sample criterion setting.
        """
        pass

    def gimp_context_set_sample_merged(self, sample_merged: bool=False):
        """Set the sample merged setting.
        
        Modifies the sample merged setting. If an operation depends on the
        colors of the pixels present in a drawable, like when doing a
        seed fill, this setting controls whether the pixel data from the
        given drawable is used ('sample-merged' is FALSE), or the pixel
        data from the composite image ('sample-merged' is TRUE. This is
        equivalent to sampling for colors after merging all visible
        layers).
        
        This setting affects the following procedures:
        'gimp-image-select-color', 'gimp-image-select-contiguous-color',
        'gimp-drawable-edit-bucket-fill'.
        
        Parameters:
        
        * sample_merged (default: False) - The sample merged setting.
        """
        pass

    def gimp_context_set_sample_threshold(self, sample_threshold: float=0.0):
        """Set the sample threshold setting.
        
        Modifies the sample threshold setting. If an operation depends on the
        colors of the pixels present in a drawable, like when doing a
        seed fill, this setting controls what is "sufficiently close" to
        be considered a similar color. If the sample threshold has not
        been set explicitly, the default threshold set in gimprc will be
        used.
        
        This setting affects the following procedures:
        'gimp-image-select-color', 'gimp-image-select-contiguous-color',
        'gimp-drawable-edit-bucket-fill'.
        
        Parameters:
        
        * sample_threshold (default: 0.0) - The sample threshold setting.
        """
        pass

    def gimp_context_set_sample_threshold_int(self, sample_threshold: int=0):
        """Set the sample threshold setting as an integer value.
        
        Modifies the sample threshold setting as an integer value. See
        'gimp-context-set-sample-threshold'.
        
        Parameters:
        
        * sample_threshold (default: 0) - The sample threshold setting.
        """
        pass

    def gimp_context_set_sample_transparent(self, sample_transparent: bool=False):
        """Set the sample transparent setting.
        
        Modifies the sample transparent setting. If an operation depends on the
        colors of the pixels present in a drawable, like when doing a
        seed fill, this setting controls whether transparency is
        considered to be a unique selectable color. When this setting is
        TRUE, transparent areas can be selected or filled.
        
        This setting affects the following procedures:
        'gimp-image-select-color', 'gimp-image-select-contiguous-color',
        'gimp-drawable-edit-bucket-fill'.
        
        Parameters:
        
        * sample_transparent (default: False) - The sample transparent
          setting.
        """
        pass

    def gimp_context_set_stroke_method(self, stroke_method: Gimp.StrokeMethod=Gimp.StrokeMethod.LINE):
        """Set the active stroke method.
        
        Sets the active stroke method. The method will be used in all subsequent
        stroke operations.
        
        Parameters:
        
        * stroke_method (default: Gimp.StrokeMethod.LINE) - The new stroke
          method.
        """
        pass

    def gimp_context_set_transform_direction(self, transform_direction: Gimp.TransformDirection=Gimp.TransformDirection.FORWARD):
        """Set the transform direction.
        
        Modifies the transform direction setting.
        
        This setting affects affects the following procedures:
        'gimp-item-transform-flip', 'gimp-item-transform-perspective',
        'gimp-item-transform-rotate', 'gimp-item-transform-scale',
        'gimp-item-transform-shear', 'gimp-item-transform-2d',
        'gimp-item-transform-matrix'.
        
        Parameters:
        
        * transform_direction (default: Gimp.TransformDirection.FORWARD) - The
          transform direction.
        """
        pass

    def gimp_context_set_transform_resize(self, transform_resize: Gimp.TransformResize=Gimp.TransformResize.ADJUST):
        """Set the transform resize type.
        
        Modifies the transform resize setting. When transforming pixels, if the
        result of a transform operation has a different size than the
        original area, this setting determines how the resulting area is
        sized.
        
        This setting affects affects the following procedures:
        'gimp-item-transform-flip', 'gimp-item-transform-flip-simple',
        'gimp-item-transform-perspective', 'gimp-item-transform-rotate',
        'gimp-item-transform-rotate-simple',
        'gimp-item-transform-scale', 'gimp-item-transform-shear',
        'gimp-item-transform-2d', 'gimp-item-transform-matrix'.
        
        Parameters:
        
        * transform_resize (default: Gimp.TransformResize.ADJUST) - The
          transform resize type.
        """
        pass

    def gimp_context_swap_colors(self):
        """Swap the current GIMP foreground and background colors.
        
        Swaps the current GIMP foreground and background colors, so that the new
        foreground color becomes the old background color and vice
        versa.
        """
        pass

    def gimp_convolve(self, drawable: Gimp.Drawable=None, pressure: float=0.0, convolve_type: Gimp.ConvolveType=Gimp.ConvolveType.BLUR, strokes: Gimp.DoubleArray=None):
        """Convolve (Blur, Sharpen) using the current brush.
        
        This tool convolves the specified drawable with either a sharpening or
        blurring kernel. The pressure parameter controls the magnitude
        of the operation. Like the paintbrush, this tool linearly
        interpolates between the specified stroke coordinates.
        
        Parameters:
        
        * drawable - The affected drawable.
        
        * pressure (default: 0.0) - The pressure.
        
        * convolve_type (default: Gimp.ConvolveType.BLUR) - Convolve type.
        
        * strokes - Array of stroke coordinates: { s1.x, s1.y, s2.x, s2.y,
          ..., sn.x, sn.y }.
        """
        pass

    def gimp_convolve_default(self, drawable: Gimp.Drawable=None, strokes: Gimp.DoubleArray=None):
        """Convolve (Blur, Sharpen) using the current brush.
        
        This tool convolves the specified drawable with either a sharpening or
        blurring kernel. This function performs exactly the same as the
        'gimp-convolve' function except that the tools arguments are
        obtained from the convolve option dialog. It this dialog has not
        been activated then the dialogs default values will be used.
        
        Parameters:
        
        * drawable - The affected drawable.
        
        * strokes - Array of stroke coordinates: { s1.x, s1.y, s2.x, s2.y,
          ..., sn.x, sn.y }.
        """
        pass

    def gimp_debug_timer_end(self) -> float:
        """Finishes measuring elapsed time.
        
        This procedure stops the timer started by a previous
        'gimp-debug-timer-start' call, and prints and returns the
        elapsed time. If there was already an active timer at the time
        of corresponding call to 'gimp-debug-timer-start', a dummy value
        is returned.
        
        This is a debug utility procedure. It is subject to change at any point,
        and should not be used in production.
        
        Returns:
        
        * elapsed (default: 0.0) - The elapsed time, in seconds.
        """
        pass

    def gimp_debug_timer_start(self):
        """Starts measuring elapsed time.
        
        This procedure starts a timer, measuring the elapsed time since the
        call. Each call to this procedure should be matched by a call to
        'gimp-debug-timer-end', which returns the elapsed time. If there
        is already an active timer, it is not affected by the call,
        however, a matching 'gimp-debug-timer-end' call is still
        required.
        
        This is a debug utility procedure. It is subject to change at any point,
        and should not be used in production.
        """
        pass

    def gimp_detach_parasite(self, name: str=None):
        """Removes a global parasite.
        
        This procedure detaches a global parasite from. It has no return values.
        
        Parameters:
        
        * name - The name of the parasite to detach.
        """
        pass

    def gimp_display_delete(self, display: Gimp.Display=None):
        """Delete the specified display.
        
        This procedure removes the specified display. If this is the last
        remaining display for the underlying image, then the image is
        deleted also. Note that the display is closed no matter if the
        image is dirty or not. Better save the image before calling this
        procedure.
        
        Parameters:
        
        * display - The display to delete.
        """
        pass

    def gimp_display_get_window_handle(self, display: Gimp.Display=None) -> GLib.Bytes:
        """Get a handle to the native window for an image display.
        
        This procedure returns a handle to the native window for a given image
        display. It can be different types of data depending on the
        platform you are running on. For example in the X backend of
        GDK, a native window handle is an Xlib XID whereas on Wayland,
        it is a string handle. A value of NULL is returned for an
        invalid display or if this function is unimplemented for the
        windowing system that is being used.
        
        Parameters:
        
        * display - The display to get the window handle from.
        
        Returns:
        
        * handle - The native window handle or NULL.
        """
        pass

    def gimp_display_id_is_valid(self, display_id: int=0) -> bool:
        """Returns TRUE if the display ID is valid.
        
        This procedure checks if the given display ID is valid and refers to an
        existing display.
        
        *Note*: in most use cases, you should not use this function. If you got
        a [class@Gimp.Display] from the API, you should trust it is
        valid. This function is mostly for internal usage.
        
        Parameters:
        
        * display_id (default: 0) - The display ID to check.
        
        Returns:
        
        * valid (default: False) - Whether the display ID is valid.
        """
        pass

    def gimp_display_new(self, image: Gimp.Image=None) -> Gimp.Display:
        """Create a new display for the specified image.
        
        Creates a new display for the specified image. If the image already has
        a display, another is added. Multiple displays are handled
        transparently by GIMP. The newly created display is returned and
        can be subsequently destroyed with a call to
        'gimp-display-delete'. This procedure only makes sense for use
        with the GIMP UI, and will result in an execution error if
        called when GIMP has no UI.
        
        Parameters:
        
        * image - The image.
        
        Returns:
        
        * display - The new display.
        """
        pass

    def gimp_display_present(self, display: Gimp.Display=None):
        """Present the specified display.
        
        This procedure presents the specified display at the top of the display
        stack.
        
        Parameters:
        
        * display - The display to present.
        """
        pass

    def gimp_displays_flush(self):
        """Flush all internal changes to the user interface.
        
        This procedure takes no arguments and returns nothing except a success
        status. Its purpose is to flush all pending updates of image
        manipulations to the user interface. It should be called
        whenever appropriate.
        """
        pass

    def gimp_displays_reconnect(self, old_image: Gimp.Image=None, new_image: Gimp.Image=None):
        """Reconnect displays from one image to another image.
        
        This procedure connects all displays of the old_image to the new_image.
        If the old_image has no display or new_image already has a
        display the reconnect is not performed and the procedure returns
        without success. You should rarely need to use this function.
        
        Parameters:
        
        * old_image - The old image (must have at least one display).
        
        * new_image - The new image (must not have a display).
        """
        pass

    def gimp_dodgeburn(self, drawable: Gimp.Drawable=None, exposure: float=0.0, dodgeburn_type: Gimp.DodgeBurnType=Gimp.DodgeBurnType.DODGE, dodgeburn_mode: Gimp.TransferMode=Gimp.TransferMode.SHADOWS, strokes: Gimp.DoubleArray=None):
        """Dodgeburn image with varying exposure.
        
        Dodgeburn. More details here later.
        
        Parameters:
        
        * drawable - The affected drawable.
        
        * exposure (default: 0.0) - The exposure of the strokes.
        
        * dodgeburn_type (default: Gimp.DodgeBurnType.DODGE) - The type either
          dodge or burn.
        
        * dodgeburn_mode (default: Gimp.TransferMode.SHADOWS) - The mode.
        
        * strokes - Array of stroke coordinates: { s1.x, s1.y, s2.x, s2.y,
          ..., sn.x, sn.y }.
        """
        pass

    def gimp_dodgeburn_default(self, drawable: Gimp.Drawable=None, strokes: Gimp.DoubleArray=None):
        """Dodgeburn image with varying exposure. This is the same as the
        gimp_dodgeburn() function except that the exposure, type and
        mode are taken from the tools option dialog. If the dialog
        has not been activated then the defaults as used by the
        dialog will be used.
        
        Dodgeburn. More details here later.
        
        Parameters:
        
        * drawable - The affected drawable.
        
        * strokes - Array of stroke coordinates: { s1.x, s1.y, s2.x, s2.y,
          ..., sn.x, sn.y }.
        """
        pass

    def gimp_drawable_append_filter_private(self, drawable: Gimp.Drawable=None, filter: Gimp.DrawableFilter=None):
        """Append the specified effect to the top of the list of drawable
        effects.
        
        This procedure adds the specified drawable effect at the top of the
        effect list of @drawable. The @drawable argument must be the
        same as the one used when you created the effect with
        [ctor@Gimp.DrawableFilter.new]. Some effects may be slower than
        others to render. In order to minimize processing time, it is
        preferred to customize the operation's arguments as received
        with [method@Gimp.DrawableFilter.get_config] then sync them to
        the application with [method@Gimp.DrawableFilter.update] before
        adding the effect. This function is private and should not be
        used. Use [method@Gimp.Drawable.append_filter] instead.
        
        Parameters:
        
        * drawable - The drawable.
        
        * filter - The drawable filter to append.
        """
        pass

    def gimp_drawable_brightness_contrast(self, drawable: Gimp.Drawable=None, brightness: float=-1.0, contrast: float=-1.0):
        """Modify brightness/contrast in the specified drawable.
        
        This procedures allows the brightness and contrast of the specified
        drawable to be modified. Both 'brightness' and 'contrast'
        parameters are defined between -1.0 and 1.0.
        
        Parameters:
        
        * drawable - The drawable.
        
        * brightness (default: -1.0) - Brightness adjustment.
        
        * contrast (default: -1.0) - Contrast adjustment.
        """
        pass

    def gimp_drawable_color_balance(self, drawable: Gimp.Drawable=None, transfer_mode: Gimp.TransferMode=Gimp.TransferMode.SHADOWS, preserve_lum: bool=False, cyan_red: float=-100.0, magenta_green: float=-100.0, yellow_blue: float=-100.0):
        """Modify the color balance of the specified drawable.
        
        Modify the color balance of the specified drawable. There are three axis
        which can be modified: cyan-red, magenta-green, and yellow-blue.
        Negative values increase the amount of the former, positive
        values increase the amount of the latter. Color balance can be
        controlled with the 'transfer_mode' setting, which allows
        shadows, mid-tones, and highlights in an image to be affected
        differently. The 'preserve-lum' parameter, if TRUE, ensures that
        the luminosity of each pixel remains fixed.
        
        Parameters:
        
        * drawable - The drawable.
        
        * transfer_mode (default: Gimp.TransferMode.SHADOWS) - Transfer mode.
        
        * preserve_lum (default: False) - Preserve luminosity values at each
          pixel.
        
        * cyan_red (default: -100.0) - Cyan-Red color balance.
        
        * magenta_green (default: -100.0) - Magenta-Green color balance.
        
        * yellow_blue (default: -100.0) - Yellow-Blue color balance.
        """
        pass

    def gimp_drawable_colorize_hsl(self, drawable: Gimp.Drawable=None, hue: float=0.0, saturation: float=0.0, lightness: float=-100.0):
        """Render the drawable as a grayscale image seen through a colored
        glass.
        
        Desaturates the drawable, then tints it with the specified color. This
        tool is only valid on RGB color images. It will not operate on
        grayscale drawables.
        
        Parameters:
        
        * drawable - The drawable.
        
        * hue (default: 0.0) - Hue in degrees.
        
        * saturation (default: 0.0) - Saturation in percent.
        
        * lightness (default: -100.0) - Lightness in percent.
        """
        pass

    def gimp_drawable_curves_explicit(self, drawable: Gimp.Drawable=None, channel: Gimp.HistogramChannel=Gimp.HistogramChannel.VALUE, values: Gimp.DoubleArray=None):
        """Modifies the intensity curve(s) for specified drawable.
        
        Modifies the intensity mapping for one channel in the specified
        drawable. The channel can be either an intensity component, or
        the value. The 'values' parameter is an array of doubles which
        explicitly defines how each pixel value in the drawable will be
        modified. Use the 'gimp-drawable-curves-spline' function to
        modify intensity levels with Catmull Rom splines.
        
        Parameters:
        
        * drawable - The drawable.
        
        * channel (default: Gimp.HistogramChannel.VALUE) - The channel to
          modify.
        
        * values - The explicit curve.
        """
        pass

    def gimp_drawable_curves_spline(self, drawable: Gimp.Drawable=None, channel: Gimp.HistogramChannel=Gimp.HistogramChannel.VALUE, points: Gimp.DoubleArray=None):
        """Modifies the intensity curve(s) for specified drawable.
        
        Modifies the intensity mapping for one channel in the specified
        drawable. The channel can be either an intensity component, or
        the value. The 'points' parameter is an array of doubles which
        define a set of control points which describe a Catmull Rom
        spline which yields the final intensity curve. Use the
        'gimp-drawable-curves-explicit' function to explicitly modify
        intensity levels.
        
        Parameters:
        
        * drawable - The drawable.
        
        * channel (default: Gimp.HistogramChannel.VALUE) - The channel to
          modify.
        
        * points - The spline control points: { cp1.x, cp1.y, cp2.x, cp2.y,
          ... }.
        """
        pass

    def gimp_drawable_desaturate(self, drawable: Gimp.Drawable=None, desaturate_mode: Gimp.DesaturateMode=Gimp.DesaturateMode.LIGHTNESS):
        """Desaturate the contents of the specified drawable, with the specified
        formula.
        
        This procedure desaturates the contents of the specified drawable, with
        the specified formula. This procedure only works on drawables of
        type RGB color.
        
        Parameters:
        
        * drawable - The drawable.
        
        * desaturate_mode (default: Gimp.DesaturateMode.LIGHTNESS) - The
          formula to use to desaturate.
        """
        pass

    def gimp_drawable_edit_bucket_fill(self, drawable: Gimp.Drawable=None, fill_type: Gimp.FillType=Gimp.FillType.FOREGROUND, x: float=0.0, y: float=0.0):
        """Fill the area by a seed fill starting at the specified coordinates.
        
        This procedure does a seed fill at the specified coordinates, using
        various parameters from the current context. In the case of
        merged sampling, the x and y coordinates are relative to the
        image's origin; otherwise, they are relative to the drawable's
        origin.
        
        This procedure is affected by the following context setters:
        'gimp-context-set-opacity', 'gimp-context-set-paint-mode',
        'gimp-context-set-foreground', 'gimp-context-set-background',
        'gimp-context-set-pattern', 'gimp-context-set-sample-threshold',
        'gimp-context-set-sample-merged',
        'gimp-context-set-sample-criterion',
        'gimp-context-set-diagonal-neighbors',
        'gimp-context-set-antialias'.
        
        Parameters:
        
        * drawable - The affected drawable.
        
        * fill_type (default: Gimp.FillType.FOREGROUND) - The type of fill.
        
        * x (default: 0.0) - The x coordinate of this bucket fill's
          application.
        
        * y (default: 0.0) - The y coordinate of this bucket fill's
          application.
        """
        pass

    def gimp_drawable_edit_clear(self, drawable: Gimp.Drawable=None):
        """Clear selected area of drawable.
        
        This procedure clears the specified drawable. If the drawable has an
        alpha channel, the cleared pixels will become transparent. If
        the drawable does not have an alpha channel, cleared pixels will
        be set to the background color. This procedure only affects
        regions within a selection if there is a selection active.
        
        This procedure is affected by the following context setters:
        'gimp-context-set-background'.
        
        Parameters:
        
        * drawable - The drawable to clear from.
        """
        pass

    def gimp_drawable_edit_fill(self, drawable: Gimp.Drawable=None, fill_type: Gimp.FillType=Gimp.FillType.FOREGROUND):
        """Fill selected area of drawable.
        
        This procedure fills the specified drawable according to fill mode. This
        procedure only affects regions within a selection if there is a
        selection active. If you want to fill the whole drawable,
        regardless of the selection, use 'gimp-drawable-fill'.
        
        This procedure is affected by the following context setters:
        'gimp-context-set-opacity', 'gimp-context-set-paint-mode',
        'gimp-context-set-foreground', 'gimp-context-set-background',
        'gimp-context-set-pattern'.
        
        Parameters:
        
        * drawable - The drawable to fill to.
        
        * fill_type (default: Gimp.FillType.FOREGROUND) - The type of fill.
        """
        pass

    def gimp_drawable_edit_gradient_fill(self, drawable: Gimp.Drawable=None, gradient_type: Gimp.GradientType=Gimp.GradientType.LINEAR, offset: float=0.0, supersample: bool=False, supersample_max_depth: int=1, supersample_threshold: float=0.0, dither: bool=False, x1: float=0.0, y1: float=0.0, x2: float=0.0, y2: float=0.0):
        """Draw a gradient between the starting and ending coordinates with the
        specified gradient type.
        
        This tool requires information on the gradient type. It creates the
        specified variety of gradient using the starting and ending
        coordinates as defined for each gradient type. For shapeburst
        gradient types, the context's distance metric is also relevant
        and can be updated with 'gimp-context-set-distance-metric'.
        
        This procedure is affected by the following context setters:
        'gimp-context-set-opacity', 'gimp-context-set-paint-mode',
        'gimp-context-set-foreground', 'gimp-context-set-background',
        'gimp-context-set-gradient' and all gradient property settings,
        'gimp-context-set-distance-metric'.
        
        Parameters:
        
        * drawable - The affected drawable.
        
        * gradient_type (default: Gimp.GradientType.LINEAR) - The type of
          gradient.
        
        * offset (default: 0.0) - Offset relates to the starting and ending
          coordinates specified for the blend. This parameter is mode
          dependent.
        
        * supersample (default: False) - Do adaptive supersampling.
        
        * supersample_max_depth (default: 1) - Maximum recursion levels for
          supersampling.
        
        * supersample_threshold (default: 0.0) - Supersampling threshold.
        
        * dither (default: False) - Use dithering to reduce banding.
        
        * x1 (default: 0.0) - The x coordinate of this gradient's starting
          point.
        
        * y1 (default: 0.0) - The y coordinate of this gradient's starting
          point.
        
        * x2 (default: 0.0) - The x coordinate of this gradient's ending
          point.
        
        * y2 (default: 0.0) - The y coordinate of this gradient's ending
          point.
        """
        pass

    def gimp_drawable_edit_stroke_item(self, drawable: Gimp.Drawable=None, item: Gimp.Item=None):
        """Stroke the specified item.
        
        This procedure strokes the specified item, painting along its outline
        (e.g. along a path, or along a channel's boundary), with the
        active paint method and brush, or using a plain line with
        configurable properties.
        
        This procedure is affected by the following context setters:
        'gimp-context-set-opacity', 'gimp-context-set-paint-mode',
        'gimp-context-set-paint-method',
        'gimp-context-set-stroke-method', 'gimp-context-set-foreground',
        'gimp-context-set-brush' and all brush property settings,
        'gimp-context-set-gradient' and all gradient property settings,
        'gimp-context-set-line-width' and all line property settings,
        'gimp-context-set-antialias'.
        
        Parameters:
        
        * drawable - The drawable to stroke to.
        
        * item - The item to stroke.
        """
        pass

    def gimp_drawable_edit_stroke_selection(self, drawable: Gimp.Drawable=None):
        """Stroke the current selection.
        
        This procedure strokes the current selection, painting along the
        selection boundary with the active paint method and brush, or
        using a plain line with configurable properties. The paint is
        applied to the specified drawable regardless of the active
        selection.
        
        This procedure is affected by the following context setters:
        'gimp-context-set-opacity', 'gimp-context-set-paint-mode',
        'gimp-context-set-paint-method',
        'gimp-context-set-stroke-method', 'gimp-context-set-foreground',
        'gimp-context-set-brush' and all brush property settings,
        'gimp-context-set-gradient' and all gradient property settings,
        'gimp-context-set-line-width' and all line property settings,
        'gimp-context-set-antialias'.
        
        Parameters:
        
        * drawable - The drawable to stroke to.
        """
        pass

    def gimp_drawable_equalize(self, drawable: Gimp.Drawable=None, mask_only: bool=False):
        """Equalize the contents of the specified drawable.
        
        This procedure equalizes the contents of the specified drawable. Each
        intensity channel is equalized independently. The equalized
        intensity is given as inten' = (255 - inten). The 'mask_only'
        option specifies whether to adjust only the area of the image
        within the selection bounds, or the entire image based on the
        histogram of the selected area. If there is no selection, the
        entire image is adjusted based on the histogram for the entire
        image.
        
        Parameters:
        
        * drawable - The drawable.
        
        * mask_only (default: False) - Equalization option.
        """
        pass

    def gimp_drawable_extract_component(self, drawable: Gimp.Drawable=None, component: int=0, invert: bool=False, linear: bool=False):
        """Extract a color model component.
        
        Extract a color model component.
        
        Parameters:
        
        * drawable - The drawable.
        
        * component (default: 0) - Component (RGB Red (0), RGB Green (1), RGB
          Blue (2), Hue (3), HSV Saturation (4), HSV Value (5), HSL
          Saturation (6), HSL Lightness (7), CMYK Cyan (8), CMYK
          Magenta (9), CMYK Yellow (10), CMYK Key (11), Y'CbCr Y'
          (12), Y'CbCr Cb (13), Y'CbCr Cr (14), LAB L (15), LAB A
          (16), LAB B (17), LCH C(ab) (18), LCH H(ab) (19), Alpha
          (20)).
        
        * invert (default: False) - Invert the extracted component.
        
        * linear (default: False) - Use linear output instead of gamma
          corrected.
        """
        pass

    def gimp_drawable_fill(self, drawable: Gimp.Drawable=None, fill_type: Gimp.FillType=Gimp.FillType.FOREGROUND):
        """Fill the drawable with the specified fill mode.
        
        This procedure fills the drawable. If the fill mode is foreground the
        current foreground color is used. If the fill mode is
        background, the current background color is used. If the fill
        type is white, then white is used. Transparent fill only affects
        layers with an alpha channel, in which case the alpha channel is
        set to transparent. If the drawable has no alpha channel, it is
        filled to white. No fill leaves the drawable's contents
        undefined. This procedure is unlike 'gimp-drawable-edit-fill' or
        the bucket fill tool because it fills regardless of a selection.
        Its main purpose is to fill a newly created drawable before
        adding it to the image. This operation cannot be undone.
        
        Parameters:
        
        * drawable - The drawable.
        
        * fill_type (default: Gimp.FillType.FOREGROUND) - The type of fill.
        """
        pass

    def gimp_drawable_filter_delete(self, filter: Gimp.DrawableFilter=None):
        """Delete a drawable filter.
        
        This procedure deletes the specified filter. This must not be done if
        the drawable whose this filter was applied to was already
        deleted or if the drawable was already removed from the image.
        Do not use anymore the @filter object after having deleted it.
        
        Parameters:
        
        * filter - The filter to delete.
        """
        pass

    def gimp_drawable_filter_get_arguments(self, filter: Gimp.DrawableFilter=None) -> List[str]:
        """Returns the currently set filter arguments.
        
        This procedure returns the filter's arguments.
        
        Parameters:
        
        * filter - The filter.
        
        Returns:
        
        * argnames - The names of the arguments.
        """
        pass

    def gimp_drawable_filter_get_blend_mode(self, filter: Gimp.DrawableFilter=None) -> Gimp.LayerMode:
        """Get the blending mode of the specified filter.
        
        This procedure returns the specified filter's mode.
        
        Parameters:
        
        * filter - The filter.
        
        Returns:
        
        * mode (default: Gimp.LayerMode.NORMAL_LEGACY) - The effect blending
          mode.
        """
        pass

    def gimp_drawable_filter_get_name(self, filter: Gimp.DrawableFilter=None) -> str:
        """Get a drawable filter's name.
        
        This procedure returns the specified filter's name. Since it is not
        possible to set a drawable filter's name yet, this will be the
        operation's name. Eventually this filter's name will be a free
        form field so do not rely on this information for any
        processing.
        
        Parameters:
        
        * filter - The filter whose name you want.
        
        Returns:
        
        * name - The filter's name.
        """
        pass

    def gimp_drawable_filter_get_number_arguments(self, operation_name: str=None) -> int:
        """Queries for the number of arguments on the specified filter.
        
        This procedure returns the number of arguments on the specified filter.
        For specific information on each input argument, use
        'gimp-drawable-filter-get-argument'.
        
        Parameters:
        
        * operation_name - The procedure name.
        
        Returns:
        
        * num_args (default: 0) - The number of input arguments.
        """
        pass

    def gimp_drawable_filter_get_opacity(self, filter: Gimp.DrawableFilter=None) -> float:
        """Get the opacity of the specified filter.
        
        This procedure returns the specified filter's opacity.
        
        Parameters:
        
        * filter - The filter.
        
        Returns:
        
        * opacity (default: 0.0) - The filter's opacity.
        """
        pass

    def gimp_drawable_filter_get_operation_name(self, filter: Gimp.DrawableFilter=None) -> str:
        """Get a drawable filter's operation name.
        
        This procedure returns the specified filter's operation name.
        
        Parameters:
        
        * filter - The filter whose operation name you want.
        
        Returns:
        
        * name - The filter's operation name.
        """
        pass

    def gimp_drawable_filter_get_pspec(self, operation_name: str=None, arg_num: int=0) -> GObject.ParamSpec:
        """Queries for information on the specified filter's argument.
        
        This procedure returns the #GParamSpec of filter's argument.
        
        Parameters:
        
        * operation_name - The procedure name.
        
        * arg_num (default: 0) - The argument number.
        
        Returns:
        
        * param_spec - The GParamSpec of the argument.
        """
        pass

    def gimp_drawable_filter_get_visible(self, filter: Gimp.DrawableFilter=None) -> bool:
        """Get the visibility of the specified filter.
        
        This procedure returns the specified filter's visibility.
        
        Parameters:
        
        * filter - The filter.
        
        Returns:
        
        * visible (default: False) - The filter visibility.
        """
        pass

    def gimp_drawable_filter_id_is_valid(self, filter_id: int=0) -> bool:
        """Returns %TRUE if the drawable filter ID is valid.
        
        This procedure checks if the given drawable filter ID is valid and
        refers to an existing filter.
        
        Parameters:
        
        * filter_id (default: 0) - The filter ID to check.
        
        Returns:
        
        * valid (default: False) - Whether the filter ID is valid.
        """
        pass

    def gimp_drawable_filter_new(self, drawable: Gimp.Drawable=None, operation_name: str=None, name: str=None) -> Gimp.DrawableFilter:
        """Create a new drawable filter.
        
        This procedure creates a new filter for the specified operation on
        @drawable. The new effect still needs to be either added or
        merged to @drawable later. Add the effect non-destructively with
        [method@Gimp.Drawable.append_filter]. Currently only layers can
        have non-destructive effects. The effects must be merged for all
        other types of drawable.
        
        Parameters:
        
        * drawable - The drawable.
        
        * operation_name - The GEGL operation's name.
        
        * name - The effect name.
        
        Returns:
        
        * filter - The newly created filter.
        """
        pass

    def gimp_drawable_filter_set_visible(self, filter: Gimp.DrawableFilter=None, visible: bool=False):
        """Set the visibility of the specified filter.
        
        This procedure sets the specified filter's visibility. The drawable
        won't be immediately rendered. Use [method@Gimp.Drawable.update]
        to trigger an update.
        
        Parameters:
        
        * filter - The filter.
        
        * visible (default: False) - The new filter visibility.
        """
        pass

    def gimp_drawable_filter_update(self, filter: Gimp.DrawableFilter=None, propnames: List[str]=None, opacity: float=0.0, blend_mode: Gimp.LayerMode=Gimp.LayerMode.NORMAL, blend_space: Gimp.LayerColorSpace=Gimp.LayerColorSpace.AUTO, composite_mode: Gimp.LayerCompositeMode=Gimp.LayerCompositeMode.AUTO, composite_space: Gimp.LayerColorSpace=Gimp.LayerColorSpace.AUTO, auxinputnames: List[str]=None, auxinputs: GObject.Value=None):
        """Update the settings of the specified filter.
        
        This procedure updates the settings of the specified filter all at once.
        In particular, update will be frozen and will happen only once
        for all changed settings. This PDB function is internal, meant
        to be private and its arguments will likely change as filters
        evolve. It should not be used.
        
        Parameters:
        
        * filter - The filter.
        
        * propnames - Array of property names.
        
        * opacity (default: 0.0) - The filter's opacity.
        
        * blend_mode (default: Gimp.LayerMode.NORMAL) - The effect blending
          mode.
        
        * blend_space (default: Gimp.LayerColorSpace.AUTO) - The effect
          blending space.
        
        * composite_mode (default: Gimp.LayerCompositeMode.AUTO) - The layer
          composite mode.
        
        * composite_space (default: Gimp.LayerColorSpace.AUTO) - The effect
          composite space.
        
        * auxinputnames - Array of aux input pads.
        
        * auxinputs - Array of drawables, one per auxinputnames.
        """
        pass

    def gimp_drawable_foreground_extract(self, drawable: Gimp.Drawable=None, mode: Gimp.ForegroundExtractMode=Gimp.ForegroundExtractMode.MATTING, mask: Gimp.Drawable=None):
        """Extract the foreground of a drawable using a given trimap.
        
        Image Segmentation by Uniform Color Clustering, see
        https://www.inf.fu-berlin.de/inst/pubs/tr-b-05-07.pdf.
        
        Parameters:
        
        * drawable - The drawable.
        
        * mode (default: Gimp.ForegroundExtractMode.MATTING) - The algorithm
          to use.
        
        * mask - Tri-Map.
        """
        pass

    def gimp_drawable_free_shadow(self, drawable: Gimp.Drawable=None):
        """Free the specified drawable's shadow data (if it exists).
        
        This procedure is intended as a memory saving device. If any shadow
        memory has been allocated, it will be freed automatically when
        the drawable is removed from the image, or when the plug-in
        procedure which allocated it returns.
        
        Parameters:
        
        * drawable - The drawable.
        """
        pass

    def gimp_drawable_get_bpp(self, drawable: Gimp.Drawable=None) -> int:
        """Returns the bytes per pixel.
        
        This procedure returns the number of bytes per pixel.
        
        Parameters:
        
        * drawable - The drawable.
        
        Returns:
        
        * bpp (default: 0) - Bytes per pixel.
        """
        pass

    def gimp_drawable_get_filters(self, drawable: Gimp.Drawable=None) -> Any:
        """Returns the list of filters applied to the drawable.
        
        This procedure returns the list of filters which are currently applied
        non-destructively to @drawable. The order of filters is from
        topmost to bottommost.
        
        Parameters:
        
        * drawable - The drawable.
        
        Returns:
        
        * filters - The list of filters on the drawable.
        """
        pass

    def gimp_drawable_get_format(self, drawable: Gimp.Drawable=None) -> str:
        """Returns the drawable's Babl format.
        
        This procedure returns the drawable's Babl format. Note that the actual
        PDB procedure only transfers the format's encoding. In order to
        get to the real format, the libbgimp C wrapper must be used.
        
        Parameters:
        
        * drawable - The drawable.
        
        Returns:
        
        * format - The drawable's Babl format.
        """
        pass

    def gimp_drawable_get_height(self, drawable: Gimp.Drawable=None) -> int:
        """Returns the height of the drawable.
        
        This procedure returns the specified drawable's height in pixels.
        
        Parameters:
        
        * drawable - The drawable.
        
        Returns:
        
        * height (default: 0) - Height of drawable.
        """
        pass

    def gimp_drawable_get_offsets(self, drawable: Gimp.Drawable=None) -> Tuple[int, int]:
        """Returns the offsets for the drawable.
        
        This procedure returns the specified drawable's offsets. This only makes
        sense if the drawable is a layer since channels are anchored.
        The offsets of a channel will be returned as 0.
        
        Parameters:
        
        * drawable - The drawable.
        
        Returns:
        
        * offset_x (default: 0) - x offset of drawable.
        
        * offset_y (default: 0) - y offset of drawable.
        """
        pass

    def gimp_drawable_get_pixel(self, drawable: Gimp.Drawable=None, x_coord: int=0, y_coord: int=0) -> Gegl.Color:
        """Gets the value of the pixel at the specified coordinates.
        
        This procedure gets the pixel value at the specified coordinates.
        
        Parameters:
        
        * drawable - The drawable.
        
        * x_coord (default: 0) - The x coordinate.
        
        * y_coord (default: 0) - The y coordinate.
        
        Returns:
        
        * color - The pixel color.
        """
        pass

    def gimp_drawable_get_thumbnail_format(self, drawable: Gimp.Drawable=None) -> str:
        """Returns the drawable's thumbnail Babl format.
        
        This procedure returns the drawable's thumbnail Babl format. Thumbnails
        are always 8-bit images, see 'gimp-drawable-thumbnail' and
        'gimp-drawable-sub-thmbnail'.
        
        Parameters:
        
        * drawable - The drawable.
        
        Returns:
        
        * format - The drawable's thumbnail Babl format.
        """
        pass

    def gimp_drawable_get_width(self, drawable: Gimp.Drawable=None) -> int:
        """Returns the width of the drawable.
        
        This procedure returns the specified drawable's width in pixels.
        
        Parameters:
        
        * drawable - The drawable.
        
        Returns:
        
        * width (default: 0) - Width of drawable.
        """
        pass

    def gimp_drawable_has_alpha(self, drawable: Gimp.Drawable=None) -> bool:
        """Returns TRUE if the drawable has an alpha channel.
        
        This procedure returns whether the specified drawable has an alpha
        channel. This can only be true for layers, and the associated
        type will be one of: { RGBA , GRAYA, INDEXEDA }.
        
        Parameters:
        
        * drawable - The drawable.
        
        Returns:
        
        * has_alpha (default: False) - Does the drawable have an alpha
          channel?.
        """
        pass

    def gimp_drawable_histogram(self, drawable: Gimp.Drawable=None, channel: Gimp.HistogramChannel=Gimp.HistogramChannel.VALUE, start_range: float=0.0, end_range: float=0.0) -> Tuple[float, float, float, float, float, float]:
        """Returns information on the intensity histogram for the specified
        drawable.
        
        This tool makes it possible to gather information about the intensity
        histogram of a drawable. A channel to examine is first
        specified. This can be either value, red, green, or blue,
        depending on whether the drawable is of type color or grayscale.
        Second, a range of intensities are specified. The
        'gimp-drawable-histogram' function returns statistics based on
        the pixels in the drawable that fall under this range of values.
        Mean, standard deviation, median, number of pixels, and
        percentile are all returned. Additionally, the total count of
        pixels in the image is returned. Counts of pixels are weighted
        by any associated alpha values and by the current selection
        mask. That is, pixels that lie outside an active selection mask
        will not be counted. Similarly, pixels with transparent alpha
        values will not be counted. The returned mean, std_dev and
        median are in the range (0..255) for 8-bit images or if the
        plug-in is not precision-aware, and in the range (0.0..1.0)
        otherwise.
        
        Parameters:
        
        * drawable - The drawable.
        
        * channel (default: Gimp.HistogramChannel.VALUE) - The channel to
          query.
        
        * start_range (default: 0.0) - Start of the intensity measurement
          range.
        
        * end_range (default: 0.0) - End of the intensity measurement range.
        
        Returns:
        
        * mean (default: 0.0) - Mean intensity value.
        
        * std_dev (default: 0.0) - Standard deviation of intensity values.
        
        * median (default: 0.0) - Median intensity value.
        
        * pixels (default: 0.0) - Alpha-weighted pixel count for entire image.
        
        * count (default: 0.0) - Alpha-weighted pixel count for range.
        
        * percentile (default: 0.0) - Percentile that range falls under.
        """
        pass

    def gimp_drawable_hue_saturation(self, drawable: Gimp.Drawable=None, hue_range: Gimp.HueRange=Gimp.HueRange.ALL, hue_offset: float=-180.0, lightness: float=-100.0, saturation: float=-100.0, overlap: float=0.0):
        """Modify hue, lightness, and saturation in the specified drawable.
        
        This procedure allows the hue, lightness, and saturation in the
        specified drawable to be modified. The 'hue-range' parameter
        provides the capability to limit range of affected hues. The
        'overlap' parameter provides blending into neighboring hue
        channels when rendering.
        
        Parameters:
        
        * drawable - The drawable.
        
        * hue_range (default: Gimp.HueRange.ALL) - Range of affected hues.
        
        * hue_offset (default: -180.0) - Hue offset in degrees.
        
        * lightness (default: -100.0) - Lightness modification.
        
        * saturation (default: -100.0) - Saturation modification.
        
        * overlap (default: 0.0) - Overlap other hue channels.
        """
        pass

    def gimp_drawable_invert(self, drawable: Gimp.Drawable=None, linear: bool=False):
        """Invert the contents of the specified drawable.
        
        This procedure inverts the contents of the specified drawable. Each
        intensity channel is inverted independently. The inverted
        intensity is given as inten' = (255 - inten). If 'linear' is
        TRUE, the drawable is inverted in linear space.
        
        Parameters:
        
        * drawable - The drawable.
        
        * linear (default: False) - Whether to invert in linear space.
        """
        pass

    def gimp_drawable_is_gray(self, drawable: Gimp.Drawable=None) -> bool:
        """Returns whether the drawable is a grayscale type.
        
        This procedure returns TRUE if the specified drawable is of type { Gray,
        GrayA }.
        
        Parameters:
        
        * drawable - The drawable.
        
        Returns:
        
        * is_gray (default: False) - TRUE if the drawable is a grayscale type.
        """
        pass

    def gimp_drawable_is_indexed(self, drawable: Gimp.Drawable=None) -> bool:
        """Returns whether the drawable is an indexed type.
        
        This procedure returns TRUE if the specified drawable is of type {
        Indexed, IndexedA }.
        
        Parameters:
        
        * drawable - The drawable.
        
        Returns:
        
        * is_indexed (default: False) - TRUE if the drawable is an indexed
          type.
        """
        pass

    def gimp_drawable_is_rgb(self, drawable: Gimp.Drawable=None) -> bool:
        """Returns whether the drawable is an RGB type.
        
        This procedure returns TRUE if the specified drawable is of type { RGB,
        RGBA }.
        
        Parameters:
        
        * drawable - The drawable.
        
        Returns:
        
        * is_rgb (default: False) - TRUE if the drawable is an RGB type.
        """
        pass

    def gimp_drawable_levels(self, drawable: Gimp.Drawable=None, channel: Gimp.HistogramChannel=Gimp.HistogramChannel.VALUE, low_input: float=0.0, high_input: float=0.0, clamp_input: bool=False, gamma: float=0.1, low_output: float=0.0, high_output: float=0.0, clamp_output: bool=False):
        """Modifies intensity levels in the specified drawable.
        
        This tool allows intensity levels in the specified drawable to be
        remapped according to a set of parameters. The low/high input
        levels specify an initial mapping from the source intensities.
        The gamma value determines how intensities between the low and
        high input intensities are interpolated. A gamma value of 1.0
        results in a linear interpolation. Higher gamma values result in
        more high-level intensities. Lower gamma values result in more
        low-level intensities. The low/high output levels constrain the
        final intensity mapping--that is, no final intensity will be
        lower than the low output level and no final intensity will be
        higher than the high output level. This tool is only valid on
        RGB color and grayscale images.
        
        Parameters:
        
        * drawable - The drawable.
        
        * channel (default: Gimp.HistogramChannel.VALUE) - The channel to
          modify.
        
        * low_input (default: 0.0) - Intensity of lowest input.
        
        * high_input (default: 0.0) - Intensity of highest input.
        
        * clamp_input (default: False) - Clamp input values before applying
          output levels.
        
        * gamma (default: 0.1) - Gamma adjustment factor.
        
        * low_output (default: 0.0) - Intensity of lowest output.
        
        * high_output (default: 0.0) - Intensity of highest output.
        
        * clamp_output (default: False) - Clamp final output values.
        """
        pass

    def gimp_drawable_levels_stretch(self, drawable: Gimp.Drawable=None):
        """Automatically modifies intensity levels in the specified drawable.
        
        This procedure allows intensity levels in the specified drawable to be
        remapped according to a set of guessed parameters. It is
        equivalent to clicking the "Auto" button in the Levels tool.
        
        Parameters:
        
        * drawable - The drawable.
        """
        pass

    def gimp_drawable_mask_bounds(self, drawable: Gimp.Drawable=None) -> Tuple[bool, int, int, int, int]:
        """Find the bounding box of the current selection in relation to the
        specified drawable.
        
        This procedure returns whether there is a selection. If there is one,
        the upper left and lower right-hand corners of its bounding box
        are returned. These coordinates are specified relative to the
        drawable's origin, and bounded by the drawable's extents. Please
        note that the pixel specified by the lower right-hand coordinate
        of the bounding box is not part of the selection. The selection
        ends at the upper left corner of this pixel. This means the
        width of the selection can be calculated as (x2 - x1), its
        height as (y2 - y1). Note that the returned boolean does NOT
        correspond with the returned region being empty or not, it
        always returns whether the selection is non_empty. See
        'gimp-drawable-mask-intersect' for a boolean return value which
        is more useful in most cases.
        
        Parameters:
        
        * drawable - The drawable.
        
        Returns:
        
        * non_empty (default: False) - TRUE if there is a selection.
        
        * x1 (default: 0) - x coordinate of the upper left corner of selection
          bounds.
        
        * y1 (default: 0) - y coordinate of the upper left corner of selection
          bounds.
        
        * x2 (default: 0) - x coordinate of the lower right corner of
          selection bounds.
        
        * y2 (default: 0) - y coordinate of the lower right corner of
          selection bounds.
        """
        pass

    def gimp_drawable_mask_intersect(self, drawable: Gimp.Drawable=None) -> Tuple[bool, int, int, int, int]:
        """Find the bounding box of the current selection in relation to the
        specified drawable.
        
        This procedure returns whether there is an intersection between the
        drawable and the selection. Unlike 'gimp-drawable-mask-bounds',
        the intersection's bounds are returned as x, y, width, height.
        If there is no selection this function returns TRUE and the
        returned bounds are the extents of the whole drawable.
        
        Parameters:
        
        * drawable - The drawable.
        
        Returns:
        
        * non_empty (default: False) - TRUE if the returned area is not empty.
        
        * x (default: 0) - x coordinate of the upper left corner of the
          intersection.
        
        * y (default: 0) - y coordinate of the upper left corner of the
          intersection.
        
        * width (default: 0) - width of the intersection.
        
        * height (default: 0) - height of the intersection.
        """
        pass

    def gimp_drawable_merge_filter_private(self, drawable: Gimp.Drawable=None, filter: Gimp.DrawableFilter=None):
        """Apply the specified effect directly to the drawable.
        
        This procedure applies the specified drawable effect on @drawable and
        merge it (therefore before non-destructive effects are
        computed). The @drawable argument must be the same as the one
        used when you created the effect with
        [ctor@Gimp.DrawableFilter.new]. Once this is run, @filter is not
        valid anymore and you should not try to do anything with it. In
        particular, you must customize the operation's arguments as
        received with [method@Gimp.DrawableFilter.get_config] then sync
        them to the application with [method@Gimp.DrawableFilter.update]
        before merging the effect. This function is private and should
        not be used. Use [method@Gimp.Drawable.merge_filter] instead.
        
        Parameters:
        
        * drawable - The drawable.
        
        * filter - The drawable filter to merge.
        """
        pass

    def gimp_drawable_merge_filters(self, drawable: Gimp.Drawable=None):
        """Merge the layer effect filters to the specified drawable.
        
        This procedure combines the contents of the drawable's filter stack (for
        export) with the specified drawable.
        
        Parameters:
        
        * drawable - The drawable.
        """
        pass

    def gimp_drawable_merge_shadow(self, drawable: Gimp.Drawable=None, undo: bool=False):
        """Merge the shadow buffer with the specified drawable.
        
        This procedure combines the contents of the drawable's shadow buffer
        (for temporary processing) with the specified drawable. The
        'undo' parameter specifies whether to add an undo step for the
        operation. Requesting no undo is useful for such applications as
        'auto-apply'.
        
        Parameters:
        
        * drawable - The drawable.
        
        * undo (default: False) - Push merge to undo stack?.
        """
        pass

    def gimp_drawable_offset(self, drawable: Gimp.Drawable=None, wrap_around: bool=False, fill_type: Gimp.OffsetType=Gimp.OffsetType.COLOR, color: Gegl.Color=None, offset_x: int=0, offset_y: int=0):
        """Offset the drawable by the specified amounts in the X and Y
        directions.
        
        This procedure offsets the specified drawable by the amounts specified
        by 'offset_x' and 'offset_y'. If 'wrap_around' is set to TRUE,
        then portions of the drawable which are offset out of bounds are
        wrapped around. Alternatively, the undefined regions of the
        drawable can be filled with transparency or the background
        color, as specified by the 'fill-type' parameter.
        
        Parameters:
        
        * drawable - The drawable to offset.
        
        * wrap_around (default: False) - wrap image around or fill vacated
          regions.
        
        * fill_type (default: Gimp.OffsetType.COLOR) - fill vacated regions of
          drawable with background or transparent.
        
        * color - fills in the background color when fill_type is set to
          OFFSET-COLOR.
        
        * offset_x (default: 0) - offset by this amount in X direction.
        
        * offset_y (default: 0) - offset by this amount in Y direction.
        """
        pass

    def gimp_drawable_posterize(self, drawable: Gimp.Drawable=None, levels: int=2):
        """Posterize the specified drawable.
        
        This procedures reduces the number of shades allows in each intensity
        channel to the specified 'levels' parameter.
        
        Parameters:
        
        * drawable - The drawable.
        
        * levels (default: 2) - Levels of posterization.
        """
        pass

    def gimp_drawable_set_pixel(self, drawable: Gimp.Drawable=None, x_coord: int=0, y_coord: int=0, color: Gegl.Color=None):
        """Sets the value of the pixel at the specified coordinates.
        
        This procedure sets the pixel value at the specified coordinates. Note
        that this function is not undoable, you should use it only on
        drawables you just created yourself.
        
        Parameters:
        
        * drawable - The drawable.
        
        * x_coord (default: 0) - The x coordinate.
        
        * y_coord (default: 0) - The y coordinate.
        
        * color - The pixel color.
        """
        pass

    def gimp_drawable_shadows_highlights(self, drawable: Gimp.Drawable=None, shadows: float=-100.0, highlights: float=-100.0, whitepoint: float=-10.0, radius: float=0.1, compress: float=0.0, shadows_ccorrect: float=0.0, highlights_ccorrect: float=0.0):
        """Perform shadows and highlights correction.
        
        This filter allows adjusting shadows and highlights in the image
        separately. The implementation closely follow its counterpart in
        the Darktable photography software.
        
        Parameters:
        
        * drawable - The drawable.
        
        * shadows (default: -100.0) - Adjust exposure of shadows.
        
        * highlights (default: -100.0) - Adjust exposure of highlights.
        
        * whitepoint (default: -10.0) - Shift white point.
        
        * radius (default: 0.1) - Spatial extent.
        
        * compress (default: 0.0) - Compress the effect on shadows/highlights
          and preserve midtones.
        
        * shadows_ccorrect (default: 0.0) - Adjust saturation of shadows.
        
        * highlights_ccorrect (default: 0.0) - Adjust saturation of
          highlights.
        """
        pass

    def gimp_drawable_sub_thumbnail(self, drawable: Gimp.Drawable=None, src_x: int=0, src_y: int=0, src_width: int=1, src_height: int=1, dest_width: int=1, dest_height: int=1) -> Tuple[int, int, int, GLib.Bytes]:
        """Get a thumbnail of a sub-area of a drawable drawable.
        
        This function gets data from which a thumbnail of a drawable preview can
        be created. Maximum x or y dimension is 1024 pixels. The pixels
        are returned in RGB[A] or GRAY[A] format. The bpp return value
        gives the number of bytes in the image.
        
        Parameters:
        
        * drawable - The drawable.
        
        * src_x (default: 0) - The x coordinate of the area.
        
        * src_y (default: 0) - The y coordinate of the area.
        
        * src_width (default: 1) - The width of the area.
        
        * src_height (default: 1) - The height of the area.
        
        * dest_width (default: 1) - The thumbnail width.
        
        * dest_height (default: 1) - The thumbnail height.
        
        Returns:
        
        * width (default: 0) - The previews width.
        
        * height (default: 0) - The previews height.
        
        * bpp (default: 0) - The previews bpp.
        
        * thumbnail_data - The thumbnail data.
        """
        pass

    def gimp_drawable_threshold(self, drawable: Gimp.Drawable=None, channel: Gimp.HistogramChannel=Gimp.HistogramChannel.VALUE, low_threshold: float=0.0, high_threshold: float=0.0):
        """Threshold the specified drawable.
        
        This procedures generates a threshold map of the specified drawable. All
        pixels between the values of 'low_threshold' and
        'high_threshold', on the scale of 'channel' are replaced with
        white, and all other pixels with black.
        
        Parameters:
        
        * drawable - The drawable.
        
        * channel (default: Gimp.HistogramChannel.VALUE) - The channel to base
          the threshold on.
        
        * low_threshold (default: 0.0) - The low threshold value.
        
        * high_threshold (default: 0.0) - The high threshold value.
        """
        pass

    def gimp_drawable_thumbnail(self, drawable: Gimp.Drawable=None, width: int=1, height: int=1) -> Tuple[int, int, int, GLib.Bytes]:
        """Get a thumbnail of a drawable.
        
        This function gets data from which a thumbnail of a drawable preview can
        be created. Maximum x or y dimension is 1024 pixels. The pixels
        are returned in RGB[A] or GRAY[A] format. The bpp return value
        gives the number of bytes in the image.
        
        Parameters:
        
        * drawable - The drawable.
        
        * width (default: 1) - The requested thumbnail width.
        
        * height (default: 1) - The requested thumbnail height.
        
        Returns:
        
        * actual_width (default: 0) - The previews width.
        
        * actual_height (default: 0) - The previews height.
        
        * bpp (default: 0) - The previews bpp.
        
        * thumbnail_data - The thumbnail data.
        """
        pass

    def gimp_drawable_type(self, drawable: Gimp.Drawable=None) -> Gimp.ImageType:
        """Returns the drawable's type.
        
        This procedure returns the drawable's type.
        
        Parameters:
        
        * drawable - The drawable.
        
        Returns:
        
        * type (default: Gimp.ImageType.RGB_IMAGE) - The drawable's type.
        """
        pass

    def gimp_drawable_type_with_alpha(self, drawable: Gimp.Drawable=None) -> Gimp.ImageType:
        """Returns the drawable's type with alpha.
        
        This procedure returns the drawable's type as if had an alpha channel.
        If the type is currently Gray, for instance, the returned type
        would be GrayA. If the drawable already has an alpha channel,
        the drawable's type is simply returned.
        
        Parameters:
        
        * drawable - The drawable.
        
        Returns:
        
        * type_with_alpha (default: Gimp.ImageType.RGB_IMAGE) - The drawable's
          type with alpha.
        """
        pass

    def gimp_drawable_update(self, drawable: Gimp.Drawable=None, x: int=0, y: int=0, width: int=0, height: int=0):
        """Update the specified region of the drawable.
        
        This procedure updates the specified region of the drawable. The (x, y)
        coordinate pair is relative to the drawable's origin, not to the
        image origin. Therefore, the entire drawable can be updated
        using (0, 0, width, height).
        
        Parameters:
        
        * drawable - The drawable.
        
        * x (default: 0) - x coordinate of upper left corner of update region.
        
        * y (default: 0) - y coordinate of upper left corner of update region.
        
        * width (default: 0) - Width of update region.
        
        * height (default: 0) - Height of update region.
        """
        pass

    def gimp_drawables_close_popup(self, callback: str=None):
        """Close the drawable selection dialog.
        
        Closes an open drawable selection dialog.
        
        Parameters:
        
        * callback - The name of the callback registered for this pop-up.
        """
        pass

    def gimp_drawables_popup(self, callback: str=None, popup_title: str=None, drawable_type: str=None, initial_drawable: Gimp.Drawable=None, parent_window: GLib.Bytes=None):
        """Invokes the drawable selection dialog.
        
        Opens a dialog letting a user choose an drawable.
        
        Parameters:
        
        * callback - The callback PDB proc to call when user chooses an
          drawable.
        
        * popup_title - Title of the drawable selection dialog.
        
        * drawable_type - The name of the GIMP_TYPE_DRAWABLE subtype.
        
        * initial_drawable - The drawable to set as the initial choice.
        
        * parent_window - An optional parent window handle for the popup to be
          set transient to.
        """
        pass

    def gimp_drawables_set_popup(self, callback: str=None, drawable: Gimp.Drawable=None):
        """Sets the selected drawable in a drawable selection dialog.
        
        Sets the selected drawable in a drawable selection dialog.
        
        Parameters:
        
        * callback - The name of the callback registered for this pop-up.
        
        * drawable - The drawable to set as selected.
        """
        pass

    def gimp_dynamics_get_name_list(self, filter: str=None) -> List[str]:
        """Retrieve the list of loaded paint dynamics.
        
        This procedure returns a list of the paint dynamics that are currently
        available.
        
        Parameters:
        
        * filter - An optional regular expression used to filter the list.
        
        Returns:
        
        * dynamics_list - The list of paint dynamics names.
        """
        pass

    def gimp_dynamics_refresh(self):
        """Refresh current paint dynamics. This function always succeeds.
        
        This procedure retrieves all paint dynamics currently in the user's
        paint dynamics path and updates the paint dynamics dialogs
        accordingly.
        """
        pass

    def gimp_edit_copy(self, drawables: GObject.Value=None) -> bool:
        """Copy from the specified drawables.
        
        If there is a selection in the image, then the area specified by the
        selection is copied from the specified drawables and placed in
        an internal GIMP edit buffer. It can subsequently be retrieved
        using the 'gimp-edit-paste' command. If there is no selection,
        then the specified drawables' contents will be stored in the
        internal GIMP edit buffer. This procedure will return %FALSE if
        the selected area lies completely outside the bounds of the
        current drawables and there is nothing to copy from. All the
        drawables must belong to the same image.
        
        Parameters:
        
        * drawables - Drawables to copy from.
        
        Returns:
        
        * non_empty (default: False) - TRUE if the cut was successful, FALSE
          if there was nothing to copy from.
        """
        pass

    def gimp_edit_copy_visible(self, image: Gimp.Image=None) -> bool:
        """Copy from the projection.
        
        If there is a selection in the image, then the area specified by the
        selection is copied from the projection and placed in an
        internal GIMP edit buffer. It can subsequently be retrieved
        using the 'gimp-edit-paste' command. If there is no selection,
        then the projection's contents will be stored in the internal
        GIMP edit buffer.
        
        Parameters:
        
        * image - The image to copy from.
        
        Returns:
        
        * non_empty (default: False) - TRUE if the copy was successful.
        """
        pass

    def gimp_edit_cut(self, drawables: GObject.Value=None) -> bool:
        """Cut from the specified drawables.
        
        If there is a selection in the image, then the area specified by the
        selection is cut from the specified drawables and placed in an
        internal GIMP edit buffer. It can subsequently be retrieved
        using the 'gimp-edit-paste' command. If there is no selection
        and only one specified drawable, then the specified drawable
        will be removed and its contents stored in the internal GIMP
        edit buffer. This procedure will return %FALSE if the selected
        area lies completely outside the bounds of the current drawables
        and there is nothing to cut from.
        
        Parameters:
        
        * drawables - The drawables to cut from.
        
        Returns:
        
        * non_empty (default: False) - TRUE if the cut was successful, FALSE
          if there was nothing to copy from.
        """
        pass

    def gimp_edit_named_copy(self, drawables: GObject.Value=None, buffer_name: str=None) -> str:
        """Copy into a named buffer.
        
        This procedure works like 'gimp-edit-copy', but additionally stores the
        copied buffer into a named buffer that will stay available for
        later pasting, regardless of any intermediate copy or cut
        operations.
        
        Parameters:
        
        * drawables - The drawables to copy from.
        
        * buffer_name - The name of the buffer to create.
        
        Returns:
        
        * real_name - The real name given to the buffer, or NULL if the copy
          failed.
        """
        pass

    def gimp_edit_named_copy_visible(self, image: Gimp.Image=None, buffer_name: str=None) -> str:
        """Copy from the projection into a named buffer.
        
        This procedure works like 'gimp-edit-copy-visible', but additionally
        stores the copied buffer into a named buffer that will stay
        available for later pasting, regardless of any intermediate copy
        or cut operations.
        
        Parameters:
        
        * image - The image to copy from.
        
        * buffer_name - The name of the buffer to create.
        
        Returns:
        
        * real_name - The real name given to the buffer, or NULL if the copy
          failed.
        """
        pass

    def gimp_edit_named_cut(self, drawables: GObject.Value=None, buffer_name: str=None) -> str:
        """Cut into a named buffer.
        
        This procedure works like 'gimp-edit-cut', but additionally stores the
        cut buffer into a named buffer that will stay available for
        later pasting, regardless of any intermediate copy or cut
        operations.
        
        Parameters:
        
        * drawables - The drawables to cut from.
        
        * buffer_name - The name of the buffer to create.
        
        Returns:
        
        * real_name - The real name given to the buffer, or NULL if the cut
          failed.
        """
        pass

    def gimp_edit_named_paste(self, drawable: Gimp.Drawable=None, buffer_name: str=None, paste_into: bool=False) -> Gimp.Layer:
        """Paste named buffer to the specified drawable.
        
        This procedure works like 'gimp-edit-paste' but pastes a named buffer
        instead of the global buffer.
        
        Parameters:
        
        * drawable - The drawable to paste to.
        
        * buffer_name - The name of the buffer to paste.
        
        * paste_into (default: False) - Clear selection, or paste behind it?.
        
        Returns:
        
        * floating_sel - The new floating selection.
        """
        pass

    def gimp_edit_named_paste_as_new_image(self, buffer_name: str=None) -> Gimp.Image:
        """Paste named buffer to a new image.
        
        This procedure works like 'gimp-edit-paste-as-new-image' but pastes a
        named buffer instead of the global buffer.
        
        Parameters:
        
        * buffer_name - The name of the buffer to paste.
        
        Returns:
        
        * image - The new image.
        """
        pass

    def gimp_edit_paste(self, drawable: Gimp.Drawable=None, paste_into: bool=False) -> Any:
        """Paste buffer to the specified drawable.
        
        This procedure pastes a copy of the internal GIMP edit buffer to the
        specified drawable. The GIMP edit buffer will be empty unless a
        call was previously made to either [func@Gimp.edit_cut] or
        [func@Gimp.edit_copy]. The "paste_into" option specifies whether
        to clear the current image selection, or to paste the buffer
        "behind" the selection. This allows the selection to act as a
        mask for the pasted buffer. Anywhere that the selection mask is
        non-zero, the pasted buffer will show through. The pasted data
        may be a floating selection when relevant, layers otherwise. If
        the image has a floating selection at the time of pasting, the
        old floating selection will be anchored to its drawable before
        the new floating selection is added. This procedure returns the
        new drawables (floating or not). If the result is a floating
        selection, it will already be attached to the specified
        drawable, and a subsequent call to
        [func@Gimp.floating_sel_attach] is not needed.
        
        Parameters:
        
        * drawable - The drawable to paste to.
        
        * paste_into (default: False) - Clear selection, or paste behind it?.
        
        Returns:
        
        * new_drawables - The list of pasted layers.
        """
        pass

    def gimp_edit_paste_as_new_image(self) -> Gimp.Image:
        """Paste buffer to a new image.
        
        This procedure pastes a copy of the internal GIMP edit buffer to a new
        image. The GIMP edit buffer will be empty unless a call was
        previously made to either 'gimp-edit-cut' or 'gimp-edit-copy'.
        This procedure returns the new image or -1 if the edit buffer
        was empty.
        
        Returns:
        
        * image - The new image.
        """
        pass

    def gimp_eraser(self, drawable: Gimp.Drawable=None, strokes: Gimp.DoubleArray=None, hardness: Gimp.BrushApplicationMode=Gimp.BrushApplicationMode.HARD, method: Gimp.PaintApplicationMode=Gimp.PaintApplicationMode.CONSTANT):
        """Erase using the current brush.
        
        This tool erases using the current brush mask. If the specified drawable
        contains an alpha channel, then the erased pixels will become
        transparent. Otherwise, the eraser tool replaces the contents of
        the drawable with the background color. Like paintbrush, this
        tool linearly interpolates between the specified stroke
        coordinates.
        
        Parameters:
        
        * drawable - The affected drawable.
        
        * strokes - Array of stroke coordinates: { s1.x, s1.y, s2.x, s2.y,
          ..., sn.x, sn.y }.
        
        * hardness (default: Gimp.BrushApplicationMode.HARD) - How to apply
          the brush.
        
        * method (default: Gimp.PaintApplicationMode.CONSTANT) - The paint
          method to use.
        """
        pass

    def gimp_eraser_default(self, drawable: Gimp.Drawable=None, strokes: Gimp.DoubleArray=None):
        """Erase using the current brush.
        
        This tool erases using the current brush mask. This function performs
        exactly the same as the 'gimp-eraser' function except that the
        tools arguments are obtained from the eraser option dialog. It
        this dialog has not been activated then the dialogs default
        values will be used.
        
        Parameters:
        
        * drawable - The affected drawable.
        
        * strokes - Array of stroke coordinates: { s1.x, s1.y, s2.x, s2.y,
          ..., sn.x, sn.y }.
        """
        pass

    def gimp_file_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Loads an image file by invoking the right load handler.
        
        This procedure invokes the correct file load handler using magic if
        possible, and falling back on the file's extension and/or prefix
        if not.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * file - The file to load.
        
        Returns:
        
        * image - The output image.
        """
        pass

    def gimp_file_load_layer(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None) -> Gimp.Layer:
        """Loads an image file as a layer for an existing image.
        
        This procedure behaves like the file-load procedure but opens the
        specified image as a layer for an existing image. The returned
        layer needs to be added to the existing image with
        'gimp-image-insert-layer'.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - Destination image.
        
        * file - The file to load.
        
        Returns:
        
        * layer - The layer created when loading the image file.
        """
        pass

    def gimp_file_load_layers(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None) -> Any:
        """Loads an image file as layers for an existing image.
        
        This procedure behaves like the file-load procedure but opens the
        specified image as layers for an existing image. The returned
        layers needs to be added to the existing image with
        'gimp-image-insert-layer'.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - Destination image.
        
        * file - The file to load.
        
        Returns:
        
        * layers - The list of loaded layers.
        """
        pass

    def gimp_file_load_thumbnail(self, file: Gio.File=None) -> Tuple[int, int, GLib.Bytes]:
        """Loads the thumbnail for a file.
        
        This procedure tries to load a thumbnail that belongs to the given file.
        The returned data is an array of colordepth 3 (RGB), regardless
        of the image type. Width and height of the thumbnail are also
        returned. Don't use this function if you need a thumbnail of an
        already opened image, use 'gimp-image-thumbnail' instead.
        
        Parameters:
        
        * file - The file that owns the thumbnail to load.
        
        Returns:
        
        * width (default: 0) - The width of the thumbnail.
        
        * height (default: 0) - The height of the thumbnail.
        
        * thumb_data - The thumbnail data.
        """
        pass

    def gimp_file_save(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None, options: Gimp.ExportOptions=None):
        """Saves a file by extension.
        
        This procedure invokes the correct file save handler according to the
        file's extension and/or prefix. The @options argument is
        currently unused and should be set to %NULL right now.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - Input image.
        
        * file - The file to save the image in.
        
        * options - Export option settings.
        """
        pass

    def gimp_file_save_thumbnail(self, image: Gimp.Image=None, file: Gio.File=None):
        """Saves a thumbnail for the given image.
        
        This procedure saves a thumbnail for the given image according to the
        Free Desktop Thumbnail Managing Standard. The thumbnail is saved
        so that it belongs to the given file. This means you have to
        save the image under this name first, otherwise this procedure
        will fail. This procedure may become useful if you want to
        explicitly save a thumbnail with a file.
        
        Parameters:
        
        * image - The image.
        
        * file - The file the thumbnail belongs to.
        """
        pass

    def gimp_floating_sel_anchor(self, floating_sel: Gimp.Layer=None):
        """Anchor the specified floating selection to its associated drawable.
        
        This procedure anchors the floating selection to its associated
        drawable. This is similar to merging with a merge type of
        ClipToBottomLayer. The floating selection layer is no longer
        valid after this operation.
        
        Parameters:
        
        * floating_sel - The floating selection.
        """
        pass

    def gimp_floating_sel_attach(self, layer: Gimp.Layer=None, drawable: Gimp.Drawable=None):
        """Attach the specified layer as floating to the specified drawable.
        
        This procedure attaches the layer as floating selection to the drawable.
        
        Parameters:
        
        * layer - The layer (is attached as floating selection).
        
        * drawable - The drawable (where to attach the floating selection).
        """
        pass

    def gimp_floating_sel_remove(self, floating_sel: Gimp.Layer=None):
        """Remove the specified floating selection from its associated drawable.
        
        This procedure removes the floating selection completely, without any
        side effects. The associated drawable is then set to active.
        
        Parameters:
        
        * floating_sel - The floating selection.
        """
        pass

    def gimp_floating_sel_to_layer(self, floating_sel: Gimp.Layer=None):
        """Transforms the specified floating selection into a layer.
        
        This procedure transforms the specified floating selection into a layer
        with the same offsets and extents. The composited image will
        look precisely the same, but the floating selection layer will
        no longer be clipped to the extents of the drawable it was
        attached to. The floating selection will become the active
        layer. This procedure will not work if the floating selection
        has a different base type from the underlying image. This might
        be the case if the floating selection is above an auxiliary
        channel or a layer mask.
        
        Parameters:
        
        * floating_sel - The floating selection.
        """
        pass

    def gimp_font_get_by_name(self, name: str=None) -> Gimp.Font:
        """Returns a font with the given name.
        
        If several fonts are named identically, the one which is returned by
        this function should be considered random. This can be used when
        you know you won't have multiple fonts of this name or that you
        don't want to choose (non-interactive scripts, etc.). If you
        need more control, you should use [func@fonts_get_list] instead.
        Returns %NULL when no font exists of that name.
        
        Parameters:
        
        * name - The name of the font.
        
        Returns:
        
        * font - The font.
        """
        pass

    def gimp_font_get_lookup_name(self, font: Gimp.Font=None) -> str:
        """Retrieve the font lookup name.
        
        Retrieve the font lookup name.
        
        Parameters:
        
        * font - GimpFont object.
        
        Returns:
        
        * lookup_name - font lookup name.
        """
        pass

    def gimp_fonts_close_popup(self, font_callback: str=None):
        """Close the font selection dialog.
        
        Closes an open font selection dialog.
        
        Parameters:
        
        * font_callback - The name of the callback registered in the PDB for
          this dialog.
        """
        pass

    def gimp_fonts_get_custom_configs(self) -> Tuple[str, str, str, List[str]]:
        """Retrieve custom configs.
        
        This procedure returns custom FontConfig configs along with the fonts
        renaming config.
        
        Returns:
        
        * config - config path.
        
        * sysconfig - sysconfig path.
        
        * renaming_config - fonts renaming config.
        
        * dirs - custom fonts directories.
        """
        pass

    def gimp_fonts_get_list(self, filter: str=None) -> Any:
        """Retrieve the list of loaded fonts.
        
        This procedure returns a list of the fonts that are currently available.
        Each font returned can be used as input to
        [func@Gimp.context_set_font].
        
        Parameters:
        
        * filter - An optional regular expression used to filter the list.
        
        Returns:
        
        * font_list - The list of fonts.
        """
        pass

    def gimp_fonts_popup(self, font_callback: str=None, popup_title: str=None, initial_font: Gimp.Font=None, parent_window: GLib.Bytes=None):
        """Invokes the Gimp font selection dialog.
        
        Opens a dialog letting a user choose a font.
        
        Parameters:
        
        * font_callback - The callback PDB proc to call when user chooses a
          font.
        
        * popup_title - Title of the font selection dialog.
        
        * initial_font - The name of the initial font choice.
        
        * parent_window - An optional parent window handle for the popup to be
          set transient to.
        """
        pass

    def gimp_fonts_refresh(self):
        """Refresh current fonts. This function always succeeds.
        
        This procedure retrieves all fonts currently in the user's font path and
        updates the font dialogs accordingly. Depending on the amount of
        fonts on the system, this can take considerable time.
        """
        pass

    def gimp_fonts_set_popup(self, font_callback: str=None, font: Gimp.Font=None):
        """Sets the current font in a font selection dialog.
        
        Sets the current font in a font selection dialog.
        
        Parameters:
        
        * font_callback - The name of the callback registered in the PDB for
          the dialog.
        
        * font - The font to set as selected.
        """
        pass

    def gimp_get_color_configuration(self) -> str:
        """Get a serialized version of the color management configuration.
        
        Returns a string that can be deserialized into a GimpColorConfig object
        representing the current color management configuration.
        
        Returns:
        
        * config - Serialized color management configuration.
        """
        pass

    def gimp_get_default_comment(self) -> str:
        """Get the default image comment as specified in the Preferences.
        
        Returns a copy of the default image comment.
        
        Returns:
        
        * comment - Default image comment.
        """
        pass

    def gimp_get_default_unit(self) -> Gimp.Unit:
        """Get the default unit (taken from the user's locale).
        
        Returns the default unit.
        
        Returns:
        
        * unit - Default unit.
        """
        pass

    def gimp_get_images(self) -> Any:
        """Returns the list of images currently open.
        
        This procedure returns the list of images currently open in GIMP.
        
        Returns:
        
        * images - The list of images currently open.
        """
        pass

    def gimp_get_module_load_inhibit(self) -> str:
        """Get the list of modules which should not be loaded.
        
        Returns a copy of the list of modules which should not be loaded.
        
        Returns:
        
        * load_inhibit - The list of modules.
        """
        pass

    def gimp_get_monitor_resolution(self) -> Tuple[float, float]:
        """Get the monitor resolution as specified in the Preferences.
        
        Returns the resolution of the monitor in pixels/inch. This value is
        taken from the Preferences (or the windowing system if this is
        set in the Preferences) and there's no guarantee for the value
        to be reasonable.
        
        Returns:
        
        * xres (default: 0.0) - X resolution.
        
        * yres (default: 0.0) - Y resolution.
        """
        pass

    def gimp_get_parasite(self, name: str=None) -> Gimp.Parasite:
        """Look up a global parasite.
        
        Finds and returns the global parasite that was previously attached.
        
        Parameters:
        
        * name - The name of the parasite to find.
        
        Returns:
        
        * parasite - The found parasite.
        """
        pass

    def gimp_get_parasite_list(self) -> List[str]:
        """List all parasites.
        
        Returns a list of all currently attached global parasites.
        
        Returns:
        
        * parasites - The names of currently attached parasites.
        """
        pass

    def gimp_getpid(self) -> int:
        """Returns the PID of the host GIMP process.
        
        This procedure returns the process ID of the currently running GIMP.
        
        Returns:
        
        * pid (default: 0) - The PID.
        """
        pass

    def gimp_gimprc_query(self, token: str=None) -> str:
        """Queries the gimprc file parser for information on a specified token.
        
        This procedure is used to locate additional information contained in the
        gimprc file considered extraneous to the operation of GIMP.
        Plug-ins that need configuration information can expect it will
        be stored in the user gimprc file and can use this procedure to
        retrieve it. This query procedure will return the value
        associated with the specified token. This corresponds _only_ to
        entries with the format: (<token> <value>). The value must be a
        string. Entries not corresponding to this format will cause
        warnings to be issued on gimprc parsing and will not be
        queryable.
        
        Parameters:
        
        * token - The token to query for.
        
        Returns:
        
        * value - The value associated with the queried token.
        """
        pass

    def gimp_gimprc_set(self, token: str=None, value: str=None):
        """Sets a gimprc token to a value and saves it in the gimprc.
        
        This procedure is used to add or change additional information in the
        gimprc file that is considered extraneous to the operation of
        GIMP. Plug-ins that need configuration information can use this
        function to store it, and 'gimp-gimprc-query' to retrieve it.
        This will accept _only_ string values in UTF-8 encoding.
        
        Parameters:
        
        * token - The token to add or modify.
        
        * value - The value to set the token to.
        """
        pass

    def gimp_gradient_get_by_name(self, name: str=None) -> Gimp.Gradient:
        """Returns the gradient with the given name.
        
        Returns an existing gradient having the given name. Returns %NULL when
        no gradient exists of that name.
        
        Parameters:
        
        * name - The name of the gradient.
        
        Returns:
        
        * gradient - The gradient.
        """
        pass

    def gimp_gradient_get_custom_samples(self, gradient: Gimp.Gradient=None, positions: Gimp.DoubleArray=None, reverse: bool=False) -> Any:
        """Sample the gradient in custom positions.
        
        Samples the color of the gradient at positions from a list. The left
        endpoint of the gradient corresponds to position 0.0, and the
        right endpoint corresponds to 1.0. Returns a list of colors, one
        for each sample.
        
        Parameters:
        
        * gradient - The gradient.
        
        * positions - The list of positions to sample along the gradient.
        
        * reverse (default: False) - Use the reverse gradient.
        
        Returns:
        
        * color_samples - Color samples.
        """
        pass

    def gimp_gradient_get_number_of_segments(self, gradient: Gimp.Gradient=None) -> int:
        """Gets the number of segments of the gradient.
        
        Gets the number of segments of the gradient.
        
        Parameters:
        
        * gradient - The gradient.
        
        Returns:
        
        * num_segments (default: 0) - Number of segments.
        """
        pass

    def gimp_gradient_get_uniform_samples(self, gradient: Gimp.Gradient=None, num_samples: int=2, reverse: bool=False) -> Any:
        """Sample the gradient in uniform parts.
        
        Samples colors uniformly across the gradient. It returns a list of
        colors for each sample. The minimum number of samples to take is
        2, in which case the returned colors will correspond to the `{
        0.0, 1.0 }` positions in the gradient. For example, if the
        number of samples is 3, the procedure will return the colors at
        positions `{ 0.0, 0.5, 1.0 }`.
        
        Parameters:
        
        * gradient - The gradient.
        
        * num_samples (default: 2) - The number of samples to take.
        
        * reverse (default: False) - Use the reverse gradient.
        
        Returns:
        
        * color_samples - Color samples.
        """
        pass

    def gimp_gradient_new(self, name: str=None) -> Gimp.Gradient:
        """Creates a new gradient.
        
        Creates a new gradient having no segments.
        
        Parameters:
        
        * name - The requested name of the new gradient.
        
        Returns:
        
        * gradient - The gradient.
        """
        pass

    def gimp_gradient_segment_get_blending_function(self, gradient: Gimp.Gradient=None, segment: int=0) -> Gimp.GradientSegmentType:
        """Gets the gradient segment's blending function.
        
        Gets the blending function of the segment at the index. Returns an error
        when the segment index is out of range.
        
        Parameters:
        
        * gradient - The gradient.
        
        * segment (default: 0) - The index of a segment within the gradient.
        
        Returns:
        
        * blend_func (default: Gimp.GradientSegmentType.LINEAR) - The blending
          function of the segment.
        """
        pass

    def gimp_gradient_segment_get_coloring_type(self, gradient: Gimp.Gradient=None, segment: int=0) -> Gimp.GradientSegmentColor:
        """Gets the gradient segment's coloring type.
        
        Gets the coloring type of the segment at the index. Returns an error
        when the segment index is out of range.
        
        Parameters:
        
        * gradient - The gradient.
        
        * segment (default: 0) - The index of a segment within the gradient.
        
        Returns:
        
        * coloring_type (default: Gimp.GradientSegmentColor.RGB) - The
          coloring type of the segment.
        """
        pass

    def gimp_gradient_segment_get_left_color(self, gradient: Gimp.Gradient=None, segment: int=0) -> Gegl.Color:
        """Gets the left endpoint color of the segment.
        
        Gets the left endpoint color of the indexed segment of the gradient.
        Returns an error when the segment index is out of range.
        
        Parameters:
        
        * gradient - The gradient.
        
        * segment (default: 0) - The index of a segment within the gradient.
        
        Returns:
        
        * color - The return color.
        """
        pass

    def gimp_gradient_segment_get_left_pos(self, gradient: Gimp.Gradient=None, segment: int=0) -> float:
        """Gets the left endpoint position of a segment.
        
        Gets the position of the left endpoint of the segment of the gradient.
        Returns an error when the segment index is out of range.
        
        Parameters:
        
        * gradient - The gradient.
        
        * segment (default: 0) - The index of a segment within the gradient.
        
        Returns:
        
        * pos (default: 0.0) - The return position.
        """
        pass

    def gimp_gradient_segment_get_middle_pos(self, gradient: Gimp.Gradient=None, segment: int=0) -> float:
        """Gets the midpoint position of the segment.
        
        Gets the position of the midpoint of the segment of the gradient.
        Returns an error when the segment index is out of range.
        
        Parameters:
        
        * gradient - The gradient.
        
        * segment (default: 0) - The index of a segment within the gradient.
        
        Returns:
        
        * pos (default: 0.0) - The return position.
        """
        pass

    def gimp_gradient_segment_get_right_color(self, gradient: Gimp.Gradient=None, segment: int=0) -> Gegl.Color:
        """Gets the right endpoint color of the segment.
        
        Gets the color of the right endpoint color of the segment of the
        gradient. Returns an error when the segment index is out of
        range.
        
        Parameters:
        
        * gradient - The gradient.
        
        * segment (default: 0) - The index of a segment within the gradient.
        
        Returns:
        
        * color - The return color.
        """
        pass

    def gimp_gradient_segment_get_right_pos(self, gradient: Gimp.Gradient=None, segment: int=0) -> float:
        """Gets the right endpoint position of the segment.
        
        Gets the position of the right endpoint of the segment of the gradient.
        Returns an error when the segment index is out of range.
        
        Parameters:
        
        * gradient - The gradient.
        
        * segment (default: 0) - The index of a segment within the gradient.
        
        Returns:
        
        * pos (default: 0.0) - The return position.
        """
        pass

    def gimp_gradient_segment_range_blend_colors(self, gradient: Gimp.Gradient=None, start_segment: int=0, end_segment: int=0):
        """Blend the colors of the segment range.
        
        Blends the colors (but not the opacity) of the range of segments. The
        colors' transition will then be uniform across the range.
        Returns an error when a segment index is out of range, or
        gradient is not editable.
        
        Parameters:
        
        * gradient - The gradient.
        
        * start_segment (default: 0) - Index of the first segment to operate
          on.
        
        * end_segment (default: 0) - Index of the last segment to operate on.
          If negative, the range will extend to the end segment.
        """
        pass

    def gimp_gradient_segment_range_blend_opacity(self, gradient: Gimp.Gradient=None, start_segment: int=0, end_segment: int=0):
        """Blend the opacity of the segment range.
        
        Blends the opacity (but not the colors) of the range of segments. The
        opacity's transition will then be uniform across the range.
        Returns an error when a segment index is out of range, or
        gradient is not editable.
        
        Parameters:
        
        * gradient - The gradient.
        
        * start_segment (default: 0) - Index of the first segment to operate
          on.
        
        * end_segment (default: 0) - Index of the last segment to operate on.
          If negative, the range will extend to the end segment.
        """
        pass

    def gimp_gradient_segment_range_delete(self, gradient: Gimp.Gradient=None, start_segment: int=0, end_segment: int=0):
        """Delete the segment range.
        
        Deletes a range of segments. Returns an error when a segment index is
        out of range, or gradient is not editable. Deleting all the
        segments is undefined behavior.
        
        Parameters:
        
        * gradient - The gradient.
        
        * start_segment (default: 0) - Index of the first segment to operate
          on.
        
        * end_segment (default: 0) - Index of the last segment to operate on.
          If negative, the range will extend to the end segment.
        """
        pass

    def gimp_gradient_segment_range_flip(self, gradient: Gimp.Gradient=None, start_segment: int=0, end_segment: int=0):
        """Flip the segment range.
        
        Reverses the order of segments in a range, and swaps the left and right
        colors in each segment. As if the range as a 1D line were
        rotated in a plane. Returns an error when a segment index is out
        of range, or gradient is not editable.
        
        Parameters:
        
        * gradient - The gradient.
        
        * start_segment (default: 0) - Index of the first segment to operate
          on.
        
        * end_segment (default: 0) - Index of the last segment to operate on.
          If negative, the range will extend to the end segment.
        """
        pass

    def gimp_gradient_segment_range_move(self, gradient: Gimp.Gradient=None, start_segment: int=0, end_segment: int=0, delta: float=-1.0, control_compress: bool=False) -> float:
        """Move the position of an entire segment range by a delta.
        
        Moves the position of an entire segment range by a delta. The actual
        delta (which is returned) will be limited by the control points
        of the neighboring segments. Returns the actual delta. Returns
        an error when a segment index is out of range, or gradient is
        not editable.
        
        Parameters:
        
        * gradient - The gradient.
        
        * start_segment (default: 0) - Index of the first segment to operate
          on.
        
        * end_segment (default: 0) - Index of the last segment to operate on.
          If negative, the range will extend to the end segment.
        
        * delta (default: -1.0) - The delta to move the segment range.
        
        * control_compress (default: False) - Whether or not to compress the
          neighboring segments.
        
        Returns:
        
        * final_delta (default: 0.0) - The final delta by which the range
          moved.
        """
        pass

    def gimp_gradient_segment_range_redistribute_handles(self, gradient: Gimp.Gradient=None, start_segment: int=0, end_segment: int=0):
        """Uniformly redistribute the segment range's handles.
        
        Redistributes the handles of the segment range of the gradient, so
        they'll be evenly spaced. A handle is where two segments meet.
        Segments will then have the same width. Returns an error when a
        segment index is out of range, or gradient is not editable.
        
        Parameters:
        
        * gradient - The gradient.
        
        * start_segment (default: 0) - Index of the first segment to operate
          on.
        
        * end_segment (default: 0) - Index of the last segment to operate on.
          If negative, the range will extend to the end segment.
        """
        pass

    def gimp_gradient_segment_range_replicate(self, gradient: Gimp.Gradient=None, start_segment: int=0, end_segment: int=0, replicate_times: int=2):
        """Replicate the segment range.
        
        Replicates a segment range a given number of times. Instead of the
        original segment range, several smaller scaled copies of it will
        appear in equal widths. Returns an error when a segment index is
        out of range, or gradient is not editable.
        
        Parameters:
        
        * gradient - The gradient.
        
        * start_segment (default: 0) - Index of the first segment to operate
          on.
        
        * end_segment (default: 0) - Index of the last segment to operate on.
          If negative, the range will extend to the end segment.
        
        * replicate_times (default: 2) - The number of replicas for each
          segment.
        """
        pass

    def gimp_gradient_segment_range_set_blending_function(self, gradient: Gimp.Gradient=None, start_segment: int=0, end_segment: int=0, blending_function: Gimp.GradientSegmentType=Gimp.GradientSegmentType.LINEAR):
        """Sets the blending function of a range of segments.
        
        Sets the blending function of a range of segments. Returns an error when
        a segment index is out of range, or gradient is not editable.
        
        Parameters:
        
        * gradient - The gradient.
        
        * start_segment (default: 0) - Index of the first segment to operate
          on.
        
        * end_segment (default: 0) - Index of the last segment to operate on.
          If negative, the range will extend to the end segment.
        
        * blending_function (default: Gimp.GradientSegmentType.LINEAR) - The
          blending function.
        """
        pass

    def gimp_gradient_segment_range_set_coloring_type(self, gradient: Gimp.Gradient=None, start_segment: int=0, end_segment: int=0, coloring_type: Gimp.GradientSegmentColor=Gimp.GradientSegmentColor.RGB):
        """Sets the coloring type of a range of segments.
        
        Sets the coloring type of a range of segments. Returns an error when a
        segment index is out of range, or gradient is not editable.
        
        Parameters:
        
        * gradient - The gradient.
        
        * start_segment (default: 0) - Index of the first segment to operate
          on.
        
        * end_segment (default: 0) - Index of the last segment to operate on.
          If negative, the range will extend to the end segment.
        
        * coloring_type (default: Gimp.GradientSegmentColor.RGB) - The
          coloring type.
        """
        pass

    def gimp_gradient_segment_range_split_midpoint(self, gradient: Gimp.Gradient=None, start_segment: int=0, end_segment: int=0):
        """Splits each segment in the segment range at midpoint.
        
        Splits each segment in the segment range at its midpoint. Returns an
        error when a segment index is out of range, or gradient is not
        editable.
        
        Parameters:
        
        * gradient - The gradient.
        
        * start_segment (default: 0) - Index of the first segment to operate
          on.
        
        * end_segment (default: 0) - Index of the last segment to operate on.
          If negative, the range will extend to the end segment.
        """
        pass

    def gimp_gradient_segment_range_split_uniform(self, gradient: Gimp.Gradient=None, start_segment: int=0, end_segment: int=0, split_parts: int=2):
        """Splits each segment in the segment range uniformly.
        
        Splits each segment in the segment range uniformly into to the number of
        parts given. Returns an error when a segment index is out of
        range, or gradient is not editable.
        
        Parameters:
        
        * gradient - The gradient.
        
        * start_segment (default: 0) - Index of the first segment to operate
          on.
        
        * end_segment (default: 0) - Index of the last segment to operate on.
          If negative, the range will extend to the end segment.
        
        * split_parts (default: 2) - The number of uniform divisions to split
          each segment to.
        """
        pass

    def gimp_gradient_segment_set_left_color(self, gradient: Gimp.Gradient=None, segment: int=0, color: Gegl.Color=None):
        """Sets the left endpoint color of a segment.
        
        Sets the color of the left endpoint the indexed segment of the gradient.
        The alpha channel of the [class@Gegl.Color] is taken into
        account. Returns an error when gradient is not editable or index
        is out of range.
        
        Parameters:
        
        * gradient - The gradient.
        
        * segment (default: 0) - The index of a segment within the gradient.
        
        * color - The color to set.
        """
        pass

    def gimp_gradient_segment_set_left_pos(self, gradient: Gimp.Gradient=None, segment: int=0, pos: float=0.0) -> float:
        """Sets the left endpoint position of the segment.
        
        Sets the position of the left endpoint of the segment of the gradient.
        The final position will be the given fraction from the midpoint
        to the left to the midpoint of the current segment. Returns the
        final position. Returns an error when gradient is not editable
        or segment index is out of range.
        
        Parameters:
        
        * gradient - The gradient.
        
        * segment (default: 0) - The index of a segment within the gradient.
        
        * pos (default: 0.0) - The position to set the guidepoint to.
        
        Returns:
        
        * final_pos (default: 0.0) - The return position.
        """
        pass

    def gimp_gradient_segment_set_middle_pos(self, gradient: Gimp.Gradient=None, segment: int=0, pos: float=0.0) -> float:
        """Sets the midpoint position of the segment.
        
        Sets the midpoint position of the segment of the gradient. The final
        position will be the given fraction between the two endpoints of
        the segment. Returns the final position. Returns an error when
        gradient is not editable or segment index is out of range.
        
        Parameters:
        
        * gradient - The gradient.
        
        * segment (default: 0) - The index of a segment within the gradient.
        
        * pos (default: 0.0) - The position to set the guidepoint to.
        
        Returns:
        
        * final_pos (default: 0.0) - The return position.
        """
        pass

    def gimp_gradient_segment_set_right_color(self, gradient: Gimp.Gradient=None, segment: int=0, color: Gegl.Color=None):
        """Sets the right endpoint color of the segment.
        
        Sets the right endpoint color of the segment of the gradient. The alpha
        channel of the [class@Gegl.Color] is taken into account. Returns
        an error when gradient is not editable or segment index is out
        of range.
        
        Parameters:
        
        * gradient - The gradient.
        
        * segment (default: 0) - The index of a segment within the gradient.
        
        * color - The color to set.
        """
        pass

    def gimp_gradient_segment_set_right_pos(self, gradient: Gimp.Gradient=None, segment: int=0, pos: float=0.0) -> float:
        """Sets the right endpoint position of the segment.
        
        Sets the right endpoint position of the segment of the gradient. The
        final position will be the given fraction from the midpoint of
        the current segment to the midpoint of the segment to the right.
        Returns the final position. Returns an error when gradient is
        not editable or segment index is out of range.
        
        Parameters:
        
        * gradient - The gradient.
        
        * segment (default: 0) - The index of a segment within the gradient.
        
        * pos (default: 0.0) - The position to set the right endpoint to.
        
        Returns:
        
        * final_pos (default: 0.0) - The return position.
        """
        pass

    def gimp_gradients_close_popup(self, gradient_callback: str=None):
        """Close the gradient selection dialog.
        
        Closes an open gradient selection dialog.
        
        Parameters:
        
        * gradient_callback - The name of the callback registered for this
          pop-up.
        """
        pass

    def gimp_gradients_get_list(self, filter: str=None) -> Any:
        """Retrieve the list of loaded gradients.
        
        This procedure returns a list of the gradients that are currently
        loaded. Each gradient returned can be used as input to
        [func@Gimp.context_set_gradient].
        
        Parameters:
        
        * filter - An optional regular expression used to filter the list.
        
        Returns:
        
        * gradient_list - The list of gradients.
        """
        pass

    def gimp_gradients_popup(self, gradient_callback: str=None, popup_title: str=None, initial_gradient: Gimp.Gradient=None, parent_window: GLib.Bytes=None):
        """Invokes the Gimp gradients selection dialog.
        
        Opens a dialog letting a user choose a gradient.
        
        Parameters:
        
        * gradient_callback - The callback PDB proc to call when user chooses
          a gradient.
        
        * popup_title - Title of the gradient selection dialog.
        
        * initial_gradient - The initial gradient choice.
        
        * parent_window - An optional parent window handle for the popup to be
          set transient to.
        """
        pass

    def gimp_gradients_refresh(self):
        """Refresh current gradients. This function always succeeds.
        
        This procedure retrieves all gradients currently in the user's gradient
        path and updates the gradient dialogs accordingly.
        """
        pass

    def gimp_gradients_set_popup(self, gradient_callback: str=None, gradient: Gimp.Gradient=None):
        """Sets the current gradient in a gradient selection dialog.
        
        Sets the current gradient in a gradient selection dialog.
        
        Parameters:
        
        * gradient_callback - The name of the callback registered for this
          pop-up.
        
        * gradient - The gradient to set as selected.
        """
        pass

    def gimp_group_layer_merge(self, group_layer: Gimp.GroupLayer=None) -> Gimp.Layer:
        """Merge the passed group layer's layers into one normal layer.
        
        This procedure combines the layers of the passed group layer into a
        single normal layer, replacing the group. The group layer is
        expected to be attached to an image.
        
        Parameters:
        
        * group_layer - The group layer to merge.
        
        Returns:
        
        * layer - The resulting layer.
        """
        pass

    def gimp_group_layer_new(self, image: Gimp.Image=None) -> Gimp.GroupLayer:
        """Create a new group layer.
        
        This procedure creates a new group layer. Attributes such as layer mode
        and opacity should be set with explicit procedure calls. Add the
        new group layer (which is a kind of layer) with
        [method@image.insert_layer]. Other procedures useful with group
        layers: [method@image_reorder_item], [method@item.get_parent],
        [method@item.get_children], [method@item.is_group].
        
        Parameters:
        
        * image - The image to which to add the group layer.
        
        Returns:
        
        * group_layer - The newly created group layer.
        """
        pass

    def gimp_heal(self, drawable: Gimp.Drawable=None, src_drawable: Gimp.Drawable=None, src_x: float=0.0, src_y: float=0.0, strokes: Gimp.DoubleArray=None):
        """Heal from the source to the dest drawable using the current brush.
        
        This tool heals the source drawable starting at the specified source
        coordinates to the dest drawable. For image healing, if the sum
        of the src coordinates and subsequent stroke offsets exceeds the
        extents of the src drawable, then no paint is transferred. The
        healing tool is capable of transforming between any image types
        except RGB->Indexed.
        
        Parameters:
        
        * drawable - The affected drawable.
        
        * src_drawable - The source drawable.
        
        * src_x (default: 0.0) - The x coordinate in the source image.
        
        * src_y (default: 0.0) - The y coordinate in the source image.
        
        * strokes - Array of stroke coordinates: { s1.x, s1.y, s2.x, s2.y,
          ..., sn.x, sn.y }.
        """
        pass

    def gimp_heal_default(self, drawable: Gimp.Drawable=None, strokes: Gimp.DoubleArray=None):
        """Heal from the source to the dest drawable using the current brush.
        
        This tool heals from the source drawable starting at the specified
        source coordinates to the dest drawable. This function performs
        exactly the same as the 'gimp-heal' function except that the
        tools arguments are obtained from the healing option dialog. It
        this dialog has not been activated then the dialogs default
        values will be used.
        
        Parameters:
        
        * drawable - The affected drawable.
        
        * strokes - Array of stroke coordinates: { s1.x, s1.y, s2.x, s2.y,
          ..., sn.x, sn.y }.
        """
        pass

    def gimp_help(self, help_domain: str=None, help_id: str=None):
        """Load a help page.
        
        This procedure loads the specified help page into the helpbrowser or
        what ever is configured as help viewer. The help page is
        identified by its domain and ID: if help_domain is NULL, we use
        the help_domain which was registered using the
        'gimp-plugin-help-register' procedure. If help_domain is NULL
        and no help domain was registered, the help domain of the main
        GIMP installation is used.
        
        Parameters:
        
        * help_domain - The help domain in which help_id is registered.
        
        * help_id - The help page's ID.
        """
        pass

    def gimp_help_concepts_paths(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE):
        """Bookmark to the user manual.
        
        Menu label: _Using Paths
        Menu path: <Image>/Help/User Manual
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        """
        pass

    def gimp_help_concepts_usage(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE):
        """Bookmark to the user manual.
        
        Menu label: _Basic Concepts
        Menu path: <Image>/Help/User Manual
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        """
        pass

    def gimp_help_main(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE):
        """Bookmark to the user manual.
        
        Menu label: _Table of Contents
        Menu path: <Image>/Help/User Manual/[Table of Contents]
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        """
        pass

    def gimp_help_using_docks(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE):
        """Bookmark to the user manual.
        
        Menu label: How to Use _Dialogs
        Menu path: <Image>/Help/User Manual
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        """
        pass

    def gimp_help_using_fileformats(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE):
        """Bookmark to the user manual.
        
        Menu label: Create, Open and Save _Files
        Menu path: <Image>/Help/User Manual
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        """
        pass

    def gimp_help_using_photography(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE):
        """Bookmark to the user manual.
        
        Menu label: _Working with Digital Camera Photos
        Menu path: <Image>/Help/User Manual
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        """
        pass

    def gimp_help_using_selections(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE):
        """Bookmark to the user manual.
        
        Menu label: _Create and Use Selections
        Menu path: <Image>/Help/User Manual
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        """
        pass

    def gimp_help_using_simpleobjects(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE):
        """Bookmark to the user manual.
        
        Menu label: Drawing _Simple Objects
        Menu path: <Image>/Help/User Manual
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        """
        pass

    def gimp_help_using_web(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE):
        """Bookmark to the user manual.
        
        Menu label: _Preparing your Images for the Web
        Menu path: <Image>/Help/User Manual
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        """
        pass

    def gimp_image_add_hguide(self, image: Gimp.Image=None, yposition: int=0) -> int:
        """Add a horizontal guide to an image.
        
        This procedure adds a horizontal guide to an image. It takes the input
        image and the y-position of the new guide as parameters. It
        returns the guide ID of the new guide.
        
        Parameters:
        
        * image - The image.
        
        * yposition (default: 0) - The guide's y-offset from top of image.
        
        Returns:
        
        * guide (default: 1) - The new guide.
        """
        pass

    def gimp_image_add_sample_point(self, image: Gimp.Image=None, position_x: int=0, position_y: int=0) -> int:
        """Add a sample point to an image.
        
        This procedure adds a sample point to an image. It takes the input image
        and the position of the new sample points as parameters. It
        returns the sample point ID of the new sample point.
        
        Parameters:
        
        * image - The image.
        
        * position_x (default: 0) - The sample point's x-offset from left of
          image.
        
        * position_y (default: 0) - The sample point's y-offset from top of
          image.
        
        Returns:
        
        * sample_point (default: 1) - The new sample point.
        """
        pass

    def gimp_image_add_vguide(self, image: Gimp.Image=None, xposition: int=0) -> int:
        """Add a vertical guide to an image.
        
        This procedure adds a vertical guide to an image. It takes the input
        image and the x-position of the new guide as parameters. It
        returns the guide ID of the new guide.
        
        Parameters:
        
        * image - The image.
        
        * xposition (default: 0) - The guide's x-offset from left of image.
        
        Returns:
        
        * guide (default: 1) - The new guide.
        """
        pass

    def gimp_image_attach_parasite(self, image: Gimp.Image=None, parasite: Gimp.Parasite=None):
        """Add a parasite to an image.
        
        This procedure attaches a parasite to an image. It has no return values.
        
        Parameters:
        
        * image - The image.
        
        * parasite - The parasite to attach to an image.
        """
        pass

    def gimp_image_clean_all(self, image: Gimp.Image=None):
        """Set the image dirty count to 0.
        
        This procedure sets the specified image's dirty count to 0, allowing
        operations to occur without having a 'dirtied' image. This is
        especially useful for creating and loading images which should
        not initially be considered dirty, even though layers must be
        created, filled, and installed in the image. Note that save
        plug-ins must NOT call this function themselves after saving the
        image.
        
        Parameters:
        
        * image - The image.
        """
        pass

    def gimp_image_convert_color_profile(self, image: Gimp.Image=None, color_profile: GLib.Bytes=None, intent: Gimp.ColorRenderingIntent=Gimp.ColorRenderingIntent.PERCEPTUAL, bpc: bool=False):
        """Convert the image's layers to a color profile.
        
        This procedure converts from the image's color profile (or the default
        RGB or grayscale profile if none is set) to the given color
        profile. Only RGB and grayscale color profiles are accepted,
        according to the image's type.
        
        Parameters:
        
        * image - The image.
        
        * color_profile - The serialized color profile.
        
        * intent (default: Gimp.ColorRenderingIntent.PERCEPTUAL) - Rendering
          intent.
        
        * bpc (default: False) - Black point compensation.
        """
        pass

    def gimp_image_convert_color_profile_from_file(self, image: Gimp.Image=None, file: Gio.File=None, intent: Gimp.ColorRenderingIntent=Gimp.ColorRenderingIntent.PERCEPTUAL, bpc: bool=False):
        """Convert the image's layers to a color profile.
        
        This procedure converts from the image's color profile (or the default
        RGB or grayscale profile if none is set) to an ICC profile
        specified by 'file'. Only RGB and grayscale color profiles are
        accepted, according to the image's type.
        
        Parameters:
        
        * image - The image.
        
        * file - The file containing the new color profile.
        
        * intent (default: Gimp.ColorRenderingIntent.PERCEPTUAL) - Rendering
          intent.
        
        * bpc (default: False) - Black point compensation.
        """
        pass

    def gimp_image_convert_grayscale(self, image: Gimp.Image=None):
        """Convert specified image to grayscale.
        
        This procedure converts the specified image to grayscale. This process
        requires an image in RGB or Indexed color mode.
        
        Parameters:
        
        * image - The image.
        """
        pass

    def gimp_image_convert_indexed(self, image: Gimp.Image=None, dither_type: Gimp.ConvertDitherType=Gimp.ConvertDitherType.NONE, palette_type: Gimp.ConvertPaletteType=Gimp.ConvertPaletteType.GENERATE, num_cols: int=0, alpha_dither: bool=False, remove_unused: bool=False, palette: str=None):
        """Convert specified image to and Indexed image.
        
        This procedure converts the specified image to 'indexed' color. This
        process requires an image in RGB or Grayscale mode. The
        'palette_type' specifies what kind of palette to use, A type of
        '0' means to use an optimal palette of 'num_cols' generated from
        the colors in the image. A type of '1' means to re-use the
        previous palette (not currently implemented). A type of '2'
        means to use the so-called WWW-optimized palette. Type '3' means
        to use only black and white colors. A type of '4' means to use a
        palette from the gimp palettes directories. The 'dither type'
        specifies what kind of dithering to use. '0' means no dithering,
        '1' means standard Floyd-Steinberg error diffusion, '2' means
        Floyd-Steinberg error diffusion with reduced bleeding, '3' means
        dithering based on pixel location ('Fixed' dithering).
        
        Parameters:
        
        * image - The image.
        
        * dither_type (default: Gimp.ConvertDitherType.NONE) - The dither type
          to use.
        
        * palette_type (default: Gimp.ConvertPaletteType.GENERATE) - The type
          of palette to use.
        
        * num_cols (default: 0) - The number of colors to quantize to, ignored
          unless (palette_type == GIMP_CONVERT_PALETTE_GENERATE).
        
        * alpha_dither (default: False) - Dither transparency to fake partial
          opacity.
        
        * remove_unused (default: False) - Remove unused or duplicate color
          entries from final palette, ignored if (palette_type ==
          GIMP_CONVERT_PALETTE_GENERATE).
        
        * palette - The name of the custom palette to use, ignored unless
          (palette_type == GIMP_CONVERT_PALETTE_CUSTOM).
        """
        pass

    def gimp_image_convert_precision(self, image: Gimp.Image=None, precision: Gimp.Precision=Gimp.Precision.U8_LINEAR):
        """Convert the image to the specified precision.
        
        This procedure converts the image to the specified precision. Note that
        indexed images cannot be converted and are always in
        GIMP_PRECISION_U8.
        
        Parameters:
        
        * image - The image.
        
        * precision (default: Gimp.Precision.U8_LINEAR) - The new precision.
        """
        pass

    def gimp_image_convert_rgb(self, image: Gimp.Image=None):
        """Convert specified image to RGB color.
        
        This procedure converts the specified image to RGB color. This process
        requires an image in Grayscale or Indexed color mode. No image
        content is lost in this process aside from the colormap for an
        indexed image.
        
        Parameters:
        
        * image - The image.
        """
        pass

    def gimp_image_convert_set_dither_matrix(self, width: int=0, height: int=0, matrix: GLib.Bytes=None):
        """Set dither matrix for conversion to indexed.
        
        This procedure sets the dither matrix used when converting images to
        INDEXED mode with positional dithering.
        
        Parameters:
        
        * width (default: 0) - Width of the matrix (0 to reset to default
          matrix).
        
        * height (default: 0) - Height of the matrix (0 to reset to default
          matrix).
        
        * matrix - The matrix -- all values must be >= 1.
        """
        pass

    def gimp_image_crop(self, image: Gimp.Image=None, new_width: int=1, new_height: int=1, offx: int=0, offy: int=0):
        """Crop the image to the specified extents.
        
        This procedure crops the image so that it's new width and height are
        equal to the supplied parameters. Offsets are also provided
        which describe the position of the previous image's content. All
        channels and layers within the image are cropped to the new
        image extents; this includes the image selection mask. If any
        parameters are out of range, an error is returned.
        
        Parameters:
        
        * image - The image.
        
        * new_width (default: 1) - New image width: (0 < new_width <= width).
        
        * new_height (default: 1) - New image height: (0 < new_height <=
          height).
        
        * offx (default: 0) - X offset: (0 <= offx <= (width - new_width)).
        
        * offy (default: 0) - Y offset: (0 <= offy <= (height - new_height)).
        """
        pass

    def gimp_image_delete(self, image: Gimp.Image=None):
        """Delete the specified image.
        
        If there are no displays associated with this image it will be deleted.
        This means that you can not delete an image through the PDB that
        was created by the user. If the associated display was however
        created through the PDB and you know the display ID, you may
        delete the display. Removal of the last associated display will
        then delete the image.
        
        Parameters:
        
        * image - The image.
        """
        pass

    def gimp_image_delete_guide(self, image: Gimp.Image=None, guide: int=1):
        """Deletes a guide from an image.
        
        This procedure takes an image and a guide ID as input and removes the
        specified guide from the specified image.
        
        Parameters:
        
        * image - The image.
        
        * guide (default: 1) - The ID of the guide to be removed.
        """
        pass

    def gimp_image_delete_sample_point(self, image: Gimp.Image=None, sample_point: int=1):
        """Deletes a sample point from an image.
        
        This procedure takes an image and a sample point ID as input and removes
        the specified sample point from the specified image.
        
        Parameters:
        
        * image - The image.
        
        * sample_point (default: 1) - The ID of the sample point to be
          removed.
        """
        pass

    def gimp_image_detach_parasite(self, image: Gimp.Image=None, name: str=None):
        """Removes a parasite from an image.
        
        This procedure detaches a parasite from an image. It has no return
        values.
        
        Parameters:
        
        * image - The image.
        
        * name - The name of the parasite to detach from an image.
        """
        pass

    def gimp_image_duplicate(self, image: Gimp.Image=None) -> Gimp.Image:
        """Duplicate the specified image.
        
        This procedure duplicates the specified image, copying all layers,
        channels, and image information.
        
        Parameters:
        
        * image - The image.
        
        Returns:
        
        * new_image - The new, duplicated image.
        """
        pass

    def gimp_image_export_path_to_file(self, image: Gimp.Image=None, file: Gio.File=None, path: Gimp.Path=None):
        """Save a path as an SVG file.
        
        This procedure creates an SVG file to save a Path object, that is, a
        path. The resulting file can be edited using a vector graphics
        application, or later reloaded into GIMP. Pass %NULL as the
        'path' argument to export all paths in the image.
        
        Parameters:
        
        * image - The image.
        
        * file - The SVG file to create.
        
        * path - The path object to export, or %NULL for all in the image.
        """
        pass

    def gimp_image_export_path_to_string(self, image: Gimp.Image=None, path: Gimp.Path=None) -> str:
        """Save a path as an SVG string.
        
        This procedure works like [method@Gimp.Image.export_path_to_file] but
        creates a string rather than a file. The string is
        NULL-terminated and holds a complete XML document. Pass %NULL as
        the 'path' argument to export all paths in the image.
        
        Parameters:
        
        * image - The image.
        
        * path - The path object to export, or %NULL for all in the image.
        
        Returns:
        
        * string - A string whose contents are a complete SVG document.
        """
        pass

    def gimp_image_find_next_guide(self, image: Gimp.Image=None, guide: int=1) -> int:
        """Find next guide on an image.
        
        This procedure takes an image and a guide ID as input and finds the
        guide ID of the successor of the given guide ID in the image's
        guide list. If the supplied guide ID is 0, the procedure will
        return the first Guide. The procedure will return 0 if given the
        final guide ID as an argument or the image has no guides.
        
        Parameters:
        
        * image - The image.
        
        * guide (default: 1) - The ID of the current guide (0 if first
          invocation).
        
        Returns:
        
        * next_guide (default: 1) - The next guide's ID.
        """
        pass

    def gimp_image_find_next_sample_point(self, image: Gimp.Image=None, sample_point: int=1) -> int:
        """Find next sample point on an image.
        
        This procedure takes an image and a sample point ID as input and finds
        the sample point ID of the successor of the given sample point
        ID in the image's sample point list. If the supplied sample
        point ID is 0, the procedure will return the first sample point.
        The procedure will return 0 if given the final sample point ID
        as an argument or the image has no sample points.
        
        Parameters:
        
        * image - The image.
        
        * sample_point (default: 1) - The ID of the current sample point (0 if
          first invocation).
        
        Returns:
        
        * next_sample_point (default: 1) - The next sample point's ID.
        """
        pass

    def gimp_image_flatten(self, image: Gimp.Image=None) -> Gimp.Layer:
        """Flatten all visible layers into a single layer. Discard all invisible
        layers.
        
        This procedure combines the visible layers in a manner analogous to
        merging with the CLIP_TO_IMAGE merge type. Non-visible layers
        are discarded, and the resulting image is stripped of its alpha
        channel.
        
        Parameters:
        
        * image - The image.
        
        Returns:
        
        * layer - The resulting layer.
        """
        pass

    def gimp_image_flip(self, image: Gimp.Image=None, flip_type: Gimp.OrientationType=Gimp.OrientationType.HORIZONTAL):
        """Flips the image horizontally or vertically.
        
        This procedure flips (mirrors) the image.
        
        Parameters:
        
        * image - The image.
        
        * flip_type (default: Gimp.OrientationType.HORIZONTAL) - Type of flip.
        """
        pass

    def gimp_image_floating_sel_attached_to(self, image: Gimp.Image=None) -> Gimp.Drawable:
        """Return the drawable the floating selection is attached to.
        
        This procedure returns the drawable the image's floating selection is
        attached to, if it exists. If it doesn't exist, -1 is returned
        as the drawable ID.
        
        Parameters:
        
        * image - The image.
        
        Returns:
        
        * drawable - The drawable the floating selection is attached to.
        """
        pass

    def gimp_image_freeze_channels(self, image: Gimp.Image=None):
        """Freeze the image's channel list.
        
        This procedure freezes the channel list of the image, suppressing any
        updates to the Channels dialog in response to changes to the
        image's channels. This can significantly improve performance
        while applying changes affecting the channel list.
        
        Each call to 'gimp-image-freeze-channels' should be matched by a
        corresponding call to 'gimp-image-thaw-channels', undoing its
        effects.
        
        Parameters:
        
        * image - The image.
        """
        pass

    def gimp_image_freeze_layers(self, image: Gimp.Image=None):
        """Freeze the image's layer list.
        
        This procedure freezes the layer list of the image, suppressing any
        updates to the Layers dialog in response to changes to the
        image's layers. This can significantly improve performance while
        applying changes affecting the layer list.
        
        Each call to 'gimp-image-freeze-layers' should be matched by a
        corresponding call to 'gimp-image-thaw-layers', undoing its
        effects.
        
        Parameters:
        
        * image - The image.
        """
        pass

    def gimp_image_freeze_paths(self, image: Gimp.Image=None):
        """Freeze the image's path list.
        
        This procedure freezes the path list of the image, suppressing any
        updates to the Paths dialog in response to changes to the
        image's path. This can significantly improve performance while
        applying changes affecting the path list.
        
        Each call to 'gimp-image-freeze-paths' should be matched by a
        corresponding call to gimp_image_thaw_paths (), undoing its
        effects.
        
        Parameters:
        
        * image - The image.
        """
        pass

    def gimp_image_get_base_type(self, image: Gimp.Image=None) -> Gimp.ImageBaseType:
        """Get the base type of the image.
        
        This procedure returns the image's base type. Layers in the image must
        be of this subtype, but can have an optional alpha channel.
        
        Parameters:
        
        * image - The image.
        
        Returns:
        
        * base_type (default: Gimp.ImageBaseType.RGB) - The image's base type.
        """
        pass

    def gimp_image_get_channel_by_name(self, image: Gimp.Image=None, name: str=None) -> Gimp.Channel:
        """Find a channel with a given name in an image.
        
        This procedure returns the channel with the given name in the specified
        image.
        
        Parameters:
        
        * image - The image.
        
        * name - The name of the channel to find.
        
        Returns:
        
        * channel - The channel with the specified name.
        """
        pass

    def gimp_image_get_channel_by_tattoo(self, image: Gimp.Image=None, tattoo: int=1) -> Gimp.Channel:
        """Find a channel with a given tattoo in an image.
        
        This procedure returns the channel with the given tattoo in the
        specified image.
        
        Parameters:
        
        * image - The image.
        
        * tattoo (default: 1) - The tattoo of the channel to find.
        
        Returns:
        
        * channel - The channel with the specified tattoo.
        """
        pass

    def gimp_image_get_channels(self, image: Gimp.Image=None) -> Any:
        """Returns the list of channels contained in the specified image.
        
        This procedure returns the list of channels contained in the specified
        image. This does not include the selection mask, or layer masks.
        The order is from topmost to bottommost. Note that "channels"
        are custom channels and do not include the image's color
        components.
        
        Parameters:
        
        * image - The image.
        
        Returns:
        
        * channels - The list of channels contained in the image.
        """
        pass

    def gimp_image_get_color_profile(self, image: Gimp.Image=None) -> GLib.Bytes:
        """Returns the image's color profile.
        
        This procedure returns the image's color profile, or NULL if the image
        has no color profile assigned.
        
        Parameters:
        
        * image - The image.
        
        Returns:
        
        * profile_data - The image's serialized color profile.
        """
        pass

    def gimp_image_get_component_active(self, image: Gimp.Image=None, component: Gimp.ChannelType=Gimp.ChannelType.RED) -> bool:
        """Returns if the specified image's image component is active.
        
        This procedure returns if the specified image's image component (i.e.
        Red, Green, Blue intensity channels in an RGB image) is active
        or inactive -- whether or not it can be modified. If the
        specified component is not valid for the image type, an error is
        returned.
        
        Parameters:
        
        * image - The image.
        
        * component (default: Gimp.ChannelType.RED) - The image component.
        
        Returns:
        
        * active (default: False) - Component is active.
        """
        pass

    def gimp_image_get_component_visible(self, image: Gimp.Image=None, component: Gimp.ChannelType=Gimp.ChannelType.RED) -> bool:
        """Returns if the specified image's image component is visible.
        
        This procedure returns if the specified image's image component (i.e.
        Red, Green, Blue intensity channels in an RGB image) is visible
        or invisible -- whether or not it can be seen. If the specified
        component is not valid for the image type, an error is returned.
        
        Parameters:
        
        * image - The image.
        
        * component (default: Gimp.ChannelType.RED) - The image component.
        
        Returns:
        
        * visible (default: False) - Component is visible.
        """
        pass

    def gimp_image_get_default_new_layer_mode(self, image: Gimp.Image=None) -> Gimp.LayerMode:
        """Get the default mode for newly created layers of this image.
        
        Returns the default mode for newly created layers of this image.
        
        Parameters:
        
        * image - The image.
        
        Returns:
        
        * mode (default: Gimp.LayerMode.NORMAL) - The layer mode.
        """
        pass

    def gimp_image_get_effective_color_profile(self, image: Gimp.Image=None) -> GLib.Bytes:
        """Returns the color profile that is used for the image.
        
        This procedure returns the color profile that is actually used for this
        image, which is the profile returned by
        'gimp-image-get-color-profile' if the image has a profile
        assigned, or a generated default RGB or grayscale profile,
        according to the image's type.
        
        Parameters:
        
        * image - The image.
        
        Returns:
        
        * profile_data - The image's serialized color profile.
        """
        pass

    def gimp_image_get_exported_file(self, image: Gimp.Image=None) -> Gio.File:
        """Returns the exported file for the specified image.
        
        This procedure returns the file associated with the specified image if
        the image was exported a non-native GIMP format. If the image
        was not exported, this procedure returns %NULL.
        
        Parameters:
        
        * image - The image.
        
        Returns:
        
        * file - The exported file.
        """
        pass

    def gimp_image_get_file(self, image: Gimp.Image=None) -> Gio.File:
        """Returns the file for the specified image.
        
        This procedure returns the file associated with the specified image. The
        image has a file only if it was loaded or imported from a file
        or has since been saved or exported. Otherwise, this function
        returns %NULL. See also gimp-image-get-imported-file to get the
        current file if it was imported from a non-GIMP file format and
        not yet saved, or gimp-image-get-exported-file if the image has
        been exported to a non-GIMP file format.
        
        Parameters:
        
        * image - The image.
        
        Returns:
        
        * file - The file.
        """
        pass

    def gimp_image_get_floating_sel(self, image: Gimp.Image=None) -> Gimp.Layer:
        """Return the floating selection of the image.
        
        This procedure returns the image's floating selection, if it exists. If
        it doesn't exist, -1 is returned as the layer ID.
        
        Parameters:
        
        * image - The image.
        
        Returns:
        
        * floating_sel - The image's floating selection.
        """
        pass

    def gimp_image_get_guide_orientation(self, image: Gimp.Image=None, guide: int=1) -> Gimp.OrientationType:
        """Get orientation of a guide on an image.
        
        This procedure takes an image and a guide ID as input and returns the
        orientations of the guide.
        
        Parameters:
        
        * image - The image.
        
        * guide (default: 1) - The guide.
        
        Returns:
        
        * orientation (default: Gimp.OrientationType.HORIZONTAL) - The guide's
          orientation.
        """
        pass

    def gimp_image_get_guide_position(self, image: Gimp.Image=None, guide: int=1) -> int:
        """Get position of a guide on an image.
        
        This procedure takes an image and a guide ID as input and returns the
        position of the guide relative to the top or left of the image.
        
        Parameters:
        
        * image - The image.
        
        * guide (default: 1) - The guide.
        
        Returns:
        
        * position (default: 0) - The guide's position relative to top or left
          of image.
        """
        pass

    def gimp_image_get_height(self, image: Gimp.Image=None) -> int:
        """Return the height of the image.
        
        This procedure returns the image's height. This value is independent of
        any of the layers in this image. This is the "canvas" height.
        
        Parameters:
        
        * image - The image.
        
        Returns:
        
        * height (default: 0) - The image's height.
        """
        pass

    def gimp_image_get_imported_file(self, image: Gimp.Image=None) -> Gio.File:
        """Returns the imported file for the specified image.
        
        This procedure returns the file associated with the specified image if
        the image was imported from a non-native Gimp format. If the
        image was not imported, or has since been saved in the native
        Gimp format, this procedure returns %NULL.
        
        Parameters:
        
        * image - The image.
        
        Returns:
        
        * file - The imported file.
        """
        pass

    def gimp_image_get_item_position(self, image: Gimp.Image=None, item: Gimp.Item=None) -> int:
        """Returns the position of the item in its level of its item tree.
        
        This procedure determines the position of the specified item in its
        level in its item tree in the image. If the item doesn't exist
        in the image, or the item is not part of an item tree, an error
        is returned.
        
        Parameters:
        
        * image - The image.
        
        * item - The item.
        
        Returns:
        
        * position (default: 0) - The position of the item in its level in the
          item tree.
        """
        pass

    def gimp_image_get_layer_by_name(self, image: Gimp.Image=None, name: str=None) -> Gimp.Layer:
        """Find a layer with a given name in an image.
        
        This procedure returns the layer with the given name in the specified
        image.
        
        Parameters:
        
        * image - The image.
        
        * name - The name of the layer to find.
        
        Returns:
        
        * layer - The layer with the specified name.
        """
        pass

    def gimp_image_get_layer_by_tattoo(self, image: Gimp.Image=None, tattoo: int=1) -> Gimp.Layer:
        """Find a layer with a given tattoo in an image.
        
        This procedure returns the layer with the given tattoo in the specified
        image.
        
        Parameters:
        
        * image - The image.
        
        * tattoo (default: 1) - The tattoo of the layer to find.
        
        Returns:
        
        * layer - The layer with the specified tattoo.
        """
        pass

    def gimp_image_get_layers(self, image: Gimp.Image=None) -> Any:
        """Returns the list of root layers contained in the specified image.
        
        This procedure returns the list of root layers contained in the
        specified image. The order of layers is from topmost to
        bottommost. Note that this is not the full list of layers, but
        only the root layers, i.e. layers with no parents themselves. If
        you need all layers, it is up to you to verify that any of these
        layers is a group layer with 'gimp-item-is-group' and to obtain
        its children with 'gimp-item-get-children' (possibly recursively
        checking if these have children too).
        
        Parameters:
        
        * image - The image.
        
        Returns:
        
        * layers - The list of layers contained in the image.
        """
        pass

    def gimp_image_get_metadata(self, image: Gimp.Image=None) -> str:
        """Returns the image's metadata.
        
        Returns exif/iptc/xmp metadata from the image.
        
        Parameters:
        
        * image - The image.
        
        Returns:
        
        * metadata_string - The exif/ptc/xmp metadata as a string.
        """
        pass

    def gimp_image_get_name(self, image: Gimp.Image=None) -> str:
        """Returns the specified image's name.
        
        This procedure returns the image's name. If the image has a filename or
        an URI, then the returned name contains the filename's or URI's
        base name (the last component of the path). Otherwise it is the
        translated string "Untitled". The returned name is formatted
        like the image name in the image window title, it may contain
        '[]', '(imported)' etc. and should only be used to label user
        interface elements. Never use it to construct filenames.
        
        Parameters:
        
        * image - The image.
        
        Returns:
        
        * name - The name.
        """
        pass

    def gimp_image_get_palette(self, image: Gimp.Image=None) -> Gimp.Palette:
        """Returns the image's colormap.
        
        This procedure returns the image's colormap as a %GimpPalette. If the
        image is not in Indexed color mode, %NULL is returned.
        
        Parameters:
        
        * image - The image.
        
        Returns:
        
        * palette - The image's colormap palette.
        """
        pass

    def gimp_image_get_parasite(self, image: Gimp.Image=None, name: str=None) -> Gimp.Parasite:
        """Look up a parasite in an image.
        
        Finds and returns the parasite that was previously attached to an image.
        
        Parameters:
        
        * image - The image.
        
        * name - The name of the parasite to find.
        
        Returns:
        
        * parasite - The found parasite.
        """
        pass

    def gimp_image_get_parasite_list(self, image: Gimp.Image=None) -> List[str]:
        """List all parasites.
        
        Returns a list of the names of all currently attached parasites. These
        names can later be used to get the actual #GimpParasite with
        'gimp-image-get-parasite' when needed.
        
        Parameters:
        
        * image - The image.
        
        Returns:
        
        * parasites - The names of currently attached parasites.
        """
        pass

    def gimp_image_get_path_by_name(self, image: Gimp.Image=None, name: str=None) -> Gimp.Path:
        """Find a path with a given name in an image.
        
        This procedure returns the path with the given name in the specified
        image.
        
        Parameters:
        
        * image - The image.
        
        * name - The name of the path to find.
        
        Returns:
        
        * path - The path with the specified name.
        """
        pass

    def gimp_image_get_path_by_tattoo(self, image: Gimp.Image=None, tattoo: int=1) -> Gimp.Path:
        """Find a path with a given tattoo in an image.
        
        This procedure returns the path with the given tattoo in the specified
        image.
        
        Parameters:
        
        * image - The image.
        
        * tattoo (default: 1) - The tattoo of the path to find.
        
        Returns:
        
        * path - The path with the specified tattoo.
        """
        pass

    def gimp_image_get_paths(self, image: Gimp.Image=None) -> Any:
        """Returns the list of paths contained in the specified image.
        
        This procedure returns the list of paths contained in the specified
        image.
        
        Parameters:
        
        * image - The image.
        
        Returns:
        
        * paths - The list of paths contained in the image.
        """
        pass

    def gimp_image_get_precision(self, image: Gimp.Image=None) -> Gimp.Precision:
        """Get the precision of the image.
        
        This procedure returns the image's precision.
        
        Parameters:
        
        * image - The image.
        
        Returns:
        
        * precision (default: Gimp.Precision.U8_LINEAR) - The image's
          precision.
        """
        pass

    def gimp_image_get_resolution(self, image: Gimp.Image=None) -> Tuple[float, float]:
        """Returns the specified image's resolution.
        
        This procedure returns the specified image's resolution in dots per
        inch. This value is independent of any of the layers in this
        image.
        
        Parameters:
        
        * image - The image.
        
        Returns:
        
        * xresolution (default: 0.0) - The resolution in the x-axis, in dots
          per inch.
        
        * yresolution (default: 0.0) - The resolution in the y-axis, in dots
          per inch.
        """
        pass

    def gimp_image_get_sample_point_position(self, image: Gimp.Image=None, sample_point: int=1) -> Tuple[int, int]:
        """Get position of a sample point on an image.
        
        This procedure takes an image and a sample point ID as input and returns
        the position of the sample point relative to the top and left of
        the image.
        
        Parameters:
        
        * image - The image.
        
        * sample_point (default: 1) - The guide.
        
        Returns:
        
        * position_x (default: 0) - The sample point's x-offset relative to
          left of image.
        
        * position_y (default: 0) - The sample point's y-offset relative to
          top of image.
        """
        pass

    def gimp_image_get_selected_channels(self, image: Gimp.Image=None) -> Any:
        """Returns the specified image's selected channels.
        
        This procedure returns the list of selected channels in the specified
        image.
        
        Parameters:
        
        * image - The image.
        
        Returns:
        
        * channels - The list of selected channels in the image.
        """
        pass

    def gimp_image_get_selected_drawables(self, image: Gimp.Image=None) -> Any:
        """Get the image's selected drawables.
        
        This procedure returns the list of selected drawable in the specified
        image. This can be either layers, channels, or a layer mask. The
        active drawables are the active image channels. If there are
        none, these are the active image layers. If the active image
        layer has a layer mask and the layer mask is in edit mode, then
        the layer mask is the active drawable.
        
        Parameters:
        
        * image - The image.
        
        Returns:
        
        * drawables - The list of selected drawables in the image.
        """
        pass

    def gimp_image_get_selected_layers(self, image: Gimp.Image=None) -> Any:
        """Returns the specified image's selected layers.
        
        This procedure returns the list of selected layers in the specified
        image.
        
        Parameters:
        
        * image - The image.
        
        Returns:
        
        * layers - The list of selected layers in the image.
        """
        pass

    def gimp_image_get_selected_paths(self, image: Gimp.Image=None) -> Any:
        """Returns the specified image's selected paths.
        
        This procedure returns the list of selected paths in the specified
        image.
        
        Parameters:
        
        * image - The image.
        
        Returns:
        
        * paths - The list of selected paths in the image.
        """
        pass

    def gimp_image_get_selection(self, image: Gimp.Image=None) -> Gimp.Selection:
        """Returns the specified image's selection.
        
        This will always return a valid ID for a selection -- which is
        represented as a channel internally.
        
        Parameters:
        
        * image - The image.
        
        Returns:
        
        * selection - The selection channel.
        """
        pass

    def gimp_image_get_simulation_bpc(self, image: Gimp.Image=None) -> bool:
        """Returns whether the image has Black Point Compensation enabled for
        its simulation.
        
        This procedure returns whether the image has Black Point Compensation
        enabled for its simulation.
        
        Parameters:
        
        * image - The image.
        
        Returns:
        
        * bpc (default: False) - The Black Point Compensation status.
        """
        pass

    def gimp_image_get_simulation_intent(self, image: Gimp.Image=None) -> Gimp.ColorRenderingIntent:
        """Returns the image's simulation rendering intent.
        
        This procedure returns the image's simulation rendering intent.
        
        Parameters:
        
        * image - The image.
        
        Returns:
        
        * intent (default: Gimp.ColorRenderingIntent.PERCEPTUAL) - The image's
          simulation rendering intent.
        """
        pass

    def gimp_image_get_simulation_profile(self, image: Gimp.Image=None) -> GLib.Bytes:
        """Returns the image's simulation color profile.
        
        This procedure returns the image's simulation color profile, or NULL if
        the image has no simulation color profile assigned.
        
        Parameters:
        
        * image - The image.
        
        Returns:
        
        * profile_data - The image's serialized simulation color profile.
        """
        pass

    def gimp_image_get_tattoo_state(self, image: Gimp.Image=None) -> int:
        """Returns the tattoo state associated with the image.
        
        This procedure returns the tattoo state of the image. Use only by
        save/load plug-ins that wish to preserve an images tattoo state.
        Using this function at other times will produce unexpected
        results.
        
        Parameters:
        
        * image - The image.
        
        Returns:
        
        * tattoo_state (default: 1) - The tattoo state.
        """
        pass

    def gimp_image_get_unit(self, image: Gimp.Image=None) -> Gimp.Unit:
        """Returns the specified image's unit.
        
        This procedure returns the specified image's unit. This value is
        independent of any of the layers in this image. See the
        gimp_unit_*() procedure definitions for the valid range of unit
        IDs and a description of the unit system.
        
        Parameters:
        
        * image - The image.
        
        Returns:
        
        * unit - The unit.
        """
        pass

    def gimp_image_get_width(self, image: Gimp.Image=None) -> int:
        """Return the width of the image.
        
        This procedure returns the image's width. This value is independent of
        any of the layers in this image. This is the "canvas" width.
        
        Parameters:
        
        * image - The image.
        
        Returns:
        
        * width (default: 0) - The image's width.
        """
        pass

    def gimp_image_get_xcf_file(self, image: Gimp.Image=None) -> Gio.File:
        """Returns the XCF file for the specified image.
        
        This procedure returns the XCF file associated with the image. If there
        is no such file, this procedure returns %NULL.
        
        Parameters:
        
        * image - The image.
        
        Returns:
        
        * file - The imported XCF file.
        """
        pass

    def gimp_image_grid_get_background_color(self, image: Gimp.Image=None) -> Gegl.Color:
        """Sets the background color of an image's grid.
        
        This procedure gets the background color of an image's grid.
        
        Parameters:
        
        * image - The image.
        
        Returns:
        
        * bgcolor - The image's grid background color.
        """
        pass

    def gimp_image_grid_get_foreground_color(self, image: Gimp.Image=None) -> Gegl.Color:
        """Sets the foreground color of an image's grid.
        
        This procedure gets the foreground color of an image's grid.
        
        Parameters:
        
        * image - The image.
        
        Returns:
        
        * fgcolor - The image's grid foreground color.
        """
        pass

    def gimp_image_grid_get_offset(self, image: Gimp.Image=None) -> Tuple[float, float]:
        """Gets the offset of an image's grid.
        
        This procedure retrieves the horizontal and vertical offset of an
        image's grid. It takes the image as parameter.
        
        Parameters:
        
        * image - The image.
        
        Returns:
        
        * xoffset (default: 0.0) - The image's grid horizontal offset.
        
        * yoffset (default: 0.0) - The image's grid vertical offset.
        """
        pass

    def gimp_image_grid_get_spacing(self, image: Gimp.Image=None) -> Tuple[float, float]:
        """Gets the spacing of an image's grid.
        
        This procedure retrieves the horizontal and vertical spacing of an
        image's grid. It takes the image as parameter.
        
        Parameters:
        
        * image - The image.
        
        Returns:
        
        * xspacing (default: 0.0) - The image's grid horizontal spacing.
        
        * yspacing (default: 0.0) - The image's grid vertical spacing.
        """
        pass

    def gimp_image_grid_get_style(self, image: Gimp.Image=None) -> Gimp.GridStyle:
        """Gets the style of an image's grid.
        
        This procedure retrieves the style of an image's grid.
        
        Parameters:
        
        * image - The image.
        
        Returns:
        
        * style (default: Gimp.GridStyle.DOTS) - The image's grid style.
        """
        pass

    def gimp_image_grid_set_background_color(self, image: Gimp.Image=None, bgcolor: Gegl.Color=None):
        """Gets the background color of an image's grid.
        
        This procedure sets the background color of an image's grid.
        
        Parameters:
        
        * image - The image.
        
        * bgcolor - The new background color.
        """
        pass

    def gimp_image_grid_set_foreground_color(self, image: Gimp.Image=None, fgcolor: Gegl.Color=None):
        """Gets the foreground color of an image's grid.
        
        This procedure sets the foreground color of an image's grid.
        
        Parameters:
        
        * image - The image.
        
        * fgcolor - The new foreground color.
        """
        pass

    def gimp_image_grid_set_offset(self, image: Gimp.Image=None, xoffset: float=0.0, yoffset: float=0.0):
        """Sets the offset of an image's grid.
        
        This procedure sets the horizontal and vertical offset of an image's
        grid.
        
        Parameters:
        
        * image - The image.
        
        * xoffset (default: 0.0) - The image's grid horizontal offset.
        
        * yoffset (default: 0.0) - The image's grid vertical offset.
        """
        pass

    def gimp_image_grid_set_spacing(self, image: Gimp.Image=None, xspacing: float=0.0, yspacing: float=0.0):
        """Sets the spacing of an image's grid.
        
        This procedure sets the horizontal and vertical spacing of an image's
        grid.
        
        Parameters:
        
        * image - The image.
        
        * xspacing (default: 0.0) - The image's grid horizontal spacing.
        
        * yspacing (default: 0.0) - The image's grid vertical spacing.
        """
        pass

    def gimp_image_grid_set_style(self, image: Gimp.Image=None, style: Gimp.GridStyle=Gimp.GridStyle.DOTS):
        """Sets the style unit of an image's grid.
        
        This procedure sets the style of an image's grid. It takes the image and
        the new style as parameters.
        
        Parameters:
        
        * image - The image.
        
        * style (default: Gimp.GridStyle.DOTS) - The image's grid style.
        """
        pass

    def gimp_image_id_is_valid(self, image_id: int=0) -> bool:
        """Returns TRUE if the image ID is valid.
        
        This procedure checks if the given image ID is valid and refers to an
        existing image.
        
        Parameters:
        
        * image_id (default: 0) - The image ID to check.
        
        Returns:
        
        * valid (default: False) - Whether the image ID is valid.
        """
        pass

    def gimp_image_import_paths_from_file(self, image: Gimp.Image=None, file: Gio.File=None, merge: bool=False, scale: bool=False) -> Any:
        """Import paths from an SVG file.
        
        This procedure imports paths from an SVG file. SVG elements other than
        paths and basic shapes are ignored.
        
        Parameters:
        
        * image - The image.
        
        * file - The SVG file to import.
        
        * merge (default: False) - Merge paths into a single path object.
        
        * scale (default: False) - Scale the SVG to image dimensions.
        
        Returns:
        
        * paths - The list of newly created paths.
        """
        pass

    def gimp_image_import_paths_from_string(self, image: Gimp.Image=None, string: str=None, length: int=0, merge: bool=False, scale: bool=False) -> Any:
        """Import paths from an SVG string.
        
        This procedure works like [method@Gimp.Image.import_paths_from_file] but
        takes a string rather than reading the SVG from a file. This
        allows you to write scripts that generate SVG and feed it to
        GIMP.
        
        Parameters:
        
        * image - The image.
        
        * string - A string that must be a complete and valid SVG document.
        
        * length (default: 0) - Number of bytes in string or -1 if the string
          is NULL terminated.
        
        * merge (default: False) - Merge paths into a single path object.
        
        * scale (default: False) - Scale the SVG to image dimensions.
        
        Returns:
        
        * paths - The list of newly created paths.
        """
        pass

    def gimp_image_insert_channel(self, image: Gimp.Image=None, channel: Gimp.Channel=None, parent: Gimp.Channel=None, position: int=0):
        """Add the specified channel to the image.
        
        This procedure adds the specified channel to the image at the given
        position. Since channel groups are not currently supported, the
        parent argument must always be 0. The position argument
        specifies the location of the channel inside the stack, starting
        from the top (0) and increasing. If the position is specified as
        -1, then the channel is inserted above the active channel.
        
        Parameters:
        
        * image - The image.
        
        * channel - The channel.
        
        * parent - The parent channel.
        
        * position (default: 0) - The channel position.
        """
        pass

    def gimp_image_insert_layer(self, image: Gimp.Image=None, layer: Gimp.Layer=None, parent: Gimp.Layer=None, position: int=0):
        """Add the specified layer to the image.
        
        This procedure adds the specified layer to the image at the given
        position. If the specified parent is a valid layer group (See
        'gimp-item-is-group' and 'gimp-layer-group-new') then the layer
        is added inside the group. If the parent is 0, the layer is
        added inside the main stack, outside of any group. The position
        argument specifies the location of the layer inside the stack
        (or the group, if a valid parent was supplied), starting from
        the top (0) and increasing. If the position is specified as -1
        and the parent is specified as 0, then the layer is inserted
        above the active layer, or inside the group if the active layer
        is a layer group. The layer type must be compatible with the
        image base type.
        
        Parameters:
        
        * image - The image.
        
        * layer - The layer.
        
        * parent - The parent layer.
        
        * position (default: 0) - The layer position.
        """
        pass

    def gimp_image_insert_path(self, image: Gimp.Image=None, path: Gimp.Path=None, parent: Gimp.Path=None, position: int=0):
        """Add the specified path to the image.
        
        This procedure adds the specified path to the image at the given
        position. Since path groups are not currently supported, the
        parent argument must always be 0. The position argument
        specifies the location of the path inside the stack, starting
        from the top (0) and increasing. If the position is specified as
        -1, then the path is inserted above the active path.
        
        Parameters:
        
        * image - The image.
        
        * path - The path.
        
        * parent - The parent path.
        
        * position (default: 0) - The path position.
        """
        pass

    def gimp_image_is_dirty(self, image: Gimp.Image=None) -> bool:
        """Checks if the image has unsaved changes.
        
        This procedure checks the specified image's dirty count to see if it
        needs to be saved. Note that saving the image does not
        automatically set the dirty count to 0, you need to call
        'gimp-image-clean-all' after calling a save procedure to make
        the image clean.
        
        Parameters:
        
        * image - The image.
        
        Returns:
        
        * dirty (default: False) - TRUE if the image has unsaved changes.
        """
        pass

    def gimp_image_lower_item(self, image: Gimp.Image=None, item: Gimp.Item=None):
        """Lower the specified item in its level in its item tree.
        
        This procedure lowers the specified item one step in the item tree. The
        procedure call will fail if there is no item below it.
        
        Parameters:
        
        * image - The image.
        
        * item - The item to lower.
        """
        pass

    def gimp_image_lower_item_to_bottom(self, image: Gimp.Image=None, item: Gimp.Item=None):
        """Lower the specified item to the bottom of its level in its item tree.
        
        This procedure lowers the specified item to bottom of its level in the
        item tree. It will not move the layer if there is no layer below
        it.
        
        Parameters:
        
        * image - The image.
        
        * item - The item to lower to bottom.
        """
        pass

    def gimp_image_merge_down(self, image: Gimp.Image=None, merge_layer: Gimp.Layer=None, merge_type: Gimp.MergeType=Gimp.MergeType.EXPAND_AS_NECESSARY) -> Gimp.Layer:
        """Merge the layer passed and the first visible layer below.
        
        This procedure combines the passed layer and the first visible layer
        below it using the specified merge type. A merge type of
        EXPAND_AS_NECESSARY expands the final layer to encompass the
        areas of the visible layers. A merge type of CLIP_TO_IMAGE clips
        the final layer to the extents of the image. A merge type of
        CLIP_TO_BOTTOM_LAYER clips the final layer to the size of the
        bottommost layer.
        
        Parameters:
        
        * image - The image.
        
        * merge_layer - The layer to merge down from.
        
        * merge_type (default: Gimp.MergeType.EXPAND_AS_NECESSARY) - The type
          of merge.
        
        Returns:
        
        * layer - The resulting layer.
        """
        pass

    def gimp_image_merge_visible_layers(self, image: Gimp.Image=None, merge_type: Gimp.MergeType=Gimp.MergeType.EXPAND_AS_NECESSARY) -> Gimp.Layer:
        """Merge the visible image layers into one.
        
        This procedure combines the visible layers into a single layer using the
        specified merge type. A merge type of EXPAND_AS_NECESSARY
        expands the final layer to encompass the areas of the visible
        layers. A merge type of CLIP_TO_IMAGE clips the final layer to
        the extents of the image. A merge type of CLIP_TO_BOTTOM_LAYER
        clips the final layer to the size of the bottommost layer.
        
        Parameters:
        
        * image - The image.
        
        * merge_type (default: Gimp.MergeType.EXPAND_AS_NECESSARY) - The type
          of merge.
        
        Returns:
        
        * layer - The resulting layer.
        """
        pass

    def gimp_image_new(self, width: int=1, height: int=1, type: Gimp.ImageBaseType=Gimp.ImageBaseType.RGB) -> Gimp.Image:
        """Creates a new image with the specified width, height, and type.
        
        Creates a new image, undisplayed, with the specified extents and type. A
        layer should be created and added before this image is
        displayed, or subsequent calls to 'gimp-display-new' with this
        image as an argument will fail. Layers can be created using the
        'gimp-layer-new' commands. They can be added to an image using
        the 'gimp-image-insert-layer' command.
        
        If your image's type if INDEXED, a palette must also be set with
        [method@Gimp.Image.set_palette]. An indexed image without a
        palette will output unexpected colors.
        
        Parameters:
        
        * width (default: 1) - The width of the image.
        
        * height (default: 1) - The height of the image.
        
        * type (default: Gimp.ImageBaseType.RGB) - The type of image.
        
        Returns:
        
        * image - The newly created image.
        """
        pass

    def gimp_image_new_with_precision(self, width: int=1, height: int=1, type: Gimp.ImageBaseType=Gimp.ImageBaseType.RGB, precision: Gimp.Precision=Gimp.Precision.U8_LINEAR) -> Gimp.Image:
        """Creates a new image with the specified width, height, type and
        precision.
        
        Creates a new image, undisplayed with the specified extents, type and
        precision. Indexed images can only be created at
        GIMP_PRECISION_U8_NON_LINEAR precision. See 'gimp-image-new' for
        further details.
        
        Parameters:
        
        * width (default: 1) - The width of the image.
        
        * height (default: 1) - The height of the image.
        
        * type (default: Gimp.ImageBaseType.RGB) - The type of image.
        
        * precision (default: Gimp.Precision.U8_LINEAR) - The precision.
        
        Returns:
        
        * image - The newly created image.
        """
        pass

    def gimp_image_pick_color(self, image: Gimp.Image=None, drawables: GObject.Value=None, x: float=0.0, y: float=0.0, sample_merged: bool=False, sample_average: bool=False, average_radius: float=0.0) -> Gegl.Color:
        """Determine the color at the given coordinates.
        
        This tool determines the color at the specified coordinates. The
        returned color is an RGB triplet even for grayscale and indexed
        drawables. If the coordinates lie outside of the extents of the
        specified drawables, then an error is returned. All drawables
        must belong to the image and be of the same type. If only one
        drawable is given and it has an alpha channel, the algorithm
        examines the alpha value of the drawable at the coordinates. If
        the alpha value is completely transparent (0), then an error is
        returned. With several drawables specified, the composite image
        with only these drawables is used. If the sample_merged
        parameter is TRUE, the data of the composite image will be used
        instead of that for the specified drawables. This is equivalent
        to sampling for colors after merging all visible layers. In the
        case of a merged sampling, the supplied drawables are ignored.
        
        Parameters:
        
        * image - The image.
        
        * drawables - The drawables to pick from.
        
        * x (default: 0.0) - x coordinate of upper-left corner of rectangle.
        
        * y (default: 0.0) - y coordinate of upper-left corner of rectangle.
        
        * sample_merged (default: False) - Use the composite image, not the
          drawables.
        
        * sample_average (default: False) - Average the color of all the
          pixels in a specified radius.
        
        * average_radius (default: 0.0) - The radius of pixels to average.
        
        Returns:
        
        * color - The return color.
        """
        pass

    def gimp_image_pick_correlate_layer(self, image: Gimp.Image=None, x: int=0, y: int=0) -> Gimp.Layer:
        """Find the layer visible at the specified coordinates.
        
        This procedure finds the layer which is visible at the specified
        coordinates. Layers which do not qualify are those whose extents
        do not pass within the specified coordinates, or which are
        transparent at the specified coordinates. This procedure will
        return -1 if no layer is found.
        
        Parameters:
        
        * image - The image.
        
        * x (default: 0) - The x coordinate for the pick.
        
        * y (default: 0) - The y coordinate for the pick.
        
        Returns:
        
        * layer - The layer found at the specified coordinates.
        """
        pass

    def gimp_image_policy_color_profile(self, image: Gimp.Image=None, interactive: bool=False):
        """Execute the color profile conversion policy.
        
        Process the image according to the color profile policy as set in
        Preferences. If GIMP is running as a GUI and interactive is
        TRUE, a dialog may be presented to the user depending on the
        policy. Otherwise, if the policy does not mandate the conversion
        to perform, the conversion to the preferred RGB or grayscale
        profile will happen, defaulting to built-in profiles if no
        preferred profiles were set in `Preferences`. This function
        should be used only if you want to follow user settings. If you
        intend to convert to a specific profile, call preferably
        'gimp-image-convert-color-profile'. And if you wish to leave
        whatever profile an image has, do not call any of these
        functions. Finally it is unnecessary to call this function in a
        format load procedure because this is called automatically by
        the core code when loading any image. You should only call this
        function explicitly when loading an image through a PDB call.
        
        Parameters:
        
        * image - The image.
        
        * interactive (default: False) - Querying the user through a dialog is
          a possibility.
        """
        pass

    def gimp_image_policy_rotate(self, image: Gimp.Image=None, interactive: bool=False):
        """Execute the "Orientation" metadata policy.
        
        Process the image according to the rotation policy as set in
        Preferences. If GIMP is running as a GUI and interactive is
        TRUE, a dialog may be presented to the user depending on the set
        policy. Otherwise, if the policy does not mandate the action to
        perform, the image will be rotated following the Orientation
        metadata. If you wish absolutely to rotate a loaded image
        following the Orientation metadata, do not use this function and
        process the metadata yourself. Indeed even with `interactive` to
        FALSE, user settings may leave the image unrotated. Finally it
        is unnecessary to call this function in a format load procedure
        because this is called automatically by the core code when
        loading any image. You should only call this function explicitly
        when loading an image through a PDB call.
        
        Parameters:
        
        * image - The image.
        
        * interactive (default: False) - Querying the user through a dialog is
          a possibility.
        """
        pass

    def gimp_image_raise_item(self, image: Gimp.Image=None, item: Gimp.Item=None):
        """Raise the specified item in its level in its item tree.
        
        This procedure raises the specified item one step in the item tree. The
        procedure call will fail if there is no item above it.
        
        Parameters:
        
        * image - The image.
        
        * item - The item to raise.
        """
        pass

    def gimp_image_raise_item_to_top(self, image: Gimp.Image=None, item: Gimp.Item=None):
        """Raise the specified item to the top of its level in its item tree.
        
        This procedure raises the specified item to top of its level in the item
        tree. It will not move the item if there is no item above it.
        
        Parameters:
        
        * image - The image.
        
        * item - The item to raise to top.
        """
        pass

    def gimp_image_remove_channel(self, image: Gimp.Image=None, channel: Gimp.Channel=None):
        """Remove the specified channel from the image.
        
        This procedure removes the specified channel from the image. If the
        channel doesn't exist, an error is returned.
        
        Parameters:
        
        * image - The image.
        
        * channel - The channel.
        """
        pass

    def gimp_image_remove_layer(self, image: Gimp.Image=None, layer: Gimp.Layer=None):
        """Remove the specified layer from the image.
        
        This procedure removes the specified layer from the image. If the layer
        doesn't exist, an error is returned. If there are no layers left
        in the image, this call will fail. If this layer is the last
        layer remaining, the image will become empty and have no active
        layer.
        
        Parameters:
        
        * image - The image.
        
        * layer - The layer.
        """
        pass

    def gimp_image_remove_path(self, image: Gimp.Image=None, path: Gimp.Path=None):
        """Remove the specified path from the image.
        
        This procedure removes the specified path from the image. If the path
        doesn't exist, an error is returned.
        
        Parameters:
        
        * image - The image.
        
        * path - The path object.
        """
        pass

    def gimp_image_reorder_item(self, image: Gimp.Image=None, item: Gimp.Item=None, parent: Gimp.Item=None, position: int=0):
        """Reorder the specified item within its item tree.
        
        Reorders or moves item within an item tree. Requires parent is %NULL or
        a GroupLayer, else returns error. When parent is not %NULL and
        item is in parent, reorders item within parent group. When
        parent is not %NULL and item is not in parent, moves item into
        parent group. When parent is %NULL, moves item from current
        parent to top level.
        
        Requires item is in same tree as not %NULL parent, else returns error.
        Layers, Channels, and Paths are in separate trees.
        
        Requires item is not ancestor of parent, else returns error, to preclude
        cycles.
        
        Parameters:
        
        * image - The image.
        
        * item - The item to reorder.
        
        * parent - The new parent item.
        
        * position (default: 0) - The new position of the item.
        """
        pass

    def gimp_image_resize(self, image: Gimp.Image=None, new_width: int=1, new_height: int=1, offx: int=0, offy: int=0):
        """Resize the image to the specified extents.
        
        This procedure resizes the image so that it's new width and height are
        equal to the supplied parameters. Offsets are also provided
        which describe the position of the previous image's content. All
        channels within the image are resized according to the specified
        parameters; this includes the image selection mask. All layers
        within the image are repositioned according to the specified
        offsets.
        
        Parameters:
        
        * image - The image.
        
        * new_width (default: 1) - New image width.
        
        * new_height (default: 1) - New image height.
        
        * offx (default: 0) - x offset between upper left corner of old and
          new images: (new - old).
        
        * offy (default: 0) - y offset between upper left corner of old and
          new images: (new - old).
        """
        pass

    def gimp_image_resize_to_layers(self, image: Gimp.Image=None):
        """Resize the image to fit all layers.
        
        This procedure resizes the image to the bounding box of all layers of
        the image. All channels within the image are resized to the new
        size; this includes the image selection mask. All layers within
        the image are repositioned to the new image area.
        
        Parameters:
        
        * image - The image.
        """
        pass

    def gimp_image_rotate(self, image: Gimp.Image=None, rotate_type: Gimp.RotationType=Gimp.RotationType.DEGREES90):
        """Rotates the image by the specified degrees.
        
        This procedure rotates the image.
        
        Parameters:
        
        * image - The image.
        
        * rotate_type (default: Gimp.RotationType.DEGREES90) - Angle of
          rotation.
        """
        pass

    def gimp_image_scale(self, image: Gimp.Image=None, new_width: int=1, new_height: int=1):
        """Scale the image using the default interpolation method.
        
        This procedure scales the image so that its new width and height are
        equal to the supplied parameters. All layers and channels within
        the image are scaled according to the specified parameters; this
        includes the image selection mask. The interpolation method used
        can be set with 'gimp-context-set-interpolation'.
        
        Parameters:
        
        * image - The image.
        
        * new_width (default: 1) - New image width.
        
        * new_height (default: 1) - New image height.
        """
        pass

    def gimp_image_select_color(self, image: Gimp.Image=None, operation: Gimp.ChannelOps=Gimp.ChannelOps.ADD, drawable: Gimp.Drawable=None, color: Gegl.Color=None):
        """Create a selection by selecting all pixels (in the specified
        drawable) with the same (or similar) color to that specified.
        
        This tool creates a selection over the specified image. A by-color
        selection is determined by the supplied color under the
        constraints of the current context settings. Essentially, all
        pixels (in the drawable) that have color sufficiently close to
        the specified color (as determined by the threshold and
        criterion context values) are included in the selection. To
        select transparent regions, the color specified must also have
        minimum alpha.
        
        This procedure is affected by the following context setters:
        'gimp-context-set-antialias', 'gimp-context-set-feather',
        'gimp-context-set-feather-radius',
        'gimp-context-set-sample-merged',
        'gimp-context-set-sample-criterion',
        'gimp-context-set-sample-threshold',
        'gimp-context-set-sample-transparent'.
        
        In the case of a merged sampling, the supplied drawable is ignored.
        
        Parameters:
        
        * image - The affected image.
        
        * operation (default: Gimp.ChannelOps.ADD) - The selection operation.
        
        * drawable - The affected drawable.
        
        * color - The color to select.
        """
        pass

    def gimp_image_select_contiguous_color(self, image: Gimp.Image=None, operation: Gimp.ChannelOps=Gimp.ChannelOps.ADD, drawable: Gimp.Drawable=None, x: float=0.0, y: float=0.0):
        """Create a selection by selecting all pixels around specified
        coordinates with the same (or similar) color to that at the
        coordinates.
        
        This tool creates a contiguous selection over the specified image. A
        contiguous color selection is determined by a seed fill under
        the constraints of the current context settings. Essentially,
        the color at the specified coordinates (in the drawable) is
        measured and the selection expands outwards from that point to
        any adjacent pixels which are not significantly different (as
        determined by the threshold and criterion context settings).
        This process continues until no more expansion is possible. If
        antialiasing is turned on, the final selection mask will contain
        intermediate values based on close misses to the threshold bar
        at pixels along the seed fill boundary.
        
        This procedure is affected by the following context setters:
        'gimp-context-set-antialias', 'gimp-context-set-feather',
        'gimp-context-set-feather-radius',
        'gimp-context-set-sample-merged',
        'gimp-context-set-sample-criterion',
        'gimp-context-set-sample-threshold',
        'gimp-context-set-sample-transparent',
        'gimp-context-set-diagonal-neighbors'.
        
        In the case of a merged sampling, the supplied drawable is ignored. If
        the sample is merged, the specified coordinates are relative to
        the image origin; otherwise, they are relative to the drawable's
        origin.
        
        Parameters:
        
        * image - The affected image.
        
        * operation (default: Gimp.ChannelOps.ADD) - The selection operation.
        
        * drawable - The affected drawable.
        
        * x (default: 0.0) - x coordinate of initial seed fill point: (image
          coordinates).
        
        * y (default: 0.0) - y coordinate of initial seed fill point: (image
          coordinates).
        """
        pass

    def gimp_image_select_ellipse(self, image: Gimp.Image=None, operation: Gimp.ChannelOps=Gimp.ChannelOps.ADD, x: float=0.0, y: float=0.0, width: float=0.0, height: float=0.0):
        """Create an elliptical selection over the specified image.
        
        This tool creates an elliptical selection over the specified image. The
        elliptical region can be either added to, subtracted from, or
        replace the contents of the previous selection mask.
        
        This procedure is affected by the following context setters:
        'gimp-context-set-antialias', 'gimp-context-set-feather',
        'gimp-context-set-feather-radius'.
        
        Parameters:
        
        * image - The image.
        
        * operation (default: Gimp.ChannelOps.ADD) - The selection operation.
        
        * x (default: 0.0) - x coordinate of upper-left corner of ellipse
          bounding box.
        
        * y (default: 0.0) - y coordinate of upper-left corner of ellipse
          bounding box.
        
        * width (default: 0.0) - The width of the ellipse.
        
        * height (default: 0.0) - The height of the ellipse.
        """
        pass

    def gimp_image_select_item(self, image: Gimp.Image=None, operation: Gimp.ChannelOps=Gimp.ChannelOps.ADD, item: Gimp.Item=None):
        """Transforms the specified item into a selection.
        
        This procedure renders the item's outline into the current selection of
        the image the item belongs to. What exactly the item's outline
        is depends on the item type: for layers, it's the layer's alpha
        channel, for vectors the vector's shape.
        
        This procedure is affected by the following context setters:
        'gimp-context-set-antialias', 'gimp-context-set-feather',
        'gimp-context-set-feather-radius'.
        
        Parameters:
        
        * image - The image.
        
        * operation (default: Gimp.ChannelOps.ADD) - The desired operation
          with current selection.
        
        * item - The item to render to the selection.
        """
        pass

    def gimp_image_select_polygon(self, image: Gimp.Image=None, operation: Gimp.ChannelOps=Gimp.ChannelOps.ADD, segs: Gimp.DoubleArray=None):
        """Create a polygonal selection over the specified image.
        
        This tool creates a polygonal selection over the specified image. The
        polygonal region can be either added to, subtracted from, or
        replace the contents of the previous selection mask. The polygon
        is specified through an array of floating point numbers and its
        length. The length of array must be 2n, where n is the number of
        points. Each point is defined by 2 floating point values which
        correspond to the x and y coordinates. If the final point does
        not connect to the starting point, a connecting segment is
        automatically added.
        
        This procedure is affected by the following context setters:
        'gimp-context-set-antialias', 'gimp-context-set-feather',
        'gimp-context-set-feather-radius'.
        
        Parameters:
        
        * image - The image.
        
        * operation (default: Gimp.ChannelOps.ADD) - The selection operation.
        
        * segs - Array of points: { p1.x, p1.y, p2.x, p2.y, ..., pn.x, pn.y}.
        """
        pass

    def gimp_image_select_rectangle(self, image: Gimp.Image=None, operation: Gimp.ChannelOps=Gimp.ChannelOps.ADD, x: float=0.0, y: float=0.0, width: float=0.0, height: float=0.0):
        """Create a rectangular selection over the specified image;.
        
        This tool creates a rectangular selection over the specified image. The
        rectangular region can be either added to, subtracted from, or
        replace the contents of the previous selection mask.
        
        This procedure is affected by the following context setters:
        'gimp-context-set-feather', 'gimp-context-set-feather-radius'.
        
        Parameters:
        
        * image - The image.
        
        * operation (default: Gimp.ChannelOps.ADD) - The selection operation.
        
        * x (default: 0.0) - x coordinate of upper-left corner of rectangle.
        
        * y (default: 0.0) - y coordinate of upper-left corner of rectangle.
        
        * width (default: 0.0) - The width of the rectangle.
        
        * height (default: 0.0) - The height of the rectangle.
        """
        pass

    def gimp_image_select_round_rectangle(self, image: Gimp.Image=None, operation: Gimp.ChannelOps=Gimp.ChannelOps.ADD, x: float=0.0, y: float=0.0, width: float=0.0, height: float=0.0, corner_radius_x: float=0.0, corner_radius_y: float=0.0):
        """Create a rectangular selection with round corners over the specified
        image;.
        
        This tool creates a rectangular selection with round corners over the
        specified image. The rectangular region can be either added to,
        subtracted from, or replace the contents of the previous
        selection mask. This procedure is affected by the following
        context setters: 'gimp-context-set-antialias',
        'gimp-context-set-feather', 'gimp-context-set-feather-radius'.
        
        Parameters:
        
        * image - The image.
        
        * operation (default: Gimp.ChannelOps.ADD) - The selection operation.
        
        * x (default: 0.0) - x coordinate of upper-left corner of rectangle.
        
        * y (default: 0.0) - y coordinate of upper-left corner of rectangle.
        
        * width (default: 0.0) - The width of the rectangle.
        
        * height (default: 0.0) - The height of the rectangle.
        
        * corner_radius_x (default: 0.0) - The corner radius in X direction.
        
        * corner_radius_y (default: 0.0) - The corner radius in Y direction.
        """
        pass

    def gimp_image_set_color_profile(self, image: Gimp.Image=None, color_profile: GLib.Bytes=None):
        """Sets the image's color profile.
        
        This procedure sets the image's color profile, or unsets it if NULL is
        passed as 'color_profile'. This procedure does no color
        conversion. However, it will change the pixel format of all
        layers to contain the babl space matching the profile. You must
        call this procedure before adding layers to the image.
        
        Parameters:
        
        * image - The image.
        
        * color_profile - The new serialized color profile.
        """
        pass

    def gimp_image_set_color_profile_from_file(self, image: Gimp.Image=None, file: Gio.File=None):
        """Sets the image's color profile from an ICC file.
        
        This procedure sets the image's color profile from a file containing an
        ICC profile, or unsets it if NULL is passed as 'file'. This
        procedure does no color conversion. However, it will change the
        pixel format of all layers to contain the babl space matching
        the profile. You must call this procedure before adding layers
        to the image.
        
        Parameters:
        
        * image - The image.
        
        * file - The file containing the new color profile.
        """
        pass

    def gimp_image_set_component_active(self, image: Gimp.Image=None, component: Gimp.ChannelType=Gimp.ChannelType.RED, active: bool=False):
        """Sets if the specified image's image component is active.
        
        This procedure sets if the specified image's image component (i.e. Red,
        Green, Blue intensity channels in an RGB image) is active or
        inactive -- whether or not it can be modified. If the specified
        component is not valid for the image type, an error is returned.
        
        Parameters:
        
        * image - The image.
        
        * component (default: Gimp.ChannelType.RED) - The image component.
        
        * active (default: False) - Component is active.
        """
        pass

    def gimp_image_set_component_visible(self, image: Gimp.Image=None, component: Gimp.ChannelType=Gimp.ChannelType.RED, visible: bool=False):
        """Sets if the specified image's image component is visible.
        
        This procedure sets if the specified image's image component (i.e. Red,
        Green, Blue intensity channels in an RGB image) is visible or
        invisible -- whether or not it can be seen. If the specified
        component is not valid for the image type, an error is returned.
        
        Parameters:
        
        * image - The image.
        
        * component (default: Gimp.ChannelType.RED) - The image component.
        
        * visible (default: False) - Component is visible.
        """
        pass

    def gimp_image_set_file(self, image: Gimp.Image=None, file: Gio.File=None):
        """Sets the specified XCF image's file.
        
        This procedure sets the specified image's file. This is to set the XCF
        file associated with your image. In particular, do not use this
        function to set the imported file in file import plug-ins. This
        is done by the core process.
        
        Parameters:
        
        * image - The image.
        
        * file - The new image file.
        """
        pass

    def gimp_image_set_metadata(self, image: Gimp.Image=None, metadata_string: str=None):
        """Set the image's metadata.
        
        Sets exif/iptc/xmp metadata on the image.
        
        Parameters:
        
        * image - The image.
        
        * metadata_string - The exif/ptc/xmp metadata as a string.
        """
        pass

    def gimp_image_set_palette(self, image: Gimp.Image=None, new_palette: Gimp.Palette=None) -> Gimp.Palette:
        """Set the image's colormap to a copy of @palette.
        
        This procedure changes the image's colormap to an exact copy of @palette
        and returns the palette of @image. If the image is not in
        Indexed color mode, nothing happens and %NULL is returned.
        
        Parameters:
        
        * image - The image.
        
        * new_palette - The palette to copy from.
        
        Returns:
        
        * palette - The image's colormap palette.
        """
        pass

    def gimp_image_set_resolution(self, image: Gimp.Image=None, xresolution: float=0.0, yresolution: float=0.0):
        """Sets the specified image's resolution.
        
        This procedure sets the specified image's resolution in dots per inch.
        This value is independent of any of the layers in this image. No
        scaling or resizing is performed.
        
        Parameters:
        
        * image - The image.
        
        * xresolution (default: 0.0) - The new image resolution in the x-axis,
          in dots per inch.
        
        * yresolution (default: 0.0) - The new image resolution in the y-axis,
          in dots per inch.
        """
        pass

    def gimp_image_set_selected_channels(self, image: Gimp.Image=None, channels: GObject.Value=None):
        """Sets the specified image's selected channels.
        
        The channels are set as the selected channels in the image. Any previous
        selected layers or channels are unselected. An exception is a
        previously existing floating selection, in which case this
        procedure will return an execution error.
        
        Parameters:
        
        * image - The image.
        
        * channels - The list of channels to select.
        """
        pass

    def gimp_image_set_selected_layers(self, image: Gimp.Image=None, layers: GObject.Value=None):
        """Sets the specified image's selected layers.
        
        The layers are set as the selected layers in the image. Any previous
        selected layers or channels are unselected. An exception is a
        previously existing floating selection, in which case this
        procedure will return an execution error.
        
        Parameters:
        
        * image - The image.
        
        * layers - The list of layers to select.
        """
        pass

    def gimp_image_set_selected_paths(self, image: Gimp.Image=None, paths: GObject.Value=None):
        """Sets the specified image's selected paths.
        
        The paths are set as the selected paths in the image.
        
        Parameters:
        
        * image - The image.
        
        * paths - The list of paths to select.
        """
        pass

    def gimp_image_set_simulation_bpc(self, image: Gimp.Image=None, bpc: bool=False):
        """Sets whether the image has Black Point Compensation enabled for its
        simulation.
        
        This procedure whether the image has Black Point Compensation enabled
        for its simulation.
        
        Parameters:
        
        * image - The image.
        
        * bpc (default: False) - The Black Point Compensation status.
        """
        pass

    def gimp_image_set_simulation_intent(self, image: Gimp.Image=None, intent: Gimp.ColorRenderingIntent=Gimp.ColorRenderingIntent.PERCEPTUAL):
        """Sets the image's simulation rendering intent.
        
        This procedure sets the image's simulation rendering intent.
        
        Parameters:
        
        * image - The image.
        
        * intent (default: Gimp.ColorRenderingIntent.PERCEPTUAL) - A
          GimpColorRenderingIntent.
        """
        pass

    def gimp_image_set_simulation_profile(self, image: Gimp.Image=None, color_profile: GLib.Bytes=None):
        """Sets the image's simulation color profile.
        
        This procedure sets the image's simulation color profile, or unsets it
        if NULL is passed as 'color_profile'. This procedure does no
        color conversion.
        
        Parameters:
        
        * image - The image.
        
        * color_profile - The new serialized simulation color profile.
        """
        pass

    def gimp_image_set_simulation_profile_from_file(self, image: Gimp.Image=None, file: Gio.File=None):
        """Sets the image's simulation color profile from an ICC file.
        
        This procedure sets the image's simulation color profile from a file
        containing an ICC profile, or unsets it if NULL is passed as
        'file'. This procedure does no color conversion.
        
        Parameters:
        
        * image - The image.
        
        * file - The file containing the new simulation color profile.
        """
        pass

    def gimp_image_set_tattoo_state(self, image: Gimp.Image=None, tattoo_state: int=1):
        """Set the tattoo state associated with the image.
        
        This procedure sets the tattoo state of the image. Use only by save/load
        plug-ins that wish to preserve an images tattoo state. Using
        this function at other times will produce unexpected results. A
        full check of uniqueness of states in layers, channels and paths
        will be performed by this procedure and a execution failure will
        be returned if this fails. A failure will also be returned if
        the new tattoo state value is less than the maximum tattoo value
        from all of the tattoos from the paths, layers and channels.
        After the image data has been loaded and all the tattoos have
        been set then this is the last procedure that should be called.
        If effectively does a status check on the tattoo values that
        have been set to make sure that all is OK.
        
        Parameters:
        
        * image - The image.
        
        * tattoo_state (default: 1) - The new image tattoo state.
        """
        pass

    def gimp_image_set_unit(self, image: Gimp.Image=None, unit: Gimp.Unit=None):
        """Sets the specified image's unit.
        
        This procedure sets the specified image's unit. No scaling or resizing
        is performed. This value is independent of any of the layers in
        this image. See the gimp_unit_*() procedure definitions for the
        valid range of unit IDs and a description of the unit system.
        
        Parameters:
        
        * image - The image.
        
        * unit - The new image unit.
        """
        pass

    def gimp_image_thaw_channels(self, image: Gimp.Image=None):
        """Thaw the image's channel list.
        
        This procedure thaws the channel list of the image, re-enabling updates
        to the Channels dialog.
        
        This procedure should match a corresponding call to
        'gimp-image-freeze-channels'.
        
        Parameters:
        
        * image - The image.
        """
        pass

    def gimp_image_thaw_layers(self, image: Gimp.Image=None):
        """Thaw the image's layer list.
        
        This procedure thaws the layer list of the image, re-enabling updates to
        the Layers dialog.
        
        This procedure should match a corresponding call to
        'gimp-image-freeze-layers'.
        
        Parameters:
        
        * image - The image.
        """
        pass

    def gimp_image_thaw_paths(self, image: Gimp.Image=None):
        """Thaw the image's path list.
        
        This procedure thaws the path list of the image, re-enabling updates to
        the Paths dialog.
        
        This procedure should match a corresponding call to
        'gimp-image-freeze-paths'.
        
        Parameters:
        
        * image - The image.
        """
        pass

    def gimp_image_thumbnail(self, image: Gimp.Image=None, width: int=1, height: int=1) -> Tuple[int, int, int, GLib.Bytes]:
        """Get a thumbnail of an image.
        
        This function gets data from which a thumbnail of an image preview can
        be created. Maximum x or y dimension is 1024 pixels. The pixels
        are returned in RGB[A] or GRAY[A] format. The bpp return value
        gives the number of bits per pixel in the image.
        
        Parameters:
        
        * image - The image.
        
        * width (default: 1) - The requested thumbnail width.
        
        * height (default: 1) - The requested thumbnail height.
        
        Returns:
        
        * actual_width (default: 0) - The previews width.
        
        * actual_height (default: 0) - The previews height.
        
        * bpp (default: 0) - The previews bpp.
        
        * thumbnail_data - The thumbnail data.
        """
        pass

    def gimp_image_undo_disable(self, image: Gimp.Image=None) -> bool:
        """Disable the image's undo stack.
        
        This procedure disables the image's undo stack, allowing subsequent
        operations to ignore their undo steps. This is generally called
        in conjunction with 'gimp-image-undo-enable' to temporarily
        disable an image undo stack. This is advantageous because saving
        undo steps can be time and memory intensive.
        
        Parameters:
        
        * image - The image.
        
        Returns:
        
        * disabled (default: False) - TRUE if the image undo has been
          disabled.
        """
        pass

    def gimp_image_undo_enable(self, image: Gimp.Image=None) -> bool:
        """Enable the image's undo stack.
        
        This procedure enables the image's undo stack, allowing subsequent
        operations to store their undo steps. This is generally called
        in conjunction with 'gimp-image-undo-disable' to temporarily
        disable an image undo stack.
        
        Parameters:
        
        * image - The image.
        
        Returns:
        
        * enabled (default: False) - TRUE if the image undo has been enabled.
        """
        pass

    def gimp_image_undo_freeze(self, image: Gimp.Image=None) -> bool:
        """Freeze the image's undo stack.
        
        This procedure freezes the image's undo stack, allowing subsequent
        operations to ignore their undo steps. This is generally called
        in conjunction with 'gimp-image-undo-thaw' to temporarily
        disable an image undo stack. This is advantageous because saving
        undo steps can be time and memory intensive.
        'gimp-image-undo-freeze' / 'gimp-image-undo-thaw' and
        'gimp-image-undo-disable' / 'gimp-image-undo-enable' differ in
        that the former does not free up all undo steps when undo is
        thawed, so is more suited to interactive in-situ previews. It is
        important in this case that the image is back to the same state
        it was frozen in before thawing, else 'undo' behavior is
        undefined.
        
        Parameters:
        
        * image - The image.
        
        Returns:
        
        * frozen (default: False) - TRUE if the image undo has been frozen.
        """
        pass

    def gimp_image_undo_group_end(self, image: Gimp.Image=None):
        """Finish a group undo.
        
        This function must be called once for each 'gimp-image-undo-group-start'
        call that is made.
        
        Parameters:
        
        * image - The ID of the image in which to close an undo group.
        """
        pass

    def gimp_image_undo_group_start(self, image: Gimp.Image=None):
        """Starts a group undo.
        
        This function is used to start a group undo--necessary for logically
        combining two or more undo operations into a single operation.
        This call must be used in conjunction with a
        'gimp-image-undo-group-end' call.
        
        Parameters:
        
        * image - The ID of the image in which to open an undo group.
        """
        pass

    def gimp_image_undo_is_enabled(self, image: Gimp.Image=None) -> bool:
        """Check if the image's undo stack is enabled.
        
        This procedure checks if the image's undo stack is currently enabled or
        disabled. This is useful when several plug-ins or scripts call
        each other and want to check if their caller has already used
        'gimp-image-undo-disable' or 'gimp-image-undo-freeze'.
        
        Parameters:
        
        * image - The image.
        
        Returns:
        
        * enabled (default: False) - TRUE if undo is enabled for this image.
        """
        pass

    def gimp_image_undo_thaw(self, image: Gimp.Image=None) -> bool:
        """Thaw the image's undo stack.
        
        This procedure thaws the image's undo stack, allowing subsequent
        operations to store their undo steps. This is generally called
        in conjunction with 'gimp-image-undo-freeze' to temporarily
        freeze an image undo stack. 'gimp-image-undo-thaw' does NOT free
        the undo stack as 'gimp-image-undo-enable' does, so is suited
        for situations where one wishes to leave the undo stack in the
        same state in which one found it despite non-destructively
        playing with the image in the meantime. An example would be
        in-situ plug-in previews. Balancing freezes and thaws and
        ensuring image consistency is the responsibility of the caller.
        
        Parameters:
        
        * image - The image.
        
        Returns:
        
        * thawed (default: False) - TRUE if the image undo has been thawed.
        """
        pass

    def gimp_image_unset_active_channel(self, image: Gimp.Image=None):
        """Unsets the active channel in the specified image.
        
        If an active channel exists, it is unset. There then exists no active
        channel, and if desired, one can be set through a call to 'Set
        Active Channel'. No error is returned in the case of no existing
        active channel.
        
        Parameters:
        
        * image - The image.
        """
        pass

    def gimp_item_attach_parasite(self, item: Gimp.Item=None, parasite: Gimp.Parasite=None):
        """Add a parasite to an item.
        
        This procedure attaches a parasite to an item. It has no return values.
        
        Parameters:
        
        * item - The item.
        
        * parasite - The parasite to attach to the item.
        """
        pass

    def gimp_item_delete(self, item: Gimp.Item=None):
        """Delete a item.
        
        This procedure deletes the specified item. This must not be done if the
        image containing this item was already deleted or if the item
        was already removed from the image. The only case in which this
        procedure is useful is if you want to get rid of a item which
        has not yet been added to an image.
        
        Parameters:
        
        * item - The item to delete.
        """
        pass

    def gimp_item_detach_parasite(self, item: Gimp.Item=None, name: str=None):
        """Removes a parasite from an item.
        
        This procedure detaches a parasite from an item. It has no return
        values.
        
        Parameters:
        
        * item - The item.
        
        * name - The name of the parasite to detach from the item.
        """
        pass

    def gimp_item_get_children(self, item: Gimp.Item=None) -> Any:
        """Returns the item's list of children.
        
        This procedure returns the list of items which are children of the
        specified item. The order is topmost to bottommost.
        
        Parameters:
        
        * item - The item.
        
        Returns:
        
        * children - The item's list of children.
        """
        pass

    def gimp_item_get_color_tag(self, item: Gimp.Item=None) -> Gimp.ColorTag:
        """Get the color tag of the specified item.
        
        This procedure returns the specified item's color tag.
        
        Parameters:
        
        * item - The item.
        
        Returns:
        
        * color_tag (default: Gimp.ColorTag.NONE) - The item's color tag.
        """
        pass

    def gimp_item_get_expanded(self, item: Gimp.Item=None) -> bool:
        """Returns whether the item is expanded.
        
        This procedure returns %TRUE if the specified item is expanded.
        
        Parameters:
        
        * item - The item.
        
        Returns:
        
        * expanded (default: False) - TRUE if the item is expanded, FALSE
          otherwise.
        """
        pass

    def gimp_item_get_image(self, item: Gimp.Item=None) -> Gimp.Image:
        """Returns the item's image.
        
        This procedure returns the item's image.
        
        Parameters:
        
        * item - The item.
        
        Returns:
        
        * image - The item's image.
        """
        pass

    def gimp_item_get_lock_content(self, item: Gimp.Item=None) -> bool:
        """Get the 'lock content' state of the specified item.
        
        This procedure returns the specified item's lock content state.
        
        Parameters:
        
        * item - The item.
        
        Returns:
        
        * lock_content (default: False) - Whether the item's contents are
          locked.
        """
        pass

    def gimp_item_get_lock_position(self, item: Gimp.Item=None) -> bool:
        """Get the 'lock position' state of the specified item.
        
        This procedure returns the specified item's lock position state.
        
        Parameters:
        
        * item - The item.
        
        Returns:
        
        * lock_position (default: False) - Whether the item's position is
          locked.
        """
        pass

    def gimp_item_get_lock_visibility(self, item: Gimp.Item=None) -> bool:
        """Get the 'lock visibility' state of the specified item.
        
        This procedure returns the specified item's lock visibility state.
        
        Parameters:
        
        * item - The item.
        
        Returns:
        
        * lock_visibility (default: False) - Whether the item's visibility is
          locked.
        """
        pass

    def gimp_item_get_name(self, item: Gimp.Item=None) -> str:
        """Get the name of the specified item.
        
        This procedure returns the specified item's name.
        
        Parameters:
        
        * item - The item.
        
        Returns:
        
        * name - The item name.
        """
        pass

    def gimp_item_get_parasite(self, item: Gimp.Item=None, name: str=None) -> Gimp.Parasite:
        """Look up a parasite in an item.
        
        Finds and returns the parasite that is attached to an item.
        
        Parameters:
        
        * item - The item.
        
        * name - The name of the parasite to find.
        
        Returns:
        
        * parasite - The found parasite.
        """
        pass

    def gimp_item_get_parasite_list(self, item: Gimp.Item=None) -> List[str]:
        """List all parasites.
        
        Returns a list of all parasites currently attached the an item.
        
        Parameters:
        
        * item - The item.
        
        Returns:
        
        * parasites - The names of currently attached parasites.
        """
        pass

    def gimp_item_get_parent(self, item: Gimp.Item=None) -> Gimp.Item:
        """Returns the item's parent item.
        
        This procedure returns the item's parent item, if any.
        
        Parameters:
        
        * item - The item.
        
        Returns:
        
        * parent - The item's parent item.
        """
        pass

    def gimp_item_get_tattoo(self, item: Gimp.Item=None) -> int:
        """Get the tattoo of the specified item.
        
        This procedure returns the specified item's tattoo. A tattoo is a unique
        and permanent identifier attached to a item that can be used to
        uniquely identify a item within an image even between sessions.
        
        Parameters:
        
        * item - The item.
        
        Returns:
        
        * tattoo (default: 1) - The item tattoo.
        """
        pass

    def gimp_item_get_visible(self, item: Gimp.Item=None) -> bool:
        """Get the visibility of the specified item.
        
        This procedure returns the specified item's visibility.
        
        Parameters:
        
        * item - The item.
        
        Returns:
        
        * visible (default: False) - The item visibility.
        """
        pass

    def gimp_item_id_is_channel(self, item_id: int=0) -> bool:
        """Returns whether the item ID is a channel.
        
        This procedure returns %TRUE if the specified item ID is a channel.
        *Note*: in most use cases, you should not use this function. See
        [func@Gimp.Item.id_is_layer] for a discussion on alternatives.
        
        Parameters:
        
        * item_id (default: 0) - The item ID.
        
        Returns:
        
        * channel (default: False) - TRUE if the item ID is a channel, FALSE
          otherwise.
        """
        pass

    def gimp_item_id_is_drawable(self, item_id: int=0) -> bool:
        """Returns whether the item ID is a drawable.
        
        This procedure returns %TRUE if the specified item ID is a drawable.
        *Note*: in most use cases, you should not use this function. See
        [func@Gimp.Item.id_is_layer] for a discussion on alternatives.
        
        Parameters:
        
        * item_id (default: 0) - The item ID.
        
        Returns:
        
        * drawable (default: False) - TRUE if the item ID is a drawable, FALSE
          otherwise.
        """
        pass

    def gimp_item_id_is_group_layer(self, item_id: int=0) -> bool:
        """Returns whether the item ID is a group layer.
        
        This procedure returns %TRUE if the specified item ID is a group layer.
        *Note*: in most use cases, you should not use this function. See
        [func@Gimp.Item.id_is_layer] for a discussion on alternatives.
        
        Parameters:
        
        * item_id (default: 0) - The item ID.
        
        Returns:
        
        * group_layer (default: False) - TRUE if the item is a group layer,
          FALSE otherwise.
        """
        pass

    def gimp_item_id_is_layer(self, item_id: int=0) -> bool:
        """Returns whether the item ID is a layer.
        
        This procedure returns %TRUE if the specified item ID is a layer.
        *Note*: in most use cases, you should not use this function. If
        the goal is to verify the accurate type for a [class@Gimp.Item],
        you should either use [method@Gimp.Item.is_layer] or the
        specific type-checking methods for the used language.
        
        For instance, in C:
        
        ```C if (GIMP_IS_LAYER (item))
        
        do_something (); ```
        
        Or in the Python binding, you could run:
        
        ```py3 if isinstance(item, Gimp.Layer):
        
        do_something() ```.
        
        Parameters:
        
        * item_id (default: 0) - The item ID.
        
        Returns:
        
        * layer (default: False) - TRUE if the item is a layer, FALSE
          otherwise.
        """
        pass

    def gimp_item_id_is_layer_mask(self, item_id: int=0) -> bool:
        """Returns whether the item ID is a layer mask.
        
        This procedure returns %TRUE if the specified item ID is a layer mask.
        *Note*: in most use cases, you should not use this function. See
        [func@Gimp.Item.id_is_layer] for a discussion on alternatives.
        
        Parameters:
        
        * item_id (default: 0) - The item.
        
        Returns:
        
        * layer_mask (default: False) - TRUE if the item ID is a layer mask,
          FALSE otherwise.
        """
        pass

    def gimp_item_id_is_path(self, item_id: int=0) -> bool:
        """Returns whether the item ID is a path.
        
        This procedure returns %TRUE if the specified item ID is a path. *Note*:
        in most use cases, you should not use this function. See
        [func@Gimp.Item.id_is_layer] for a discussion on alternatives.
        
        Parameters:
        
        * item_id (default: 0) - The item ID.
        
        Returns:
        
        * path (default: False) - TRUE if the item ID is a path, FALSE
          otherwise.
        """
        pass

    def gimp_item_id_is_selection(self, item_id: int=0) -> bool:
        """Returns whether the item ID is a selection.
        
        This procedure returns %TRUE if the specified item ID is a selection.
        *Note*: in most use cases, you should not use this function. See
        [func@Gimp.Item.id_is_layer] for a discussion on alternatives.
        
        Parameters:
        
        * item_id (default: 0) - The item ID.
        
        Returns:
        
        * selection (default: False) - TRUE if the item ID is a selection,
          FALSE otherwise.
        """
        pass

    def gimp_item_id_is_text_layer(self, item_id: int=0) -> bool:
        """Returns whether the item ID is a text layer.
        
        This procedure returns %TRUE if the specified item ID is a text layer.
        *Note*: in most use cases, you should not use this function. See
        [func@Gimp.Item.id_is_layer] for a discussion on alternatives.
        
        Parameters:
        
        * item_id (default: 0) - The item ID.
        
        Returns:
        
        * text_layer (default: False) - TRUE if the item is a text layer,
          FALSE otherwise.
        """
        pass

    def gimp_item_id_is_valid(self, item_id: int=0) -> bool:
        """Returns %TRUE if the item ID is valid.
        
        This procedure checks if the given item ID is valid and refers to an
        existing item.
        
        *Note*: in most use cases, you should not use this function. If you got
        a [class@Gimp.Item] from the API, you should trust it is valid.
        This function is mostly for internal usage.
        
        Parameters:
        
        * item_id (default: 0) - The item ID to check.
        
        Returns:
        
        * valid (default: False) - Whether the item ID is valid.
        """
        pass

    def gimp_item_is_group(self, item: Gimp.Item=None) -> bool:
        """Returns whether the item is a group item.
        
        This procedure returns %TRUE if the specified item is a group item which
        can have children.
        
        Parameters:
        
        * item - The item.
        
        Returns:
        
        * group (default: False) - TRUE if the item is a group, FALSE
          otherwise.
        """
        pass

    def gimp_item_set_color_tag(self, item: Gimp.Item=None, color_tag: Gimp.ColorTag=Gimp.ColorTag.NONE):
        """Set the color tag of the specified item.
        
        This procedure sets the specified item's color tag.
        
        Parameters:
        
        * item - The item.
        
        * color_tag (default: Gimp.ColorTag.NONE) - The new item color tag.
        """
        pass

    def gimp_item_set_expanded(self, item: Gimp.Item=None, expanded: bool=False):
        """Sets the expanded state of the item.
        
        This procedure expands or collapses the item.
        
        Parameters:
        
        * item - The item.
        
        * expanded (default: False) - TRUE to expand the item, FALSE to
          collapse the item.
        """
        pass

    def gimp_item_set_lock_content(self, item: Gimp.Item=None, lock_content: bool=False):
        """Set the 'lock content' state of the specified item.
        
        This procedure sets the specified item's lock content state.
        
        Parameters:
        
        * item - The item.
        
        * lock_content (default: False) - The new item 'lock content' state.
        """
        pass

    def gimp_item_set_lock_position(self, item: Gimp.Item=None, lock_position: bool=False):
        """Set the 'lock position' state of the specified item.
        
        This procedure sets the specified item's lock position state.
        
        Parameters:
        
        * item - The item.
        
        * lock_position (default: False) - The new item 'lock position' state.
        """
        pass

    def gimp_item_set_lock_visibility(self, item: Gimp.Item=None, lock_visibility: bool=False):
        """Set the 'lock visibility' state of the specified item.
        
        This procedure sets the specified item's lock visibility state.
        
        Parameters:
        
        * item - The item.
        
        * lock_visibility (default: False) - The new item 'lock visibility'
          state.
        """
        pass

    def gimp_item_set_name(self, item: Gimp.Item=None, name: str=None):
        """Set the name of the specified item.
        
        This procedure sets the specified item's name.
        
        Parameters:
        
        * item - The item.
        
        * name - The new item name.
        """
        pass

    def gimp_item_set_tattoo(self, item: Gimp.Item=None, tattoo: int=1):
        """Set the tattoo of the specified item.
        
        This procedure sets the specified item's tattoo. A tattoo is a unique
        and permanent identifier attached to a item that can be used to
        uniquely identify a item within an image even between sessions.
        
        Parameters:
        
        * item - The item.
        
        * tattoo (default: 1) - The new item tattoo.
        """
        pass

    def gimp_item_set_visible(self, item: Gimp.Item=None, visible: bool=False):
        """Set the visibility of the specified item.
        
        This procedure sets the specified item's visibility.
        
        Parameters:
        
        * item - The item.
        
        * visible (default: False) - The new item visibility.
        """
        pass

    def gimp_item_transform_2d(self, item: Gimp.Item=None, source_x: float=0.0, source_y: float=0.0, scale_x: float=0.0, scale_y: float=0.0, angle: float=0.0, dest_x: float=0.0, dest_y: float=0.0) -> Gimp.Item:
        """Transform the specified item in 2d.
        
        This procedure transforms the specified item.
        
        The transformation is done by scaling by the x and y scale factors about
        the point (source_x, source_y), then rotating around the same
        point, then translating that point to the new position (dest_x,
        dest_y).
        
        If a selection exists and the item is a drawable, the portion of the
        drawable which lies under the selection is cut from the drawable
        and made into a floating selection which is then transformed as
        specified. The return value is the ID of the transformed
        floating selection.
        
        If there is no selection or the item is not a drawable, the entire item
        will be transformed according to the specified parameters. The
        return value will be equal to the item ID supplied as input.
        
        This procedure is affected by the following context setters:
        'gimp-context-set-interpolation',
        'gimp-context-set-transform-direction',
        'gimp-context-set-transform-resize'.
        
        Parameters:
        
        * item - The affected item.
        
        * source_x (default: 0.0) - X coordinate of the transformation center.
        
        * source_y (default: 0.0) - Y coordinate of the transformation center.
        
        * scale_x (default: 0.0) - Amount to scale in x direction.
        
        * scale_y (default: 0.0) - Amount to scale in y direction.
        
        * angle (default: 0.0) - The angle of rotation (radians).
        
        * dest_x (default: 0.0) - X coordinate of where the center goes.
        
        * dest_y (default: 0.0) - Y coordinate of where the center goes.
        
        Returns:
        
        * item - The transformed item.
        """
        pass

    def gimp_item_transform_flip(self, item: Gimp.Item=None, x0: float=0.0, y0: float=0.0, x1: float=0.0, y1: float=0.0) -> Gimp.Item:
        """Flip the specified item around a given line.
        
        This procedure flips the specified item.
        
        If a selection exists and the item is a drawable, the portion of the
        drawable which lies under the selection is cut from the drawable
        and made into a floating selection which is then flipped. The
        axis to flip around is specified by specifying two points from
        that line. The return value is the ID of the flipped floating
        selection.
        
        If there is no selection or the item is not a drawable, the entire item
        will be flipped around the specified axis. The return value will
        be equal to the item ID supplied as input.
        
        This procedure is affected by the following context setters:
        'gimp-context-set-interpolation',
        'gimp-context-set-transform-direction',
        'gimp-context-set-transform-resize'.
        
        Parameters:
        
        * item - The affected item.
        
        * x0 (default: 0.0) - horz. coord. of one end of axis.
        
        * y0 (default: 0.0) - vert. coord. of one end of axis.
        
        * x1 (default: 0.0) - horz. coord. of other end of axis.
        
        * y1 (default: 0.0) - vert. coord. of other end of axis.
        
        Returns:
        
        * item - The flipped item.
        """
        pass

    def gimp_item_transform_flip_simple(self, item: Gimp.Item=None, flip_type: Gimp.OrientationType=Gimp.OrientationType.HORIZONTAL, auto_center: bool=False, axis: float=0.0) -> Gimp.Item:
        """Flip the specified item either vertically or horizontally.
        
        This procedure flips the specified item.
        
        If a selection exists and the item is a drawable, the portion of the
        drawable which lies under the selection is cut from the drawable
        and made into a floating selection which is then flipped. If
        auto_center is set to TRUE, the flip is around the selection's
        center. Otherwise, the coordinate of the axis needs to be
        specified. The return value is the ID of the flipped floating
        selection.
        
        If there is no selection or the item is not a drawable, the entire item
        will be flipped around its center if auto_center is set to TRUE,
        otherwise the coordinate of the axis needs to be specified. The
        return value will be equal to the item ID supplied as input.
        
        This procedure is affected by the following context setters:
        'gimp-context-set-transform-resize'.
        
        Parameters:
        
        * item - The affected item.
        
        * flip_type (default: Gimp.OrientationType.HORIZONTAL) - Type of flip.
        
        * auto_center (default: False) - Whether to automatically position the
          axis in the selection center.
        
        * axis (default: 0.0) - coord. of flip axis.
        
        Returns:
        
        * item - The flipped item.
        """
        pass

    def gimp_item_transform_matrix(self, item: Gimp.Item=None, coeff_0_0: float=0.0, coeff_0_1: float=0.0, coeff_0_2: float=0.0, coeff_1_0: float=0.0, coeff_1_1: float=0.0, coeff_1_2: float=0.0, coeff_2_0: float=0.0, coeff_2_1: float=0.0, coeff_2_2: float=0.0) -> Gimp.Item:
        """Transform the specified item in 2d.
        
        This procedure transforms the specified item.
        
        The transformation is done by assembling a 3x3 matrix from the
        coefficients passed.
        
        If a selection exists and the item is a drawable, the portion of the
        drawable which lies under the selection is cut from the drawable
        and made into a floating selection which is then transformed as
        specified. The return value is the ID of the transformed
        floating selection.
        
        If there is no selection or the item is not a drawable, the entire item
        will be transformed according to the specified matrix. The
        return value will be equal to the item ID supplied as input.
        
        This procedure is affected by the following context setters:
        'gimp-context-set-interpolation',
        'gimp-context-set-transform-direction',
        'gimp-context-set-transform-resize'.
        
        Parameters:
        
        * item - The affected item.
        
        * coeff_0_0 (default: 0.0) - coefficient (0,0) of the transformation
          matrix.
        
        * coeff_0_1 (default: 0.0) - coefficient (0,1) of the transformation
          matrix.
        
        * coeff_0_2 (default: 0.0) - coefficient (0,2) of the transformation
          matrix.
        
        * coeff_1_0 (default: 0.0) - coefficient (1,0) of the transformation
          matrix.
        
        * coeff_1_1 (default: 0.0) - coefficient (1,1) of the transformation
          matrix.
        
        * coeff_1_2 (default: 0.0) - coefficient (1,2) of the transformation
          matrix.
        
        * coeff_2_0 (default: 0.0) - coefficient (2,0) of the transformation
          matrix.
        
        * coeff_2_1 (default: 0.0) - coefficient (2,1) of the transformation
          matrix.
        
        * coeff_2_2 (default: 0.0) - coefficient (2,2) of the transformation
          matrix.
        
        Returns:
        
        * item - The transformed item.
        """
        pass

    def gimp_item_transform_perspective(self, item: Gimp.Item=None, x0: float=0.0, y0: float=0.0, x1: float=0.0, y1: float=0.0, x2: float=0.0, y2: float=0.0, x3: float=0.0, y3: float=0.0) -> Gimp.Item:
        """Perform a possibly non-affine transformation on the specified item.
        
        This procedure performs a possibly non-affine transformation on the
        specified item by allowing the corners of the original bounding
        box to be arbitrarily remapped to any values.
        
        The 4 coordinates specify the new locations of each corner of the
        original bounding box. By specifying these values, any affine
        transformation (rotation, scaling, translation) can be affected.
        Additionally, these values can be specified such that the
        resulting transformed item will appear to have been projected
        via a perspective transform.
        
        If a selection exists and the item is a drawable, the portion of the
        drawable which lies under the selection is cut from the drawable
        and made into a floating selection which is then transformed as
        specified. The return value is the ID of the transformed
        floating selection.
        
        If there is no selection or the item is not a drawable, the entire item
        will be transformed according to the specified mapping. The
        return value will be equal to the item ID supplied as input.
        
        This procedure is affected by the following context setters:
        'gimp-context-set-interpolation',
        'gimp-context-set-transform-direction',
        'gimp-context-set-transform-resize'.
        
        Parameters:
        
        * item - The affected item.
        
        * x0 (default: 0.0) - The new x coordinate of upper-left corner of
          original bounding box.
        
        * y0 (default: 0.0) - The new y coordinate of upper-left corner of
          original bounding box.
        
        * x1 (default: 0.0) - The new x coordinate of upper-right corner of
          original bounding box.
        
        * y1 (default: 0.0) - The new y coordinate of upper-right corner of
          original bounding box.
        
        * x2 (default: 0.0) - The new x coordinate of lower-left corner of
          original bounding box.
        
        * y2 (default: 0.0) - The new y coordinate of lower-left corner of
          original bounding box.
        
        * x3 (default: 0.0) - The new x coordinate of lower-right corner of
          original bounding box.
        
        * y3 (default: 0.0) - The new y coordinate of lower-right corner of
          original bounding box.
        
        Returns:
        
        * item - The transformed item.
        """
        pass

    def gimp_item_transform_rotate(self, item: Gimp.Item=None, angle: float=0.0, auto_center: bool=False, center_x: float=0.0, center_y: float=0.0) -> Gimp.Item:
        """Rotate the specified item about given coordinates through the
        specified angle.
        
        This function rotates the specified item.
        
        If a selection exists and the item is a drawable, the portion of the
        drawable which lies under the selection is cut from the drawable
        and made into a floating selection which is then rotated by the
        specified amount. If auto_center is set to TRUE, the rotation is
        around the selection's center. Otherwise, the coordinate of the
        center point needs to be specified. The return value is the ID
        of the rotated floating selection.
        
        If there is no selection or the item is not a drawable, the entire item
        will be rotated around its center if auto_center is set to TRUE,
        otherwise the coordinate of the center point needs to be
        specified. The return value will be equal to the item ID
        supplied as input.
        
        This procedure is affected by the following context setters:
        'gimp-context-set-interpolation',
        'gimp-context-set-transform-direction',
        'gimp-context-set-transform-resize'.
        
        Parameters:
        
        * item - The affected item.
        
        * angle (default: 0.0) - The angle of rotation (radians).
        
        * auto_center (default: False) - Whether to automatically rotate
          around the selection center.
        
        * center_x (default: 0.0) - The hor. coordinate of the center of
          rotation.
        
        * center_y (default: 0.0) - The vert. coordinate of the center of
          rotation.
        
        Returns:
        
        * item - The rotated item.
        """
        pass

    def gimp_item_transform_rotate_simple(self, item: Gimp.Item=None, rotate_type: Gimp.RotationType=Gimp.RotationType.DEGREES90, auto_center: bool=False, center_x: float=0.0, center_y: float=0.0) -> Gimp.Item:
        """Rotate the specified item about given coordinates through the
        specified angle.
        
        This function rotates the specified item.
        
        If a selection exists and the item is a drawable, the portion of the
        drawable which lies under the selection is cut from the drawable
        and made into a floating selection which is then rotated by the
        specified amount. If auto_center is set to TRUE, the rotation is
        around the selection's center. Otherwise, the coordinate of the
        center point needs to be specified. The return value is the ID
        of the rotated floating selection.
        
        If there is no selection or the item is not a drawable, the entire item
        will be rotated around its center if auto_center is set to TRUE,
        otherwise the coordinate of the center point needs to be
        specified. The return value will be equal to the item ID
        supplied as input.
        
        This procedure is affected by the following context setters:
        'gimp-context-set-transform-resize'.
        
        Parameters:
        
        * item - The affected item.
        
        * rotate_type (default: Gimp.RotationType.DEGREES90) - Type of
          rotation.
        
        * auto_center (default: False) - Whether to automatically rotate
          around the selection center.
        
        * center_x (default: 0.0) - The hor. coordinate of the center of
          rotation.
        
        * center_y (default: 0.0) - The vert. coordinate of the center of
          rotation.
        
        Returns:
        
        * item - The rotated item.
        """
        pass

    def gimp_item_transform_scale(self, item: Gimp.Item=None, x0: float=0.0, y0: float=0.0, x1: float=0.0, y1: float=0.0) -> Gimp.Item:
        """Scale the specified item.
        
        This procedure scales the specified item.
        
        The 2 coordinates specify the new locations of the top-left and
        bottom-roght corners of the original bounding box.
        
        If a selection exists and the item is a drawable, the portion of the
        drawable which lies under the selection is cut from the drawable
        and made into a floating selection which is then scaled as
        specified. The return value is the ID of the scaled floating
        selection. If there is no selection or the item is not a
        drawable, the entire item will be scaled according to the
        specified coordinates. The return value will be equal to the
        item ID supplied as input.
        
        This procedure is affected by the following context setters:
        'gimp-context-set-interpolation',
        'gimp-context-set-transform-direction',
        'gimp-context-set-transform-resize'.
        
        Parameters:
        
        * item - The affected item.
        
        * x0 (default: 0.0) - The new x coordinate of the upper-left corner of
          the scaled region.
        
        * y0 (default: 0.0) - The new y coordinate of the upper-left corner of
          the scaled region.
        
        * x1 (default: 0.0) - The new x coordinate of the lower-right corner
          of the scaled region.
        
        * y1 (default: 0.0) - The new y coordinate of the lower-right corner
          of the scaled region.
        
        Returns:
        
        * item - The scaled item.
        """
        pass

    def gimp_item_transform_shear(self, item: Gimp.Item=None, shear_type: Gimp.OrientationType=Gimp.OrientationType.HORIZONTAL, magnitude: float=0.0) -> Gimp.Item:
        """Shear the specified item about its center by the specified magnitude.
        
        This procedure shears the specified item.
        
        The shear type parameter indicates whether the shear will be applied
        horizontally or vertically. The magnitude can be either positive
        or negative and indicates the extent (in pixels) to shear by.
        
        If a selection exists and the item is a drawable, the portion of the
        drawable which lies under the selection is cut from the drawable
        and made into a floating selection which is then sheared as
        specified. The return value is the ID of the sheared floating
        selection.
        
        If there is no selection or the item is not a drawable, the entire item
        will be sheared according to the specified parameters. The
        return value will be equal to the item ID supplied as input.
        
        This procedure is affected by the following context setters:
        'gimp-context-set-interpolation',
        'gimp-context-set-transform-direction',
        'gimp-context-set-transform-resize'.
        
        Parameters:
        
        * item - The affected item.
        
        * shear_type (default: Gimp.OrientationType.HORIZONTAL) - Type of
          shear.
        
        * magnitude (default: 0.0) - The magnitude of the shear.
        
        Returns:
        
        * item - The sheared item.
        """
        pass

    def gimp_item_transform_translate(self, item: Gimp.Item=None, off_x: float=0.0, off_y: float=0.0) -> Gimp.Item:
        """Translate the item by the specified offsets.
        
        This procedure translates the item by the amounts specified in the off_x
        and off_y arguments. These can be negative, and are considered
        offsets from the current position. The offsets will be rounded
        to the nearest pixel unless the item is a path.
        
        Parameters:
        
        * item - The item.
        
        * off_x (default: 0.0) - Offset in x direction.
        
        * off_y (default: 0.0) - Offset in y direction.
        
        Returns:
        
        * item - The translated item.
        """
        pass

    def gimp_layer_add_alpha(self, layer: Gimp.Layer=None):
        """Add an alpha channel to the layer if it doesn't already have one.
        
        This procedure adds an additional component to the specified layer if it
        does not already possess an alpha channel. An alpha channel
        makes it possible to clear and erase to transparency, instead of
        the background color. This transforms layers of type RGB to
        RGBA, GRAY to GRAYA, and INDEXED to INDEXEDA.
        
        Parameters:
        
        * layer - The layer.
        """
        pass

    def gimp_layer_add_mask(self, layer: Gimp.Layer=None, mask: Gimp.LayerMask=None):
        """Add a layer mask to the specified layer.
        
        This procedure adds a layer mask to the specified layer. Layer masks
        serve as an additional alpha channel for a layer. This procedure
        will fail if a number of prerequisites aren't met. The layer
        cannot already have a layer mask. The specified mask must exist
        and have the same dimensions as the layer. The layer must have
        been created for use with the specified image and the mask must
        have been created with the procedure 'gimp-layer-create-mask'.
        
        Parameters:
        
        * layer - The layer to receive the mask.
        
        * mask - The mask to add to the layer.
        """
        pass

    def gimp_layer_copy(self, layer: Gimp.Layer=None, add_alpha: bool=False) -> Gimp.Layer:
        """Copy a layer.
        
        This procedure copies the specified layer and returns the copy. The
        newly copied layer is for use within the original layer's image.
        It should not be subsequently added to any other image. The
        copied layer can optionally have an added alpha channel. This is
        useful if the background layer in an image is being copied and
        added to the same image.
        
        Parameters:
        
        * layer - The layer to copy.
        
        * add_alpha (default: False) - Add an alpha channel to the copied
          layer.
        
        Returns:
        
        * layer_copy - The newly copied layer.
        """
        pass

    def gimp_layer_create_mask(self, layer: Gimp.Layer=None, mask_type: Gimp.AddMaskType=Gimp.AddMaskType.WHITE) -> Gimp.LayerMask:
        """Create a layer mask for the specified layer.
        
        This procedure creates a layer mask for the specified layer. Layer masks
        serve as an additional alpha channel for a layer. Different
        types of masks are allowed for initialisation: - white mask
        (leaves the layer fully visible); - black mask (gives the layer
        complete transparency); - the layer's alpha channel (either a
        copy, or a transfer, which leaves the layer fully visible, but
        which may be more useful than a white mask); - the current
        selection; - a grayscale copy of the layer; - or a copy of the
        active channel.
        
        The layer mask still needs to be added to the layer. This can be done
        with a call to 'gimp-layer-add-mask'. 'gimp-layer-create-mask'
        will fail if there are no active channels on the image, when
        called with 'ADD-CHANNEL-MASK'. It will return a black mask when
        called with 'ADD-ALPHA-MASK' or 'ADD-ALPHA-TRANSFER-MASK' on a
        layer with no alpha channels, or with 'ADD-SELECTION-MASK' when
        there is no selection on the image.
        
        Parameters:
        
        * layer - The layer to which to add the mask.
        
        * mask_type (default: Gimp.AddMaskType.WHITE) - The type of mask.
        
        Returns:
        
        * mask - The newly created mask.
        """
        pass

    def gimp_layer_flatten(self, layer: Gimp.Layer=None):
        """Remove the alpha channel from the layer if it has one.
        
        This procedure removes the alpha channel from a layer, blending all
        (partially) transparent pixels in the layer against the
        background color. This transforms layers of type RGBA to RGB,
        GRAYA to GRAY, and INDEXEDA to INDEXED.
        
        Parameters:
        
        * layer - The layer.
        """
        pass

    def gimp_layer_from_mask(self, mask: Gimp.LayerMask=None) -> Gimp.Layer:
        """Get the specified mask's layer.
        
        This procedure returns the specified mask's layer , or -1 if none
        exists.
        
        Parameters:
        
        * mask - Mask for which to return the layer.
        
        Returns:
        
        * layer - The mask's layer.
        """
        pass

    def gimp_layer_get_apply_mask(self, layer: Gimp.Layer=None) -> bool:
        """Get the apply mask setting of the specified layer.
        
        This procedure returns the specified layer's apply mask setting. If the
        value is TRUE, then the layer mask for this layer is currently
        being composited with the layer's alpha channel.
        
        Parameters:
        
        * layer - The layer.
        
        Returns:
        
        * apply_mask (default: False) - The layer's apply mask setting.
        """
        pass

    def gimp_layer_get_blend_space(self, layer: Gimp.Layer=None) -> Gimp.LayerColorSpace:
        """Get the blend space of the specified layer.
        
        This procedure returns the specified layer's blend space.
        
        Parameters:
        
        * layer - The layer.
        
        Returns:
        
        * blend_space (default: Gimp.LayerColorSpace.AUTO) - The layer blend
          space.
        """
        pass

    def gimp_layer_get_composite_mode(self, layer: Gimp.Layer=None) -> Gimp.LayerCompositeMode:
        """Get the composite mode of the specified layer.
        
        This procedure returns the specified layer's composite mode.
        
        Parameters:
        
        * layer - The layer.
        
        Returns:
        
        * composite_mode (default: Gimp.LayerCompositeMode.AUTO) - The layer
          composite mode.
        """
        pass

    def gimp_layer_get_composite_space(self, layer: Gimp.Layer=None) -> Gimp.LayerColorSpace:
        """Get the composite space of the specified layer.
        
        This procedure returns the specified layer's composite space.
        
        Parameters:
        
        * layer - The layer.
        
        Returns:
        
        * composite_space (default: Gimp.LayerColorSpace.AUTO) - The layer
          composite space.
        """
        pass

    def gimp_layer_get_edit_mask(self, layer: Gimp.Layer=None) -> bool:
        """Get the edit mask setting of the specified layer.
        
        This procedure returns the specified layer's edit mask setting. If the
        value is TRUE, then the layer mask for this layer is currently
        active, and not the layer.
        
        Parameters:
        
        * layer - The layer.
        
        Returns:
        
        * edit_mask (default: False) - The layer's edit mask setting.
        """
        pass

    def gimp_layer_get_lock_alpha(self, layer: Gimp.Layer=None) -> bool:
        """Get the lock alpha channel setting of the specified layer.
        
        This procedure returns the specified layer's lock alpha channel setting.
        
        Parameters:
        
        * layer - The layer.
        
        Returns:
        
        * lock_alpha (default: False) - The layer's lock alpha channel
          setting.
        """
        pass

    def gimp_layer_get_mask(self, layer: Gimp.Layer=None) -> Gimp.LayerMask:
        """Get the specified layer's mask if it exists.
        
        This procedure returns the specified layer's mask, or -1 if none exists.
        
        Parameters:
        
        * layer - The layer.
        
        Returns:
        
        * mask - The layer mask.
        """
        pass

    def gimp_layer_get_mode(self, layer: Gimp.Layer=None) -> Gimp.LayerMode:
        """Get the combination mode of the specified layer.
        
        This procedure returns the specified layer's combination mode.
        
        Parameters:
        
        * layer - The layer.
        
        Returns:
        
        * mode (default: Gimp.LayerMode.NORMAL) - The layer combination mode.
        """
        pass

    def gimp_layer_get_opacity(self, layer: Gimp.Layer=None) -> float:
        """Get the opacity of the specified layer.
        
        This procedure returns the specified layer's opacity.
        
        Parameters:
        
        * layer - The layer.
        
        Returns:
        
        * opacity (default: 0.0) - The layer opacity.
        """
        pass

    def gimp_layer_get_show_mask(self, layer: Gimp.Layer=None) -> bool:
        """Get the show mask setting of the specified layer.
        
        This procedure returns the specified layer's show mask setting. This
        controls whether the layer or its mask is visible. TRUE
        indicates that the mask should be visible. If the layer has no
        mask, then this function returns an error.
        
        Parameters:
        
        * layer - The layer.
        
        Returns:
        
        * show_mask (default: False) - The layer's show mask setting.
        """
        pass

    def gimp_layer_is_floating_sel(self, layer: Gimp.Layer=None) -> bool:
        """Is the specified layer a floating selection?.
        
        This procedure returns whether the layer is a floating selection.
        Floating selections are special cases of layers which are
        attached to a specific drawable.
        
        Parameters:
        
        * layer - The layer.
        
        Returns:
        
        * is_floating_sel (default: False) - TRUE if the layer is a floating
          selection.
        """
        pass

    def gimp_layer_new(self, image: Gimp.Image=None, width: int=1, height: int=1, type: Gimp.ImageType=Gimp.ImageType.RGB_IMAGE, name: str=None, opacity: float=0.0, mode: Gimp.LayerMode=Gimp.LayerMode.NORMAL) -> Gimp.Layer:
        """Create a new layer.
        
        This procedure creates a new layer with the specified width, height, and
        type. If @name is %NULL, a default layer name will be used.
        Opacity, and mode are also supplied parameters. The new layer
        still needs to be added to the image, as this is not automatic.
        Add the new layer with the 'gimp-image-insert-layer' command.
        Other attributes such as layer mask modes, and offsets should be
        set with explicit procedure calls.
        
        Parameters:
        
        * image - The image to which to add the layer.
        
        * width (default: 1) - The layer width.
        
        * height (default: 1) - The layer height.
        
        * type (default: Gimp.ImageType.RGB_IMAGE) - The layer type.
        
        * name - The layer name.
        
        * opacity (default: 0.0) - The layer opacity.
        
        * mode (default: Gimp.LayerMode.NORMAL) - The layer combination mode.
        
        Returns:
        
        * layer - The newly created layer.
        """
        pass

    def gimp_layer_new_from_drawable(self, drawable: Gimp.Drawable=None, dest_image: Gimp.Image=None) -> Gimp.Layer:
        """Create a new layer by copying an existing drawable.
        
        This procedure creates a new layer as a copy of the specified drawable.
        The new layer still needs to be added to the image, as this is
        not automatic. Add the new layer with the
        'gimp-image-insert-layer' command. Other attributes such as
        layer mask modes, and offsets should be set with explicit
        procedure calls.
        
        Parameters:
        
        * drawable - The source drawable from where the new layer is copied.
        
        * dest_image - The destination image to which to add the layer.
        
        Returns:
        
        * layer_copy - The newly copied layer.
        """
        pass

    def gimp_layer_new_from_visible(self, image: Gimp.Image=None, dest_image: Gimp.Image=None, name: str=None) -> Gimp.Layer:
        """Create a new layer from what is visible in an image.
        
        This procedure creates a new layer from what is visible in the given
        image. The new layer still needs to be added to the destination
        image, as this is not automatic. Add the new layer with the
        'gimp-image-insert-layer' command. Other attributes such as
        layer mask modes, and offsets should be set with explicit
        procedure calls.
        
        Parameters:
        
        * image - The source image from where the content is copied.
        
        * dest_image - The destination image to which to add the layer.
        
        * name - The layer name.
        
        Returns:
        
        * layer - The newly created layer.
        """
        pass

    def gimp_layer_remove_mask(self, layer: Gimp.Layer=None, mode: Gimp.MaskApplyMode=Gimp.MaskApplyMode.APPLY):
        """Remove the specified layer mask from the layer.
        
        This procedure removes the specified layer mask from the layer. If the
        mask doesn't exist, an error is returned.
        
        Parameters:
        
        * layer - The layer from which to remove mask.
        
        * mode (default: Gimp.MaskApplyMode.APPLY) - Removal mode.
        """
        pass

    def gimp_layer_resize(self, layer: Gimp.Layer=None, new_width: int=1, new_height: int=1, offx: int=0, offy: int=0):
        """Resize the layer to the specified extents.
        
        This procedure resizes the layer so that its new width and height are
        equal to the supplied parameters. Offsets are also provided
        which describe the position of the previous layer's content.
        This operation only works if the layer has been added to an
        image.
        
        Parameters:
        
        * layer - The layer.
        
        * new_width (default: 1) - New layer width.
        
        * new_height (default: 1) - New layer height.
        
        * offx (default: 0) - x offset between upper left corner of old and
          new layers: (old - new).
        
        * offy (default: 0) - y offset between upper left corner of old and
          new layers: (old - new).
        """
        pass

    def gimp_layer_resize_to_image_size(self, layer: Gimp.Layer=None):
        """Resize a layer to the image size.
        
        This procedure resizes the layer so that it's new width and height are
        equal to the width and height of its image container.
        
        Parameters:
        
        * layer - The layer to resize.
        """
        pass

    def gimp_layer_scale(self, layer: Gimp.Layer=None, new_width: int=1, new_height: int=1, local_origin: bool=False):
        """Scale the layer using the default interpolation method.
        
        This procedure scales the layer so that its new width and height are
        equal to the supplied parameters. The 'local-origin' parameter
        specifies whether to scale from the center of the layer, or from
        the image origin. This operation only works if the layer has
        been added to an image. The interpolation method used can be set
        with 'gimp-context-set-interpolation'.
        
        Parameters:
        
        * layer - The layer.
        
        * new_width (default: 1) - New layer width.
        
        * new_height (default: 1) - New layer height.
        
        * local_origin (default: False) - Use a local origin (as opposed to
          the image origin).
        """
        pass

    def gimp_layer_set_apply_mask(self, layer: Gimp.Layer=None, apply_mask: bool=False):
        """Set the apply mask setting of the specified layer.
        
        This procedure sets the specified layer's apply mask setting. This
        controls whether the layer's mask is currently affecting the
        alpha channel. If there is no layer mask, this function will
        return an error.
        
        Parameters:
        
        * layer - The layer.
        
        * apply_mask (default: False) - The new layer's apply mask setting.
        """
        pass

    def gimp_layer_set_blend_space(self, layer: Gimp.Layer=None, blend_space: Gimp.LayerColorSpace=Gimp.LayerColorSpace.AUTO):
        """Set the blend space of the specified layer.
        
        This procedure sets the specified layer's blend space.
        
        Parameters:
        
        * layer - The layer.
        
        * blend_space (default: Gimp.LayerColorSpace.AUTO) - The new layer
          blend space.
        """
        pass

    def gimp_layer_set_composite_mode(self, layer: Gimp.Layer=None, composite_mode: Gimp.LayerCompositeMode=Gimp.LayerCompositeMode.AUTO):
        """Set the composite mode of the specified layer.
        
        This procedure sets the specified layer's composite mode.
        
        Parameters:
        
        * layer - The layer.
        
        * composite_mode (default: Gimp.LayerCompositeMode.AUTO) - The new
          layer composite mode.
        """
        pass

    def gimp_layer_set_composite_space(self, layer: Gimp.Layer=None, composite_space: Gimp.LayerColorSpace=Gimp.LayerColorSpace.AUTO):
        """Set the composite space of the specified layer.
        
        This procedure sets the specified layer's composite space.
        
        Parameters:
        
        * layer - The layer.
        
        * composite_space (default: Gimp.LayerColorSpace.AUTO) - The new layer
          composite space.
        """
        pass

    def gimp_layer_set_edit_mask(self, layer: Gimp.Layer=None, edit_mask: bool=False):
        """Set the edit mask setting of the specified layer.
        
        This procedure sets the specified layer's edit mask setting. This
        controls whether the layer or it's mask is currently active for
        editing. If the specified layer has no layer mask, then this
        procedure will return an error.
        
        Parameters:
        
        * layer - The layer.
        
        * edit_mask (default: False) - The new layer's edit mask setting.
        """
        pass

    def gimp_layer_set_lock_alpha(self, layer: Gimp.Layer=None, lock_alpha: bool=False):
        """Set the lock alpha channel setting of the specified layer.
        
        This procedure sets the specified layer's lock alpha channel setting.
        
        Parameters:
        
        * layer - The layer.
        
        * lock_alpha (default: False) - The new layer's lock alpha channel
          setting.
        """
        pass

    def gimp_layer_set_mode(self, layer: Gimp.Layer=None, mode: Gimp.LayerMode=Gimp.LayerMode.NORMAL):
        """Set the combination mode of the specified layer.
        
        This procedure sets the specified layer's combination mode.
        
        Parameters:
        
        * layer - The layer.
        
        * mode (default: Gimp.LayerMode.NORMAL) - The new layer combination
          mode.
        """
        pass

    def gimp_layer_set_offsets(self, layer: Gimp.Layer=None, offx: int=0, offy: int=0):
        """Set the layer offsets.
        
        This procedure sets the offsets for the specified layer. The offsets are
        relative to the image origin and can be any values. This
        operation is valid only on layers which have been added to an
        image.
        
        Parameters:
        
        * layer - The layer.
        
        * offx (default: 0) - Offset in x direction.
        
        * offy (default: 0) - Offset in y direction.
        """
        pass

    def gimp_layer_set_opacity(self, layer: Gimp.Layer=None, opacity: float=0.0):
        """Set the opacity of the specified layer.
        
        This procedure sets the specified layer's opacity.
        
        Parameters:
        
        * layer - The layer.
        
        * opacity (default: 0.0) - The new layer opacity.
        """
        pass

    def gimp_layer_set_show_mask(self, layer: Gimp.Layer=None, show_mask: bool=False):
        """Set the show mask setting of the specified layer.
        
        This procedure sets the specified layer's show mask setting. This
        controls whether the layer or its mask is visible. TRUE
        indicates that the mask should be visible. If there is no layer
        mask, this function will return an error.
        
        Parameters:
        
        * layer - The layer.
        
        * show_mask (default: False) - The new layer's show mask setting.
        """
        pass

    def gimp_message(self, message: str=None):
        """Displays a dialog box with a message.
        
        Displays a dialog box with a message. Useful for status or error
        reporting. The message must be in UTF-8 encoding.
        
        Parameters:
        
        * message - Message to display in the dialog.
        """
        pass

    def gimp_message_get_handler(self) -> Gimp.MessageHandlerType:
        """Returns the current state of where warning messages are displayed.
        
        This procedure returns the way g_message warnings are displayed. They
        can be shown in a dialog box or printed on the console where
        gimp was started.
        
        Returns:
        
        * handler (default: Gimp.MessageHandlerType.MESSAGE_BOX) - The current
          handler type.
        """
        pass

    def gimp_message_set_handler(self, handler: Gimp.MessageHandlerType=Gimp.MessageHandlerType.MESSAGE_BOX):
        """Controls where warning messages are displayed.
        
        This procedure controls how g_message warnings are displayed. They can
        be shown in a dialog box or printed on the console where gimp
        was started.
        
        Parameters:
        
        * handler (default: Gimp.MessageHandlerType.MESSAGE_BOX) - The new
          handler type.
        """
        pass

    def gimp_online_bugs_features(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE):
        """Bookmark to the bug tracker of GIMP.
        
        Menu label: _Bug Reports and Feature Requests
        Menu path: <Image>/Help/GIMP Online
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        """
        pass

    def gimp_online_developer_web_site(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE):
        """Bookmark to the GIMP web site.
        
        Menu label: _Developer Web Site
        Menu path: <Image>/Help/GIMP Online
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        """
        pass

    def gimp_online_docs_web_site(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE):
        """Bookmark to the GIMP web site.
        
        Menu label: _User Manual Web Site
        Menu path: <Image>/Help/GIMP Online
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        """
        pass

    def gimp_online_main_web_site(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE):
        """Bookmark to the GIMP web site.
        
        Menu label: _Main Web Site
        Menu path: <Image>/Help/GIMP Online
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        """
        pass

    def gimp_online_roadmap(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE):
        """Bookmark to the roadmaps of GIMP.
        
        Menu label: _Roadmaps
        Menu path: <Image>/Help/GIMP Online
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        """
        pass

    def gimp_paintbrush(self, drawable: Gimp.Drawable=None, fade_out: float=0.0, strokes: Gimp.DoubleArray=None, method: Gimp.PaintApplicationMode=Gimp.PaintApplicationMode.CONSTANT, gradient_length: float=0.0):
        """Paint in the current brush with optional fade out parameter and pull
        colors from a gradient.
        
        This tool is the standard paintbrush. It draws linearly interpolated
        lines through the specified stroke coordinates. It operates on
        the specified drawable in the foreground color with the active
        brush. The 'fade-out' parameter is measured in pixels and allows
        the brush stroke to linearly fall off. The pressure is set to
        the maximum at the beginning of the stroke. As the distance of
        the stroke nears the fade-out value, the pressure will approach
        zero. The gradient-length is the distance to spread the gradient
        over. It is measured in pixels. If the gradient-length is 0, no
        gradient is used.
        
        Parameters:
        
        * drawable - The affected drawable.
        
        * fade_out (default: 0.0) - Fade out parameter.
        
        * strokes - Array of stroke coordinates: { s1.x, s1.y, s2.x, s2.y,
          ..., sn.x, sn.y }.
        
        * method (default: Gimp.PaintApplicationMode.CONSTANT) - The paint
          method to use.
        
        * gradient_length (default: 0.0) - Length of gradient to draw.
        """
        pass

    def gimp_paintbrush_default(self, drawable: Gimp.Drawable=None, strokes: Gimp.DoubleArray=None):
        """Paint in the current brush. The fade out parameter and pull colors
        from a gradient parameter are set from the paintbrush options
        dialog. If this dialog has not been activated then the dialog
        defaults will be used.
        
        This tool is similar to the standard paintbrush. It draws linearly
        interpolated lines through the specified stroke coordinates. It
        operates on the specified drawable in the foreground color with
        the active brush. The 'fade-out' parameter is measured in pixels
        and allows the brush stroke to linearly fall off (value obtained
        from the option dialog). The pressure is set to the maximum at
        the beginning of the stroke. As the distance of the stroke nears
        the fade-out value, the pressure will approach zero. The
        gradient-length (value obtained from the option dialog) is the
        distance to spread the gradient over. It is measured in pixels.
        If the gradient-length is 0, no gradient is used.
        
        Parameters:
        
        * drawable - The affected drawable.
        
        * strokes - Array of stroke coordinates: { s1.x, s1.y, s2.x, s2.y,
          ..., sn.x, sn.y }.
        """
        pass

    def gimp_palette_add_entry(self, palette: Gimp.Palette=None, entry_name: str=None, color: Gegl.Color=None) -> int:
        """Appends an entry to the palette.
        
        Appends an entry to the palette. Neither color nor name must be unique
        within the palette. When name is the empty string, this sets the
        entry name to "Untitled". Returns the index of the entry.
        Returns an error when palette is not editable.
        
        Parameters:
        
        * palette - The palette.
        
        * entry_name - A name for the entry.
        
        * color - The color for the added entry.
        
        Returns:
        
        * entry_num (default: 0) - The index of the added entry.
        """
        pass

    def gimp_palette_delete_entry(self, palette: Gimp.Palette=None, entry_num: int=0):
        """Deletes an entry from the palette.
        
        This function will fail and return %FALSE if the index is out or range
        or if the palette is not editable. Additionally if the palette
        belongs to an indexed image, it will only be possible to delete
        palette colors not in use in the image.
        
        Parameters:
        
        * palette - The palette.
        
        * entry_num (default: 0) - The index of the entry to delete.
        """
        pass

    def gimp_palette_export_css(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, dirname: Gio.File=None, string: str='palette.css'):
        """Export the active palette as a CSS stylesheet with the color entry
        name as their class name, and the color itself as the color
        attribute.
        
        Menu label: _CSS stylesheet...
        Menu path: <Palettes>/Palettes Menu/Export as
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * dirname - Folder for the output file.
        
        * string (default: palette.css) - The name of the file to create (if a
          file with this name already exist, it will be replaced).
        """
        pass

    def gimp_palette_export_java(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, dirname: Gio.File=None, string: str='palette.java'):
        """Export the active palette as a
        java.util.Hashtable&lt;String,Color&gt;.
        
        Menu label: J_ava map...
        Menu path: <Palettes>/Palettes Menu/Export as
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * dirname - Folder for the output file.
        
        * string (default: palette.java) - The name of the file to create (if
          a file with this name already exist, it will be replaced).
        """
        pass

    def gimp_palette_export_php(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, dirname: Gio.File=None, string: str='palette.php'):
        """Export the active palette as a PHP dictionary (name => color).
        
        Menu label: P_HP dictionary...
        Menu path: <Palettes>/Palettes Menu/Export as
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * dirname - Folder for the output file.
        
        * string (default: palette.php) - The name of the file to create (if a
          file with this name already exist, it will be replaced).
        """
        pass

    def gimp_palette_export_python(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, dirname: Gio.File=None, string: str='palette.py'):
        """Export the active palette as a Python dictionary (name: color).
        
        Menu label: _Python dictionary...
        Menu path: <Palettes>/Palettes Menu/Export as
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * dirname - Folder for the output file.
        
        * string (default: palette.py) - The name of the file to create (if a
          file with this name already exist, it will be replaced).
        """
        pass

    def gimp_palette_export_text(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, dirname: Gio.File=None, string: str='palette.txt'):
        """Write all the colors in a palette to a text file, one hexadecimal
        value per line (no names).
        
        Menu label: _Text file...
        Menu path: <Palettes>/Palettes Menu/Export as
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * dirname - Folder for the output file.
        
        * string (default: palette.txt) - The name of the file to create (if a
          file with this name already exist, it will be replaced).
        """
        pass

    def gimp_palette_get_by_name(self, name: str=None) -> Gimp.Palette:
        """Returns the palette with the given name.
        
        Returns an existing palette having the given name. Returns %NULL when no
        palette exists of that name.
        
        Parameters:
        
        * name - The name of the palette.
        
        Returns:
        
        * palette - The palette.
        """
        pass

    def gimp_palette_get_bytes(self, palette: Gimp.Palette=None, format: GObject.Value=None) -> Tuple[GLib.Bytes, int]:
        """Returns the palette's colormap.
        
        This procedure returns a palette's colormap as a bytes array with all
        colors converted to a given Babl @format. The byte-size of the
        returned colormap depends on the number of colors and on the
        bytes-per-pixel size of @format. E.g. that the following
        equality is ensured:
        
        ```C g_bytes_get_size (colormap) == num_colors *
        babl_format_get_bytes_per_pixel (format) ```.
        
        Parameters:
        
        * palette - The palette.
        
        * format - The desired color format.
        
        Returns:
        
        * colormap - The image's colormap.
        
        * num_colors (default: 0) - The number of colors in the palette.
        """
        pass

    def gimp_palette_get_color_count(self, palette: Gimp.Palette=None) -> int:
        """Get the count of colors in the palette.
        
        Returns the number of colors in the palette.
        
        Parameters:
        
        * palette - The palette.
        
        Returns:
        
        * num_colors (default: 0) - The number of colors in the palette.
        """
        pass

    def gimp_palette_get_colors(self, palette: Gimp.Palette=None) -> Any:
        """Gets colors in the palette.
        
        Returns an array of colors in the palette. Free the returned array with
        'gimp-color-array-free'.
        
        Parameters:
        
        * palette - The palette.
        
        Returns:
        
        * colors - The colors in the palette.
        """
        pass

    def gimp_palette_get_columns(self, palette: Gimp.Palette=None) -> int:
        """Gets the number of columns used to display the palette.
        
        Gets the preferred number of columns to display the palette.
        
        Parameters:
        
        * palette - The palette.
        
        Returns:
        
        * num_columns (default: 0) - The number of columns used to display
          this palette.
        """
        pass

    def gimp_palette_get_entry_color(self, palette: Gimp.Palette=None, entry_num: int=0) -> Gegl.Color:
        """Gets the color of an entry in the palette.
        
        Returns the color of the entry at the given zero-based index into the
        palette. Returns %NULL when the index is out of range.
        
        Parameters:
        
        * palette - The palette.
        
        * entry_num (default: 0) - The index of the entry to get the color of.
        
        Returns:
        
        * color - The color at the index.
        """
        pass

    def gimp_palette_get_entry_name(self, palette: Gimp.Palette=None, entry_num: int=0) -> str:
        """Gets the name of an entry in the palette.
        
        Gets the name of the entry at the zero-based index into the palette.
        Returns an error when the index is out of range.
        
        Parameters:
        
        * palette - The palette.
        
        * entry_num (default: 0) - The entry to get.
        
        Returns:
        
        * entry_name - The name of the entry.
        """
        pass

    def gimp_palette_new(self, name: str=None) -> Gimp.Palette:
        """Creates a new palette.
        
        Creates a new palette. The new palette has no color entries. You must
        add color entries for a user to choose. The actual name might be
        different than the requested name, when the requested name is
        already in use.
        
        Parameters:
        
        * name - The requested name of the new palette.
        
        Returns:
        
        * palette - The palette.
        """
        pass

    def gimp_palette_set_bytes(self, palette: Gimp.Palette=None, format: GObject.Value=None, colormap: GLib.Bytes=None):
        """Sets the entries in the image's colormap.
        
        This procedure sets the entries in the specified palette in one go. The
        number of entries depens on the size of @colormap and the
        bytes-per-pixel size of @format. The procedure will fail if the
        size of @colormap is not an exact multiple of the number of
        bytes per pixel of @format.
        
        Parameters:
        
        * palette - The palette.
        
        * format - The desired color format.
        
        * colormap - The new colormap values.
        """
        pass

    def gimp_palette_set_columns(self, palette: Gimp.Palette=None, columns: int=0):
        """Sets the number of columns used to display the palette.
        
        Set the number of colors shown per row when the palette is displayed.
        Returns an error when the palette is not editable. The maximum
        allowed value is 64.
        
        Parameters:
        
        * palette - The palette.
        
        * columns (default: 0) - The new number of columns.
        """
        pass

    def gimp_palette_set_entry_color(self, palette: Gimp.Palette=None, entry_num: int=0, color: Gegl.Color=None):
        """Sets the color of an entry in the palette.
        
        Sets the color of the entry at the zero-based index into the palette.
        Returns an error when the index is out of range. Returns an
        error when the palette is not editable.
        
        Parameters:
        
        * palette - The palette.
        
        * entry_num (default: 0) - The entry to get.
        
        * color - The new color.
        """
        pass

    def gimp_palette_set_entry_name(self, palette: Gimp.Palette=None, entry_num: int=0, entry_name: str=None):
        """Sets the name of an entry in the palette.
        
        Sets the name of the entry at the zero-based index into the palette.
        Returns an error if the index is out or range. Returns an error
        if the palette is not editable.
        
        Parameters:
        
        * palette - The palette.
        
        * entry_num (default: 0) - The entry to get.
        
        * entry_name - The new name.
        """
        pass

    def gimp_palettes_close_popup(self, palette_callback: str=None):
        """Close the palette selection dialog.
        
        Closes an open palette selection dialog.
        
        Parameters:
        
        * palette_callback - The name of the callback registered for this
          pop-up.
        """
        pass

    def gimp_palettes_get_list(self, filter: str=None) -> Any:
        """Retrieves a list of all of the available palettes.
        
        This procedure returns a complete listing of available palettes. Each
        palette returned can be used as input to
        [func@Gimp.context_set_palette].
        
        Parameters:
        
        * filter - An optional regular expression used to filter the list.
        
        Returns:
        
        * palette_list - The list of palettes.
        """
        pass

    def gimp_palettes_popup(self, palette_callback: str=None, popup_title: str=None, initial_palette: Gimp.Palette=None, parent_window: GLib.Bytes=None):
        """Invokes the Gimp palette selection dialog.
        
        Opens a dialog letting a user choose a palette.
        
        Parameters:
        
        * palette_callback - The callback PDB proc to call when user chooses a
          palette.
        
        * popup_title - Title of the palette selection dialog.
        
        * initial_palette - The palette to set as the initial choice.
        
        * parent_window - An optional parent window handle for the popup to be
          set transient to.
        """
        pass

    def gimp_palettes_refresh(self):
        """Refreshes current palettes. This function always succeeds.
        
        This procedure retrieves all palettes currently in the user's palette
        path and updates the palette dialogs accordingly.
        """
        pass

    def gimp_palettes_set_popup(self, palette_callback: str=None, palette: Gimp.Palette=None):
        """Sets the current palette in a palette selection dialog.
        
        Sets the current palette in a palette selection dialog.
        
        Parameters:
        
        * palette_callback - The name of the callback registered for this
          pop-up.
        
        * palette - The palette to set as selected.
        """
        pass

    def gimp_path_bezier_stroke_conicto(self, path: Gimp.Path=None, stroke_id: int=0, x0: float=0.0, y0: float=0.0, x1: float=0.0, y1: float=0.0):
        """Extends a bezier stroke with a conic bezier spline.
        
        Extends a bezier stroke with a conic bezier spline. Actually a cubic
        bezier spline gets added that realizes the shape of a conic
        bezier spline.
        
        Parameters:
        
        * path - The path object.
        
        * stroke_id (default: 0) - The stroke ID.
        
        * x0 (default: 0.0) - The x-coordinate of the control point.
        
        * y0 (default: 0.0) - The y-coordinate of the control point.
        
        * x1 (default: 0.0) - The x-coordinate of the end point.
        
        * y1 (default: 0.0) - The y-coordinate of the end point.
        """
        pass

    def gimp_path_bezier_stroke_cubicto(self, path: Gimp.Path=None, stroke_id: int=0, x0: float=0.0, y0: float=0.0, x1: float=0.0, y1: float=0.0, x2: float=0.0, y2: float=0.0):
        """Extends a bezier stroke with a cubic bezier spline.
        
        Extends a bezier stroke with a cubic bezier spline.
        
        Parameters:
        
        * path - The path object.
        
        * stroke_id (default: 0) - The stroke ID.
        
        * x0 (default: 0.0) - The x-coordinate of the first control point.
        
        * y0 (default: 0.0) - The y-coordinate of the first control point.
        
        * x1 (default: 0.0) - The x-coordinate of the second control point.
        
        * y1 (default: 0.0) - The y-coordinate of the second control point.
        
        * x2 (default: 0.0) - The x-coordinate of the end point.
        
        * y2 (default: 0.0) - The y-coordinate of the end point.
        """
        pass

    def gimp_path_bezier_stroke_lineto(self, path: Gimp.Path=None, stroke_id: int=0, x0: float=0.0, y0: float=0.0):
        """Extends a bezier stroke with a lineto.
        
        Extends a bezier stroke with a lineto.
        
        Parameters:
        
        * path - The path object.
        
        * stroke_id (default: 0) - The stroke ID.
        
        * x0 (default: 0.0) - The x-coordinate of the lineto.
        
        * y0 (default: 0.0) - The y-coordinate of the lineto.
        """
        pass

    def gimp_path_bezier_stroke_new_ellipse(self, path: Gimp.Path=None, x0: float=0.0, y0: float=0.0, radius_x: float=0.0, radius_y: float=0.0, angle: float=0.0) -> int:
        """Adds a bezier stroke describing an ellipse the path object.
        
        Adds a bezier stroke describing an ellipse on the path object.
        
        Parameters:
        
        * path - The path object.
        
        * x0 (default: 0.0) - The x-coordinate of the center.
        
        * y0 (default: 0.0) - The y-coordinate of the center.
        
        * radius_x (default: 0.0) - The radius in x direction.
        
        * radius_y (default: 0.0) - The radius in y direction.
        
        * angle (default: 0.0) - The angle the x-axis of the ellipse (radians,
          counterclockwise).
        
        Returns:
        
        * stroke_id (default: 0) - The resulting stroke.
        """
        pass

    def gimp_path_bezier_stroke_new_moveto(self, path: Gimp.Path=None, x0: float=0.0, y0: float=0.0) -> int:
        """Adds a bezier stroke with a single moveto to the path object.
        
        Adds a bezier stroke with a single moveto to the path object.
        
        Parameters:
        
        * path - The path object.
        
        * x0 (default: 0.0) - The x-coordinate of the moveto.
        
        * y0 (default: 0.0) - The y-coordinate of the moveto.
        
        Returns:
        
        * stroke_id (default: 0) - The resulting stroke.
        """
        pass

    def gimp_path_copy(self, path: Gimp.Path=None) -> Gimp.Path:
        """Copy a path object.
        
        This procedure copies the specified path object and returns the copy.
        
        Parameters:
        
        * path - The path object to copy.
        
        Returns:
        
        * path_copy - The newly copied path object.
        """
        pass

    def gimp_path_get_strokes(self, path: Gimp.Path=None) -> Gimp.Int32Array:
        """List the strokes associated with the passed path.
        
        Returns an Array with the stroke-IDs associated with the passed path.
        
        Parameters:
        
        * path - The path object.
        
        Returns:
        
        * stroke_ids - List of the strokes belonging to the path.
        """
        pass

    def gimp_path_new(self, image: Gimp.Image=None, name: str=None) -> Gimp.Path:
        """Creates a new empty path object.
        
        Creates a new empty path object. The path object needs to be added to
        the image using 'gimp-image-insert-path'.
        
        Parameters:
        
        * image - The image.
        
        * name - the name of the new path object.
        
        Returns:
        
        * path - the current path object, 0 if no path exists in the image.
        """
        pass

    def gimp_path_new_from_text_layer(self, image: Gimp.Image=None, layer: Gimp.Layer=None) -> Gimp.Path:
        """Creates a new path object from a text layer.
        
        Creates a new path object from a text layer. The path object needs to be
        added to the image using 'gimp-image-insert-path'.
        
        Parameters:
        
        * image - The image.
        
        * layer - The text layer.
        
        Returns:
        
        * path - The path of the text layer.
        """
        pass

    def gimp_path_remove_stroke(self, path: Gimp.Path=None, stroke_id: int=0):
        """Remove the stroke from a path object.
        
        Remove the stroke from a path object.
        
        Parameters:
        
        * path - The path object.
        
        * stroke_id (default: 0) - The stroke ID.
        """
        pass

    def gimp_path_stroke_close(self, path: Gimp.Path=None, stroke_id: int=0):
        """Closes the specified stroke.
        
        Closes the specified stroke.
        
        Parameters:
        
        * path - The path object.
        
        * stroke_id (default: 0) - The stroke ID.
        """
        pass

    def gimp_path_stroke_flip(self, path: Gimp.Path=None, stroke_id: int=0, flip_type: Gimp.OrientationType=Gimp.OrientationType.HORIZONTAL, axis: float=0.0):
        """Flips the given stroke.
        
        Rotates the given stroke around given center by angle (in degrees).
        
        Parameters:
        
        * path - The path object.
        
        * stroke_id (default: 0) - The stroke ID.
        
        * flip_type (default: Gimp.OrientationType.HORIZONTAL) - Flip
          orientation, either vertical or horizontal.
        
        * axis (default: 0.0) - axis coordinate about which to flip, in
          pixels.
        """
        pass

    def gimp_path_stroke_flip_free(self, path: Gimp.Path=None, stroke_id: int=0, x1: float=0.0, y1: float=0.0, x2: float=0.0, y2: float=0.0):
        """Flips the given stroke about an arbitrary axis.
        
        Flips the given stroke about an arbitrary axis. Axis is defined by two
        coordinates in the image (in pixels), through which the flipping
        axis passes.
        
        Parameters:
        
        * path - The path object.
        
        * stroke_id (default: 0) - The stroke ID.
        
        * x1 (default: 0.0) - X coordinate of the first point of the flipping
          axis.
        
        * y1 (default: 0.0) - Y coordinate of the first point of the flipping
          axis.
        
        * x2 (default: 0.0) - X coordinate of the second point of the flipping
          axis.
        
        * y2 (default: 0.0) - Y coordinate of the second point of the flipping
          axis.
        """
        pass

    def gimp_path_stroke_get_length(self, path: Gimp.Path=None, stroke_id: int=0, precision: float=0.1) -> float:
        """Measure the length of the given stroke.
        
        Measure the length of the given stroke.
        
        Parameters:
        
        * path - The path object.
        
        * stroke_id (default: 0) - The stroke ID.
        
        * precision (default: 0.1) - The precision used for approximating
          straight portions of the stroke.
        
        Returns:
        
        * length (default: 0.0) - The length (in pixels) of the given stroke.
        """
        pass

    def gimp_path_stroke_get_point_at_dist(self, path: Gimp.Path=None, stroke_id: int=0, dist: float=0.0, precision: float=0.0) -> Tuple[float, float, float, bool]:
        """Get point at a specified distance along the stroke.
        
        This will return the x,y position of a point at a given distance along
        the stroke. The distance will be obtained by first digitizing
        the curve internally and then walking along the curve. For a
        closed stroke the start of the path is the first point on the
        path that was created. This might not be obvious. If the stroke
        is not long enough, a "valid" flag will be FALSE.
        
        Parameters:
        
        * path - The path object.
        
        * stroke_id (default: 0) - The stroke ID.
        
        * dist (default: 0.0) - The given distance.
        
        * precision (default: 0.0) - The precision used for the approximation.
        
        Returns:
        
        * x_point (default: 0.0) - The x position of the point.
        
        * y_point (default: 0.0) - The y position of the point.
        
        * slope (default: 0.0) - The slope (dy / dx) at the specified point.
        
        * valid (default: False) - Indicator for the validity of the returned
          data.
        """
        pass

    def gimp_path_stroke_get_points(self, path: Gimp.Path=None, stroke_id: int=0) -> Tuple[Gimp.PathStrokeType, Gimp.DoubleArray, bool]:
        """Returns the control points of a stroke.
        
        Returns the control points of a stroke. The interpretation of the
        coordinates returned depends on the type of the stroke. For Gimp
        2.4 this is always a bezier stroke, where the coordinates are
        the control points.
        
        Parameters:
        
        * path - The path object.
        
        * stroke_id (default: 0) - The stroke ID.
        
        Returns:
        
        * type (default: Gimp.PathStrokeType.BEZIER) - type of the stroke
          (always GIMP_PATH_STROKE_TYPE_BEZIER for now).
        
        * controlpoints - List of the control points for the stroke (x0, y0,
          x1, y1, ...).
        
        * closed (default: False) - Whether the stroke is closed or not.
        """
        pass

    def gimp_path_stroke_interpolate(self, path: Gimp.Path=None, stroke_id: int=0, precision: float=0.0) -> Tuple[Gimp.DoubleArray, bool]:
        """Returns polygonal approximation of the stroke.
        
        Returns polygonal approximation of the stroke.
        
        Parameters:
        
        * path - The path object.
        
        * stroke_id (default: 0) - The stroke ID.
        
        * precision (default: 0.0) - The precision used for the approximation.
        
        Returns:
        
        * coords - List of the coords along the path (x0, y0, x1, y1, ...).
        
        * closed (default: False) - Whether the stroke is closed or not.
        """
        pass

    def gimp_path_stroke_new_from_points(self, path: Gimp.Path=None, type: Gimp.PathStrokeType=Gimp.PathStrokeType.BEZIER, controlpoints: Gimp.DoubleArray=None, closed: bool=False) -> int:
        """Adds a stroke of a given type to the path object.
        
        Adds a stroke of a given type to the path object. The coordinates of the
        control points can be specified. For now only strokes of the
        type GIMP_PATH_STROKE_TYPE_BEZIER are supported. The control
        points are specified as a pair of double values for the x- and
        y-coordinate. The Bezier stroke type needs a multiple of three
        control points. Each Bezier segment endpoint (anchor, A) has two
        additional control points (C) associated. They are specified in
        the order CACCACCAC...
        
        Parameters:
        
        * path - The path object.
        
        * type (default: Gimp.PathStrokeType.BEZIER) - type of the stroke
          (always GIMP_PATH_STROKE_TYPE_BEZIER for now).
        
        * controlpoints - List of the x- and y-coordinates of the control
          points.
        
        * closed (default: False) - Whether the stroke is to be closed or not.
        
        Returns:
        
        * stroke_id (default: 0) - The stroke ID of the newly created stroke.
        """
        pass

    def gimp_path_stroke_reverse(self, path: Gimp.Path=None, stroke_id: int=0):
        """Reverses the specified stroke.
        
        Reverses the specified stroke.
        
        Parameters:
        
        * path - The path object.
        
        * stroke_id (default: 0) - The stroke ID.
        """
        pass

    def gimp_path_stroke_rotate(self, path: Gimp.Path=None, stroke_id: int=0, center_x: float=0.0, center_y: float=0.0, angle: float=0.0):
        """Rotates the given stroke.
        
        Rotates the given stroke around given center by angle (in degrees).
        
        Parameters:
        
        * path - The path object.
        
        * stroke_id (default: 0) - The stroke ID.
        
        * center_x (default: 0.0) - X coordinate of the rotation center.
        
        * center_y (default: 0.0) - Y coordinate of the rotation center.
        
        * angle (default: 0.0) - angle to rotate about.
        """
        pass

    def gimp_path_stroke_scale(self, path: Gimp.Path=None, stroke_id: int=0, scale_x: float=0.0, scale_y: float=0.0):
        """Scales the given stroke.
        
        Scale the given stroke.
        
        Parameters:
        
        * path - The path object.
        
        * stroke_id (default: 0) - The stroke ID.
        
        * scale_x (default: 0.0) - Scale factor in x direction.
        
        * scale_y (default: 0.0) - Scale factor in y direction.
        """
        pass

    def gimp_path_stroke_translate(self, path: Gimp.Path=None, stroke_id: int=0, off_x: float=0.0, off_y: float=0.0):
        """Translate the given stroke.
        
        Translate the given stroke.
        
        Parameters:
        
        * path - The path object.
        
        * stroke_id (default: 0) - The stroke ID.
        
        * off_x (default: 0.0) - Offset in x direction.
        
        * off_y (default: 0.0) - Offset in y direction.
        """
        pass

    def gimp_pattern_get_by_name(self, name: str=None) -> Gimp.Pattern:
        """Returns the pattern with the given name.
        
        Returns an existing pattern having the given name. Returns %NULL when no
        pattern exists of that name.
        
        Parameters:
        
        * name - The name of the pattern.
        
        Returns:
        
        * pattern - The pattern.
        """
        pass

    def gimp_pattern_get_info(self, pattern: Gimp.Pattern=None) -> Tuple[int, int, int]:
        """Gets information about the pattern.
        
        Gets information about the pattern: the pattern extents (width and
        height) and bytes per pixel.
        
        Parameters:
        
        * pattern - The pattern.
        
        Returns:
        
        * width (default: 0) - The pattern width.
        
        * height (default: 0) - The pattern height.
        
        * bpp (default: 0) - The pattern bpp.
        """
        pass

    def gimp_pattern_get_pixels(self, pattern: Gimp.Pattern=None) -> Tuple[int, int, int, GLib.Bytes]:
        """Gets information about the pattern (including pixels).
        
        Gets information about the pattern: the pattern extents (width and
        height), its bpp, and its pixel data.
        
        Parameters:
        
        * pattern - The pattern.
        
        Returns:
        
        * width (default: 0) - The pattern width.
        
        * height (default: 0) - The pattern height.
        
        * bpp (default: 0) - The pattern bpp.
        
        * color_bytes - The pattern data.
        """
        pass

    def gimp_patterns_close_popup(self, pattern_callback: str=None):
        """Close the pattern selection dialog.
        
        Closes an open pattern selection dialog.
        
        Parameters:
        
        * pattern_callback - The name of the callback registered for this
          pop-up.
        """
        pass

    def gimp_patterns_get_list(self, filter: str=None) -> Any:
        """Retrieve a complete listing of the available patterns.
        
        This procedure returns a complete listing of available GIMP patterns.
        Each pattern returned can be used as input to
        [func@Gimp.context_set_pattern].
        
        Parameters:
        
        * filter - An optional regular expression used to filter the list.
        
        Returns:
        
        * pattern_list - The list of patterns.
        """
        pass

    def gimp_patterns_popup(self, pattern_callback: str=None, popup_title: str=None, initial_pattern: Gimp.Pattern=None, parent_window: GLib.Bytes=None):
        """Invokes the Gimp pattern selection.
        
        Opens the pattern selection dialog.
        
        Parameters:
        
        * pattern_callback - The callback PDB proc to call when the user
          chooses a pattern.
        
        * popup_title - Title of the pattern selection dialog.
        
        * initial_pattern - The pattern to set as the initial choice.
        
        * parent_window - An optional parent window handle for the popup to be
          set transient to.
        """
        pass

    def gimp_patterns_refresh(self):
        """Refresh current patterns. This function always succeeds.
        
        This procedure retrieves all patterns currently in the user's pattern
        path and updates all pattern dialogs accordingly.
        """
        pass

    def gimp_patterns_set_popup(self, pattern_callback: str=None, pattern: Gimp.Pattern=None):
        """Sets the current pattern in a pattern selection dialog.
        
        Sets the current pattern in a pattern selection dialog.
        
        Parameters:
        
        * pattern_callback - The name of the callback registered for this
          pop-up.
        
        * pattern - The pattern to set as selected.
        """
        pass

    def gimp_pdb_add_proc_menu_path(self, procedure_name: str=None, menu_path: str=None):
        """Register an additional menu path for a plug-in procedure.
        
        This procedure installs an additional menu entry for the given
        procedure.
        
        Parameters:
        
        * procedure_name - The procedure for which to install the menu path.
        
        * menu_path - The procedure's additional menu path.
        """
        pass

    def gimp_pdb_dump(self, file: Gio.File=None):
        """Dumps the current contents of the procedural database.
        
        This procedure dumps the contents of the procedural database to the
        specified file. The file will contain all of the information
        provided for each registered procedure.
        
        Parameters:
        
        * file - The dump filename.
        """
        pass

    def gimp_pdb_get_data(self, identifier: str=None) -> GLib.Bytes:
        """Returns data associated with the specified identifier.
        
        This procedure returns any data which may have been associated with the
        specified identifier. The data is a variable length array of
        bytes. If no data has been associated with the identifier, an
        error is returned.
        
        Parameters:
        
        * identifier - The identifier associated with data.
        
        Returns:
        
        * data - A byte array containing data.
        """
        pass

    def gimp_pdb_get_proc_argument(self, procedure_name: str=None, arg_num: int=0) -> GObject.ParamSpec:
        """Queries the procedural database for information on the specified
        procedure's argument.
        
        This procedure returns the #GParamSpec of procedure_name's argument.
        
        Parameters:
        
        * procedure_name - The procedure name.
        
        * arg_num (default: 0) - The argument number.
        
        Returns:
        
        * param_spec - The GParamSpec of the argument.
        """
        pass

    def gimp_pdb_get_proc_attribution(self, procedure_name: str=None) -> Tuple[str, str, str]:
        """Queries the procedural database for attribution information on the
        specified procedure.
        
        This procedure returns attribution information on the specified
        procedure. The authors, copyright information and date are
        returned.
        
        Parameters:
        
        * procedure_name - The procedure name.
        
        Returns:
        
        * authors - Authors of the procedure.
        
        * copyright - The copyright.
        
        * date - Copyright date.
        """
        pass

    def gimp_pdb_get_proc_documentation(self, procedure_name: str=None) -> Tuple[str, str, str]:
        """Queries the procedural database for documentation on the specified
        procedure.
        
        This procedure returns documentation on the specified procedure. A short
        blurb, detailed help and help_id.
        
        Parameters:
        
        * procedure_name - The procedure name.
        
        Returns:
        
        * blurb - A short blurb.
        
        * help - Detailed procedure help.
        
        * help_id - The procedure help_id.
        """
        pass

    def gimp_pdb_get_proc_image_types(self, procedure_name: str=None) -> str:
        """Queries the procedural database for the image types supported by the
        specified procedure.
        
        This procedure returns the image types supported by the specified
        procedure.
        
        Parameters:
        
        * procedure_name - The procedure name.
        
        Returns:
        
        * image_types - The image types.
        """
        pass

    def gimp_pdb_get_proc_info(self, procedure_name: str=None) -> Tuple[Gimp.PDBProcType, int, int]:
        """Queries the procedural database for information on the specified
        procedure.
        
        This procedure returns information on the specified procedure. The
        procedure type, number of input, and number of return values are
        returned. For specific information on each input argument and
        return value, use the 'gimp-pdb-db-proc-argument' and
        'gimp-pdb-db-proc-return-value' procedures.
        
        Parameters:
        
        * procedure_name - The procedure name.
        
        Returns:
        
        * proc_type (default: Gimp.PDBProcType.INTERNAL) - The procedure type.
        
        * num_args (default: 0) - The number of input arguments.
        
        * num_values (default: 0) - The number of return values.
        """
        pass

    def gimp_pdb_get_proc_menu_label(self, procedure_name: str=None) -> str:
        """Queries the procedural database for the procedure's menu label.
        
        This procedure returns the menu label of the specified procedure.
        
        Parameters:
        
        * procedure_name - The procedure name.
        
        Returns:
        
        * menu_label - The menu_label.
        """
        pass

    def gimp_pdb_get_proc_menu_paths(self, procedure_name: str=None) -> List[str]:
        """Queries the procedural database for the procedure's menu paths.
        
        This procedure returns the menu paths of the specified procedure.
        
        Parameters:
        
        * procedure_name - The procedure name.
        
        Returns:
        
        * menu_paths - The menu paths of the plug-in.
        """
        pass

    def gimp_pdb_get_proc_return_value(self, procedure_name: str=None, val_num: int=0) -> GObject.ParamSpec:
        """Queries the procedural database for information on the specified
        procedure's return value.
        
        This procedure returns the #GParamSpec of procedure_name's return value.
        
        Parameters:
        
        * procedure_name - The procedure name.
        
        * val_num (default: 0) - The return value number.
        
        Returns:
        
        * param_spec - The GParamSpec of the return value.
        """
        pass

    def gimp_pdb_proc_exists(self, procedure_name: str=None) -> bool:
        """Checks if the specified procedure exists in the procedural database.
        
        This procedure checks if the specified procedure is registered in the
        procedural database.
        
        Parameters:
        
        * procedure_name - The procedure name.
        
        Returns:
        
        * exists (default: False) - Whether a procedure of that name is
          registered.
        """
        pass

    def gimp_pdb_query(self, name: str=None, blurb: str=None, help: str=None, authors: str=None, copyright: str=None, date: str=None, proc_type: str=None) -> List[str]:
        """Queries the procedural database for its contents using regular
        expression matching.
        
        This procedure queries the contents of the procedural database. It is
        supplied with seven arguments matching procedures on { name,
        blurb, help, authors, copyright, date, procedure type}. This is
        accomplished using regular expression matching. For instance, to
        find all procedures with "jpeg" listed in the blurb, all seven
        arguments can be supplied as ".*", except for the second, which
        can be supplied as ".*jpeg.*". There are two return arguments
        for this procedure. The first is the number of procedures
        matching the query. The second is a concatenated list of
        procedure names corresponding to those matching the query. If no
        matching entries are found, then the returned string is NULL and
        the number of entries is 0.
        
        Parameters:
        
        * name - The regex for procedure name.
        
        * blurb - The regex for procedure blurb.
        
        * help - The regex for procedure help.
        
        * authors - The regex for procedure authors.
        
        * copyright - The regex for procedure copyright.
        
        * date - The regex for procedure date.
        
        * proc_type - The regex for procedure type: { 'Internal GIMP
          procedure', 'GIMP Plug-in', 'GIMP Extension', 'Temporary
          Procedure' }.
        
        Returns:
        
        * procedure_names - The list of procedure names.
        """
        pass

    def gimp_pdb_set_batch_interpreter(self, procedure_name: str=None, interpreter_name: str=None):
        """Registers a batch interpreter procedure.
        
        Registers a procedural database procedure to be called with the command
        line interface options --batch-interpreter and --batch.
        
        Parameters:
        
        * procedure_name - The name of the procedure to be used for running
          batch commands.
        
        * interpreter_name - A public-facing name for the interpreter, such as
          "Python 3".
        """
        pass

    def gimp_pdb_set_data(self, identifier: str=None, data: GLib.Bytes=None):
        """Associates the specified identifier with the supplied data.
        
        This procedure associates the supplied data with the provided
        identifier. The data may be subsequently retrieved by a call to
        'procedural-db-get-data'.
        
        Parameters:
        
        * identifier - The identifier associated with data.
        
        * data - A byte array containing data.
        """
        pass

    def gimp_pdb_set_file_proc_handles_raw(self, procedure_name: str=None):
        """Registers a file handler procedure as capable of handling raw camera
        files.
        
        Registers a file handler procedure as capable of handling raw digital
        camera files. Use this procedure only to register raw load
        handlers, calling it on a save handler will generate an error.
        
        Parameters:
        
        * procedure_name - The name of the procedure to enable raw handling
          for.
        """
        pass

    def gimp_pdb_set_file_proc_handles_remote(self, procedure_name: str=None):
        """Registers a file handler procedure as capable of handling remote
        URIs.
        
        Registers a file handler procedure as capable of handling remote URIs.
        This allows GIMP to call the procedure directly for all kinds of
        URIs, not only on local file:// URIs.
        
        Parameters:
        
        * procedure_name - The name of the procedure to enable remote URIs
          for.
        """
        pass

    def gimp_pdb_set_file_proc_handles_vector(self, procedure_name: str=None):
        """Registers a load handler procedure as handling vector formats.
        
        Registers a file handler procedure as handling vector image formats. Use
        this procedure only to register a GimpVectorLoadProcedure,
        calling it on any other handler will generate an error.
        
        Parameters:
        
        * procedure_name - The name of the vector load procedure.
        """
        pass

    def gimp_pdb_set_file_proc_load_handler(self, procedure_name: str=None, extensions: str=None, prefixes: str=None, magics: str=None):
        """Registers a file load handler procedure.
        
        Registers a procedural database procedure to be called to load files of
        a particular file format using magic file information.
        
        Parameters:
        
        * procedure_name - The name of the procedure to be used for loading.
        
        * extensions - comma separated list of extensions this handler can
          load (i.e. "jpg,jpeg").
        
        * prefixes - comma separated list of prefixes this handler can load
          (i.e. "http:,ftp:").
        
        * magics - comma separated list of magic file information this handler
          can load (i.e. "0,string,GIF").
        """
        pass

    def gimp_pdb_set_file_proc_mime_types(self, procedure_name: str=None, mime_types: str=None):
        """Associates MIME types with a file handler procedure.
        
        Registers MIME types for a file handler procedure. This allows GIMP to
        determine the MIME type of the file opened or saved using this
        procedure. It is recommended that only one MIME type is
        registered per file procedure; when registering more than one
        MIME type, GIMP will associate the first one with files opened
        or saved with this procedure.
        
        Parameters:
        
        * procedure_name - The name of the procedure to associate a MIME type
          with.
        
        * mime_types - A comma-separated list of MIME types, such as
          "image/jpeg".
        """
        pass

    def gimp_pdb_set_file_proc_priority(self, procedure_name: str=None, priority: int=0):
        """Sets the priority of a file handler procedure.
        
        Sets the priority of a file handler procedure. When more than one
        procedure matches a given file, the procedure with the lowest
        priority is used; if more than one procedure has the lowest
        priority, it is unspecified which one of them is used. The
        default priority for file handler procedures is 0.
        
        Parameters:
        
        * procedure_name - The name of the procedure to set the priority of.
        
        * priority (default: 0) - The procedure priority.
        """
        pass

    def gimp_pdb_set_file_proc_save_handler(self, procedure_name: str=None, extensions: str=None, prefixes: str=None):
        """Registers a file save handler procedure.
        
        Registers a procedural database procedure to be called to save files in
        a particular file format.
        
        Parameters:
        
        * procedure_name - The name of the procedure to be used for saving.
        
        * extensions - comma separated list of extensions this handler can
          save (i.e. "jpg,jpeg").
        
        * prefixes - comma separated list of prefixes this handler can save
          (i.e. "http:,ftp:").
        """
        pass

    def gimp_pdb_set_file_proc_thumbnail_loader(self, load_proc: str=None, thumb_proc: str=None):
        """Associates a thumbnail loader with a file load procedure.
        
        Some file formats allow for embedded thumbnails, other file formats
        contain a scalable image or provide the image data in different
        resolutions. A file plug-in for such a format may register a
        special procedure that allows GIMP to load a thumbnail preview
        of the image. This procedure is then associated with the
        standard load procedure using this function.
        
        Parameters:
        
        * load_proc - The name of the file load procedure.
        
        * thumb_proc - The name of the thumbnail load procedure.
        """
        pass

    def gimp_pdb_set_proc_attribution(self, procedure_name: str=None, authors: str=None, copyright: str=None, date: str=None):
        """Set the attribution for a plug-in procedure.
        
        This procedure sets the attribution for the given procedure.
        
        Parameters:
        
        * procedure_name - The procedure for which to install the menu path.
        
        * authors - Authors of the procedure.
        
        * copyright - The copyright.
        
        * date - Copyright date.
        """
        pass

    def gimp_pdb_set_proc_documentation(self, procedure_name: str=None, blurb: str=None, help: str=None, help_id: str=None):
        """Set the documentation for a plug-in procedure.
        
        This procedure sets the documentation for the given procedure.
        
        Parameters:
        
        * procedure_name - The procedure for which to install the menu path.
        
        * blurb - A short blurb.
        
        * help - Detailed procedure help.
        
        * help_id - The procedure help_id.
        """
        pass

    def gimp_pdb_set_proc_icon(self, procedure_name: str=None, icon_type: Gimp.IconType=Gimp.IconType.ICON_NAME, icon_data: GLib.Bytes=None):
        """Register an icon for a plug-in procedure.
        
        This procedure installs an icon for the given procedure.
        
        Parameters:
        
        * procedure_name - The procedure for which to install the icon.
        
        * icon_type (default: Gimp.IconType.ICON_NAME) - The type of the icon.
        
        * icon_data - The procedure's icon. The format depends on the
          'icon_type' parameter.
        """
        pass

    def gimp_pdb_set_proc_image_types(self, procedure_name: str=None, image_types: str=None):
        """Set the supported image types for a plug-in procedure.
        
        This procedure sets the supported images types for the given procedure.
        
        Parameters:
        
        * procedure_name - The procedure for which to install the menu path.
        
        * image_types - The procedure's supported image types.
        """
        pass

    def gimp_pdb_set_proc_menu_label(self, procedure_name: str=None, menu_label: str=None):
        """Set the menu label for a plug-in procedure.
        
        This procedure sets the menu label for the given procedure.
        
        Parameters:
        
        * procedure_name - The procedure for which to install the menu path.
        
        * menu_label - The procedure's menu label.
        """
        pass

    def gimp_pdb_set_proc_sensitivity_mask(self, procedure_name: str=None, mask: int=0):
        """Set the sensitivity mask for a plug-in procedure.
        
        This procedure sets the sensitivity mask for the given procedure.
        
        Parameters:
        
        * procedure_name - The procedure.
        
        * mask (default: 0) - The procedure's sensitivity mask.
        """
        pass

    def gimp_pdb_temp_name(self) -> str:
        """Generates a unique temporary PDB name.
        
        This procedure generates a temporary PDB entry name that is guaranteed
        to be unique.
        
        Returns:
        
        * temp_name - A unique temporary name for a temporary PDB entry.
        """
        pass

    def gimp_pencil(self, drawable: Gimp.Drawable=None, strokes: Gimp.DoubleArray=None):
        """Paint in the current brush without sub-pixel sampling.
        
        This tool is the standard pencil. It draws linearly interpolated lines
        through the specified stroke coordinates. It operates on the
        specified drawable in the foreground color with the active
        brush. The brush mask is treated as though it contains only
        black and white values. Any value below half is treated as
        black; any above half, as white.
        
        Parameters:
        
        * drawable - The affected drawable.
        
        * strokes - Array of stroke coordinates: { s1.x, s1.y, s2.x, s2.y,
          ..., sn.x, sn.y }.
        """
        pass

    def gimp_plug_in_get_pdb_error_handler(self) -> Gimp.PDBErrorHandler:
        """Retrieves the active error handler for procedure calls.
        
        This procedure retrieves the currently active error handler for
        procedure calls made by the calling plug-in. See
        'gimp-plugin-set-pdb-error-handler' for details.
        
        Returns:
        
        * handler (default: Gimp.PDBErrorHandler.INTERNAL) - Who is
          responsible for handling procedure call errors.
        """
        pass

    def gimp_plug_in_help_register(self, domain_name: str=None, domain_file: Gio.File=None):
        """Register a help path for a plug-in.
        
        This procedure registers user documentation for the calling plug-in with
        the GIMP help system. The domain_uri parameter points to the
        root directory where the plug-in help is installed. For each
        supported language there should be a file called 'gimp-help.xml'
        that maps the help IDs to the actual help files.
        
        Parameters:
        
        * domain_name - The XML namespace of the plug-in's help pages.
        
        * domain_file - The root URI of the plug-in's help pages.
        """
        pass

    def gimp_plug_in_menu_branch_register(self, menu_path: str=None, menu_name: str=None):
        """Register a sub-menu.
        
        This procedure installs a sub-menu which does not belong to any
        procedure. The menu-name should be the untranslated menu label.
        GIMP will look up the translation in the textdomain registered
        for the plug-in.
        
        Parameters:
        
        * menu_path - The sub-menu's menu path.
        
        * menu_name - The name of the sub-menu.
        """
        pass

    def gimp_plug_in_set_pdb_error_handler(self, handler: Gimp.PDBErrorHandler=Gimp.PDBErrorHandler.INTERNAL):
        """Sets an error handler for procedure calls.
        
        This procedure changes the way that errors in procedure calls are
        handled. By default GIMP will raise an error dialog if a
        procedure call made by a plug-in fails. Using this procedure the
        plug-in can change this behavior. If the error handler is set to
        %GIMP_PDB_ERROR_HANDLER_PLUGIN, then the plug-in is responsible
        for calling 'gimp-get-pdb-error' and handling the error whenever
        one if its procedure calls fails. It can do this by displaying
        the error message or by forwarding it in its own return values.
        
        Parameters:
        
        * handler (default: Gimp.PDBErrorHandler.INTERNAL) - Who is
          responsible for handling procedure call errors.
        """
        pass

    def gimp_plug_ins_query(self, search_string: str=None) -> Tuple[List[str], List[str], List[str], Gimp.Int32Array]:
        """Queries the plug-in database for its contents.
        
        This procedure queries the contents of the plug-in database.
        
        Parameters:
        
        * search_string - If not an empty string then use this as a search
          pattern.
        
        Returns:
        
        * procedures - The plug-in procedure name.
        
        * accelerators - String representing keyboard accelerator (could be
          empty string).
        
        * locations - Location of the plug-in program.
        
        * install_times - Time that the plug-in was installed.
        """
        pass

    def gimp_progress_cancel(self, progress_callback: str=None):
        """Cancels a running progress.
        
        This function cancels the currently running progress.
        
        Parameters:
        
        * progress_callback - The name of the callback registered for this
          progress.
        """
        pass

    def gimp_progress_end(self):
        """Ends the progress bar for the current plug-in.
        
        Ends the progress display for the current plug-in. Most plug-ins don't
        need to call this, they just exit when the work is done. It is
        only valid to call this procedure from a plug-in.
        """
        pass

    def gimp_progress_get_window_handle(self) -> GLib.Bytes:
        """Returns the native handle of the toplevel window this plug-in's
        progress is or would be displayed in.
        
        This function returns the native handle allowing to identify the
        toplevel window this plug-in's progress is displayed in. It
        should still work even if the progress bar has not been
        initialized yet, unless the plug-in wasn't called from a GUI.
        This handle can be of various types (integer, string, etc.)
        depending on the platform you are running on which is why it
        returns a GBytes. There are usually no reasons to call this
        directly.
        
        Returns:
        
        * handle - The progress bar's toplevel window's handle.
        """
        pass

    def gimp_progress_init(self, message: str=None, gdisplay: Gimp.Display=None):
        """Initializes the progress bar for the current plug-in.
        
        Initializes the progress bar for the current plug-in. It is only valid
        to call this procedure from a plug-in.
        
        Parameters:
        
        * message - Message to use in the progress dialog.
        
        * gdisplay - GimpDisplay to update progressbar in, or %NULL for a
          separate window.
        """
        pass

    def gimp_progress_install(self, progress_callback: str=None):
        """Installs a progress callback for the current plug-in.
        
        This function installs a temporary PDB procedure which will handle all
        progress calls made by this plug-in and any procedure it calls.
        Calling this function multiple times simply replaces the old
        progress callbacks.
        
        Parameters:
        
        * progress_callback - The callback PDB proc to call.
        """
        pass

    def gimp_progress_pulse(self):
        """Pulses the progress bar for the current plug-in.
        
        Updates the progress bar for the current plug-in. It is only valid to
        call this procedure from a plug-in. Use this function instead of
        'gimp-progress-update' if you cannot tell how much progress has
        been made. This usually causes the the progress bar to enter
        "activity mode", where a block bounces back and forth.
        """
        pass

    def gimp_progress_set_text(self, message: str=None):
        """Changes the text in the progress bar for the current plug-in.
        
        This function changes the text in the progress bar for the current
        plug-in. Unlike 'gimp-progress-init' it does not change the
        displayed value.
        
        Parameters:
        
        * message - Message to use in the progress dialog.
        """
        pass

    def gimp_progress_uninstall(self, progress_callback: str=None):
        """Uninstalls the progress callback for the current plug-in.
        
        This function uninstalls any progress callback installed with
        'gimp-progress-install' before.
        
        Parameters:
        
        * progress_callback - The name of the callback registered for this
          progress.
        """
        pass

    def gimp_progress_update(self, percentage: float=0.0):
        """Updates the progress bar for the current plug-in.
        
        Updates the progress bar for the current plug-in. It is only valid to
        call this procedure from a plug-in.
        
        Parameters:
        
        * percentage (default: 0.0) - Percentage of progress completed which
          must be between 0.0 and 1.0.
        """
        pass

    def gimp_quit(self, force: bool=False):
        """Causes GIMP to exit gracefully.
        
        If there are unsaved images in an interactive GIMP session, the user
        will be asked for confirmation. If force is TRUE, the
        application is quit without querying the user to save any dirty
        images.
        
        Parameters:
        
        * force (default: False) - Force GIMP to quit without asking.
        """
        pass

    def gimp_resource_delete(self, resource: Gimp.Resource=None):
        """Deletes a resource.
        
        Deletes a resource. Returns an error if the resource is not deletable.
        Deletes the resource's data. You should not use the resource
        afterwards.
        
        Parameters:
        
        * resource - The resource.
        """
        pass

    def gimp_resource_duplicate(self, resource: Gimp.Resource=None) -> Gimp.Resource:
        """Duplicates a resource.
        
        Returns a copy having a different, unique ID.
        
        Parameters:
        
        * resource - The resource.
        
        Returns:
        
        * resource_copy - A copy of the resource.
        """
        pass

    def gimp_resource_get_by_identifiers(self, type_name: str=None, resource_name: str=None, collection: str=None, is_internal: bool=False) -> Gimp.Resource:
        """Returns the resource contained in a given file with a given name.
        
        Returns a resource specifically stored in a given file path, under a
        given name (a single path may be a collection containing several
        resources).
        
        Parameters:
        
        * type_name - The name of the resource type.
        
        * resource_name - The name of the resource.
        
        * collection - The collection identifier.
        
        * is_internal (default: False) - Whether this is the identifier for
          internal data.
        
        Returns:
        
        * resource - The resource.
        """
        pass

    def gimp_resource_get_by_name(self, type_name: str=None, resource_name: str=None) -> Gimp.Resource:
        """Returns a resource with the given name.
        
        Returns an existing resource having the given name. Returns %NULL when
        no resource exists of that name. There may be many fonts having
        the same name. See 'gimp-font-get-by-name'.
        
        Parameters:
        
        * type_name - The name of the resource type e.g. GimpFont.
        
        * resource_name - The name of the resource.
        
        Returns:
        
        * resource - The resource.
        """
        pass

    def gimp_resource_get_identifiers(self, resource: Gimp.Resource=None) -> Tuple[bool, str, str]:
        """Returns a triplet identifying the resource.
        
        This procedure returns 2 strings and a boolean. The first string is the
        resource name, similar to what you would obtain calling
        'gimp-resource-get-name'. The second is an opaque identifier for
        the collection this resource belongs to.
        
        *Note*: as far as GIMP is concerned, a collection of resource usually
        corresponds to a single file on disk (which may or may not
        contain several resources). Therefore the identifier may be
        derived from the local file path. Nevertheless you should not
        use this string as such as this is not guaranteed to be always
        the case. You should consider it as an opaque identifier only to
        be used again through _'gimp-resource-get-by-identifier'.
        
        Parameters:
        
        * resource - The resource.
        
        Returns:
        
        * is_internal (default: False) - Whether this is the identifier for
          internal data.
        
        * name - The resource's name.
        
        * collection_id - The resource's collection identifier.
        """
        pass

    def gimp_resource_get_name(self, resource: Gimp.Resource=None) -> str:
        """Returns the resource's name.
        
        This procedure returns the resource's name.
        
        Parameters:
        
        * resource - The resource.
        
        Returns:
        
        * name - The resource's name.
        """
        pass

    def gimp_resource_id_is_brush(self, resource_id: int=0) -> bool:
        """Returns whether the resource ID is a brush.
        
        This procedure returns TRUE if the specified resource ID is a brush.
        
        Parameters:
        
        * resource_id (default: 0) - The resource ID.
        
        Returns:
        
        * brush (default: False) - TRUE if the resource ID is a brush, FALSE
          otherwise.
        """
        pass

    def gimp_resource_id_is_font(self, resource_id: int=0) -> bool:
        """Returns whether the resource ID is a font.
        
        This procedure returns TRUE if the specified resource ID is a font.
        
        Parameters:
        
        * resource_id (default: 0) - The resource ID.
        
        Returns:
        
        * font (default: False) - TRUE if the resource ID is a font, FALSE
          otherwise.
        """
        pass

    def gimp_resource_id_is_gradient(self, resource_id: int=0) -> bool:
        """Returns whether the resource ID is a gradient.
        
        This procedure returns TRUE if the specified resource ID is a gradient.
        
        Parameters:
        
        * resource_id (default: 0) - The resource ID.
        
        Returns:
        
        * gradient (default: False) - TRUE if the resource ID is a gradient,
          FALSE otherwise.
        """
        pass

    def gimp_resource_id_is_palette(self, resource_id: int=0) -> bool:
        """Returns whether the resource ID is a palette.
        
        This procedure returns TRUE if the specified resource ID is a palette.
        
        Parameters:
        
        * resource_id (default: 0) - The resource ID.
        
        Returns:
        
        * palette (default: False) - TRUE if the resource ID is a palette,
          FALSE otherwise.
        """
        pass

    def gimp_resource_id_is_pattern(self, resource_id: int=0) -> bool:
        """Returns whether the resource ID is a pattern.
        
        This procedure returns TRUE if the specified resource ID is a pattern.
        
        Parameters:
        
        * resource_id (default: 0) - The resource ID.
        
        Returns:
        
        * pattern (default: False) - TRUE if the resource ID is a pattern,
          FALSE otherwise.
        """
        pass

    def gimp_resource_id_is_valid(self, resource_id: int=0) -> bool:
        """Returns TRUE if the resource ID is valid.
        
        This procedure checks if the given resource ID is valid and refers to an
        existing resource.
        
        *Note*: in most use cases, you should not use this function. If you got
        a [class@Gimp.Resource] from the API, you should trust it is
        valid. This function is mostly for internal usage.
        
        Parameters:
        
        * resource_id (default: 0) - The resource ID to check.
        
        Returns:
        
        * valid (default: False) - Whether the resource ID is valid.
        """
        pass

    def gimp_resource_is_editable(self, resource: Gimp.Resource=None) -> bool:
        """Whether the resource can be edited.
        
        Returns TRUE if you have permission to change the resource.
        
        Parameters:
        
        * resource - The resource.
        
        Returns:
        
        * editable (default: False) - TRUE if the resource can be edited.
        """
        pass

    def gimp_resource_rename(self, resource: Gimp.Resource=None, new_name: str=None):
        """Renames a resource. When the name is in use, renames to a unique
        name.
        
        Renames a resource. When the proposed name is already used, GIMP
        generates a unique name.
        
        Parameters:
        
        * resource - The resource.
        
        * new_name - The proposed new name of the resource.
        """
        pass

    def gimp_selection_all(self, image: Gimp.Image=None):
        """Select all of the image.
        
        This procedure sets the selection mask to completely encompass the
        image. Every pixel in the selection channel is set to 255.
        
        Parameters:
        
        * image - The image.
        """
        pass

    def gimp_selection_border(self, image: Gimp.Image=None, radius: int=0):
        """Border the image's selection.
        
        This procedure borders the selection. Bordering creates a new selection
        which is defined along the boundary of the previous selection at
        every point within the specified radius.
        
        Parameters:
        
        * image - The image.
        
        * radius (default: 0) - Radius of border (in pixels).
        """
        pass

    def gimp_selection_bounds(self, image: Gimp.Image=None) -> Tuple[bool, int, int, int, int]:
        """Find the bounding box of the current selection.
        
        This procedure returns whether there is a selection for the specified
        image. If there is one, the upper left and lower right corners
        of the bounding box are returned. These coordinates are relative
        to the image. Please note that the pixel specified by the lower
        right coordinate of the bounding box is not part of the
        selection. The selection ends at the upper left corner of this
        pixel. This means the width of the selection can be calculated
        as (x2 - x1), its height as (y2 - y1).
        
        Parameters:
        
        * image - The image.
        
        Returns:
        
        * non_empty (default: False) - TRUE if there is a selection.
        
        * x1 (default: 0) - x coordinate of upper left corner of selection
          bounds.
        
        * y1 (default: 0) - y coordinate of upper left corner of selection
          bounds.
        
        * x2 (default: 0) - x coordinate of lower right corner of selection
          bounds.
        
        * y2 (default: 0) - y coordinate of lower right corner of selection
          bounds.
        """
        pass

    def gimp_selection_feather(self, image: Gimp.Image=None, radius: float=0.0):
        """Feather the image's selection.
        
        This procedure feathers the selection. Feathering is implemented using a
        gaussian blur.
        
        Parameters:
        
        * image - The image.
        
        * radius (default: 0.0) - Radius of feather (in pixels).
        """
        pass

    def gimp_selection_float(self, drawables: GObject.Value=None, offx: int=0, offy: int=0) -> Gimp.Layer:
        """Float the selection from the specified drawable with initial offsets
        as specified.
        
        This procedure determines the region of the specified drawable that lies
        beneath the current selection. The region is then cut from the
        drawable and the resulting data is made into a new layer which
        is instantiated as a floating selection. The offsets allow
        initial positioning of the new floating selection.
        
        Parameters:
        
        * drawables - The drawables from which to float selection.
        
        * offx (default: 0) - x offset for translation.
        
        * offy (default: 0) - y offset for translation.
        
        Returns:
        
        * layer - The floated layer.
        """
        pass

    def gimp_selection_flood(self, image: Gimp.Image=None):
        """Remove holes from the image's selection.
        
        This procedure removes holes from the selection, that can come from
        selecting a patchy area with the Fuzzy Select Tool. In technical
        terms this procedure floods the selection. See the Algorithms
        page in the developer wiki for details.
        
        Parameters:
        
        * image - The image.
        """
        pass

    def gimp_selection_grow(self, image: Gimp.Image=None, steps: int=0):
        """Grow the image's selection.
        
        This procedure grows the selection. Growing involves expanding the
        boundary in all directions by the specified pixel amount.
        
        Parameters:
        
        * image - The image.
        
        * steps (default: 0) - Steps of grow (in pixels).
        """
        pass

    def gimp_selection_invert(self, image: Gimp.Image=None):
        """Invert the selection mask.
        
        This procedure inverts the selection mask. For every pixel in the
        selection channel, its new value is calculated as (255 -
        old-value).
        
        Parameters:
        
        * image - The image.
        """
        pass

    def gimp_selection_is_empty(self, image: Gimp.Image=None) -> bool:
        """Determine whether the selection is empty.
        
        This procedure returns TRUE if the selection for the specified image is
        empty.
        
        Parameters:
        
        * image - The image.
        
        Returns:
        
        * is_empty (default: False) - Is the selection empty?.
        """
        pass

    def gimp_selection_none(self, image: Gimp.Image=None):
        """Deselect the entire image.
        
        This procedure deselects the entire image. Every pixel in the selection
        channel is set to 0.
        
        Parameters:
        
        * image - The image.
        """
        pass

    def gimp_selection_save(self, image: Gimp.Image=None) -> Gimp.Channel:
        """Copy the selection mask to a new channel.
        
        This procedure copies the selection mask and stores the content in a new
        channel. The new channel is automatically inserted into the
        image's list of channels.
        
        Parameters:
        
        * image - The image.
        
        Returns:
        
        * channel - The new channel.
        """
        pass

    def gimp_selection_sharpen(self, image: Gimp.Image=None):
        """Sharpen the selection mask.
        
        This procedure sharpens the selection mask. For every pixel in the
        selection channel, if the value is > 127, the new pixel is
        assigned a value of 255. This removes any "anti-aliasing" that
        might exist in the selection mask's boundary.
        
        Parameters:
        
        * image - The image.
        """
        pass

    def gimp_selection_shrink(self, image: Gimp.Image=None, steps: int=0):
        """Shrink the image's selection.
        
        This procedure shrinks the selection. Shrinking involves trimming the
        existing selection boundary on all sides by the specified number
        of pixels.
        
        Parameters:
        
        * image - The image.
        
        * steps (default: 0) - Steps of shrink (in pixels).
        """
        pass

    def gimp_selection_translate(self, image: Gimp.Image=None, offx: int=0, offy: int=0):
        """Translate the selection by the specified offsets.
        
        This procedure actually translates the selection for the specified image
        by the specified offsets. Regions that are translated from
        beyond the bounds of the image are set to empty. Valid regions
        of the selection which are translated beyond the bounds of the
        image because of this call are lost.
        
        Parameters:
        
        * image - The image.
        
        * offx (default: 0) - x offset for translation.
        
        * offy (default: 0) - y offset for translation.
        """
        pass

    def gimp_selection_value(self, image: Gimp.Image=None, x: int=0, y: int=0) -> int:
        """Find the value of the selection at the specified coordinates.
        
        This procedure returns the value of the selection at the specified
        coordinates. If the coordinates lie out of bounds, 0 is
        returned.
        
        Parameters:
        
        * image - The image.
        
        * x (default: 0) - x coordinate of value.
        
        * y (default: 0) - y coordinate of value.
        
        Returns:
        
        * value (default: 0) - Value of the selection.
        """
        pass

    def gimp_smudge(self, drawable: Gimp.Drawable=None, pressure: float=0.0, strokes: Gimp.DoubleArray=None):
        """Smudge image with varying pressure.
        
        This tool simulates a smudge using the current brush. High pressure
        results in a greater smudge of paint while low pressure results
        in a lesser smudge.
        
        Parameters:
        
        * drawable - The affected drawable.
        
        * pressure (default: 0.0) - The pressure of the smudge strokes.
        
        * strokes - Array of stroke coordinates: { s1.x, s1.y, s2.x, s2.y,
          ..., sn.x, sn.y }.
        """
        pass

    def gimp_smudge_default(self, drawable: Gimp.Drawable=None, strokes: Gimp.DoubleArray=None):
        """Smudge image with varying pressure.
        
        This tool simulates a smudge using the current brush. It behaves exactly
        the same as 'gimp-smudge' except that the pressure value is
        taken from the smudge tool options or the options default if the
        tools option dialog has not been activated.
        
        Parameters:
        
        * drawable - The affected drawable.
        
        * strokes - Array of stroke coordinates: { s1.x, s1.y, s2.x, s2.y,
          ..., sn.x, sn.y }.
        """
        pass

    def gimp_temp_file(self, extension: str=None) -> Gio.File:
        """Generates a unique temporary file.
        
        Generates a unique file using the temp path supplied in the user's
        gimprc.
        
        Parameters:
        
        * extension - The extension the file will have.
        
        Returns:
        
        * file - The new temp file.
        """
        pass

    def gimp_text_font(self, image: Gimp.Image=None, drawable: Gimp.Drawable=None, x: float=0.0, y: float=0.0, text: str=None, border: int=-1, antialias: bool=False, size: float=0.0, font: Gimp.Font=None) -> Gimp.Layer:
        """Add text at the specified location as a floating selection or a new
        layer.
        
        The x and y parameters together control the placement of the new text by
        specifying the upper left corner of the text bounding box. If
        the specified drawable parameter is valid, the text will be
        created as a floating selection attached to the drawable. If the
        drawable parameter is not valid (%NULL), the text will appear as
        a new layer. Finally, a border can be specified around the final
        rendered text. The border is measured in pixels. The size is
        always in pixels. If you need to display a font in points,
        divide the size in points by 72.0 and multiply it by the image's
        vertical resolution.
        
        Parameters:
        
        * image - The image.
        
        * drawable - The affected drawable: (%NULL for a new text layer).
        
        * x (default: 0.0) - The x coordinate for the left of the text
          bounding box.
        
        * y (default: 0.0) - The y coordinate for the top of the text bounding
          box.
        
        * text - The text to generate (in UTF-8 encoding).
        
        * border (default: -1) - The size of the border.
        
        * antialias (default: False) - Antialiasing.
        
        * size (default: 0.0) - The size of text in pixels.
        
        * font - The font.
        
        Returns:
        
        * text_layer - The new text layer or %NULL if no layer was created.
        """
        pass

    def gimp_text_get_extents_font(self, text: str=None, size: float=0.0, font: Gimp.Font=None) -> Tuple[int, int, int, int]:
        """Get extents of the bounding box for the specified text.
        
        This tool returns the width and height of a bounding box for the
        specified text rendered with the specified font information.
        Ascent and descent of the glyph extents are returned as well.
        The ascent is the distance from the baseline to the highest
        point of the character. This is positive if the glyph ascends
        above the baseline. The descent is the distance from the
        baseline to the lowest point of the character. This is positive
        if the glyph descends below the baseline. The size is always in
        pixels. If you need to set a font in points, divide the size in
        points by 72.0 and multiply it by the vertical resolution of the
        image you are taking into account.
        
        Parameters:
        
        * text - The text to generate (in UTF-8 encoding).
        
        * size (default: 0.0) - The size of text in either pixels or points.
        
        * font - The name of the font.
        
        Returns:
        
        * width (default: 0) - The width of the glyph extents.
        
        * height (default: 0) - The height of the glyph extents.
        
        * ascent (default: 0) - The ascent of the glyph extents.
        
        * descent (default: 0) - The descent of the glyph extents.
        """
        pass

    def gimp_text_layer_get_antialias(self, layer: Gimp.TextLayer=None) -> bool:
        """Check if antialiasing is used in the text layer.
        
        This procedure checks if antialiasing is enabled in the specified text
        layer.
        
        Parameters:
        
        * layer - The text layer.
        
        Returns:
        
        * antialias (default: False) - A flag which is true if antialiasing is
          used for rendering the font in the text layer.
        """
        pass

    def gimp_text_layer_get_base_direction(self, layer: Gimp.TextLayer=None) -> Gimp.TextDirection:
        """Get the base direction used for rendering the text layer.
        
        This procedure returns the base direction used for rendering the text in
        the text layer.
        
        Parameters:
        
        * layer - The text layer.
        
        Returns:
        
        * direction (default: Gimp.TextDirection.LTR) - The based direction
          used for the text layer.
        """
        pass

    def gimp_text_layer_get_color(self, layer: Gimp.TextLayer=None) -> Gegl.Color:
        """Get the color of the text in a text layer.
        
        This procedure returns the color of the text in a text layer.
        
        Parameters:
        
        * layer - The text layer.
        
        Returns:
        
        * color - The color of the text.
        """
        pass

    def gimp_text_layer_get_font(self, layer: Gimp.TextLayer=None) -> Gimp.Font:
        """Get the font from a text layer as string.
        
        This procedure returns the font from a text layer.
        
        Parameters:
        
        * layer - The text layer.
        
        Returns:
        
        * font - The font which is used in the specified text layer.
        """
        pass

    def gimp_text_layer_get_font_size(self, layer: Gimp.TextLayer=None) -> Tuple[float, Gimp.Unit]:
        """Get the font size from a text layer.
        
        This procedure returns the size of the font which is used in a text
        layer. You will receive the size as a double 'font-size' in
        'unit' units.
        
        Parameters:
        
        * layer - The text layer.
        
        Returns:
        
        * font_size (default: 0.0) - The font size.
        
        * unit - The unit used for the font size.
        """
        pass

    def gimp_text_layer_get_hint_style(self, layer: Gimp.TextLayer=None) -> Gimp.TextHintStyle:
        """Get information about hinting in the specified text layer.
        
        This procedure provides information about the hinting that is being used
        in a text layer. Hinting can be optimized for fidelity or
        contrast or it can be turned entirely off.
        
        Parameters:
        
        * layer - The text layer.
        
        Returns:
        
        * style (default: Gimp.TextHintStyle.NONE) - The hint style used for
          font outlines.
        """
        pass

    def gimp_text_layer_get_indent(self, layer: Gimp.TextLayer=None) -> float:
        """Get the line indentation of text layer.
        
        This procedure returns the indentation of the first line in a text
        layer.
        
        Parameters:
        
        * layer - The text layer.
        
        Returns:
        
        * indent (default: 0.0) - The indentation value of the first line.
        """
        pass

    def gimp_text_layer_get_justification(self, layer: Gimp.TextLayer=None) -> Gimp.TextJustification:
        """Get the text justification information of the text layer.
        
        This procedure returns the alignment of the lines in the text layer
        relative to each other.
        
        Parameters:
        
        * layer - The text layer.
        
        Returns:
        
        * justify (default: Gimp.TextJustification.LEFT) - The justification
          used in the text layer.
        """
        pass

    def gimp_text_layer_get_kerning(self, layer: Gimp.TextLayer=None) -> bool:
        """Check if kerning is used in the text layer.
        
        This procedure checks if kerning is enabled in the specified text layer.
        
        Parameters:
        
        * layer - The text layer.
        
        Returns:
        
        * kerning (default: False) - A flag which is true if kerning is used
          in the text layer.
        """
        pass

    def gimp_text_layer_get_language(self, layer: Gimp.TextLayer=None) -> str:
        """Get the language used in the text layer.
        
        This procedure returns the language string which is set for the text in
        the text layer.
        
        Parameters:
        
        * layer - The text layer.
        
        Returns:
        
        * language - The language used in the text layer.
        """
        pass

    def gimp_text_layer_get_letter_spacing(self, layer: Gimp.TextLayer=None) -> float:
        """Get the letter spacing used in a text layer.
        
        This procedure returns the additional spacing between the single glyphs
        in a text layer.
        
        Parameters:
        
        * layer - The text layer.
        
        Returns:
        
        * letter_spacing (default: 0.0) - The letter-spacing value.
        """
        pass

    def gimp_text_layer_get_line_spacing(self, layer: Gimp.TextLayer=None) -> float:
        """Get the spacing between lines of text.
        
        This procedure returns the line-spacing between lines of text in a text
        layer.
        
        Parameters:
        
        * layer - The text layer.
        
        Returns:
        
        * line_spacing (default: 0.0) - The line-spacing value.
        """
        pass

    def gimp_text_layer_get_markup(self, layer: Gimp.TextLayer=None) -> str:
        """Get the markup from a text layer as string.
        
        This procedure returns the markup of the styles from a text layer. The
        markup will be in the form of Pango's markup - See
        https://www.pango.org/ for more information about Pango and its
        markup.
        
        Parameters:
        
        * layer - The text layer.
        
        Returns:
        
        * markup - The markup which represents the style of the specified text
          layer.
        """
        pass

    def gimp_text_layer_get_text(self, layer: Gimp.TextLayer=None) -> str:
        """Get the text from a text layer as string.
        
        This procedure returns the text from a text layer as a string.
        
        Parameters:
        
        * layer - The text layer.
        
        Returns:
        
        * text - The text from the specified text layer.
        """
        pass

    def gimp_text_layer_new(self, image: Gimp.Image=None, text: str=None, font: Gimp.Font=None, size: float=0.0, unit: Gimp.Unit=None) -> Gimp.TextLayer:
        """Creates a new text layer.
        
        This procedure creates a new text layer. The arguments are kept as
        simple as necessary for the normal case. All text attributes,
        however, can be modified with the appropriate
        gimp_text_layer_set_*() procedures. The new layer still needs to
        be added to the image, as this is not automatic. Add the new
        layer using 'gimp-image-insert-layer'.
        
        Parameters:
        
        * image - The image.
        
        * text - The text to generate (in UTF-8 encoding).
        
        * font - The font to write the text with.
        
        * size (default: 0.0) - The size of text in either pixels or points.
        
        * unit - The units of specified size.
        
        Returns:
        
        * layer - The new text layer.
        """
        pass

    def gimp_text_layer_resize(self, layer: Gimp.TextLayer=None, width: float=0.0, height: float=0.0):
        """Resize the box of a text layer.
        
        This procedure changes the width and height of a text layer while
        keeping it as a text layer and not converting it to a bitmap
        like 'gimp-layer-resize' would do.
        
        Parameters:
        
        * layer - The text layer.
        
        * width (default: 0.0) - The new box width in pixels.
        
        * height (default: 0.0) - The new box height in pixels.
        """
        pass

    def gimp_text_layer_set_antialias(self, layer: Gimp.TextLayer=None, antialias: bool=False):
        """Enable/disable anti-aliasing in a text layer.
        
        This procedure enables or disables anti-aliasing of the text in a text
        layer.
        
        Parameters:
        
        * layer - The text layer.
        
        * antialias (default: False) - Enable/disable antialiasing of the
          text.
        """
        pass

    def gimp_text_layer_set_base_direction(self, layer: Gimp.TextLayer=None, direction: Gimp.TextDirection=Gimp.TextDirection.LTR):
        """Set the base direction in the text layer.
        
        This procedure sets the base direction used in applying the Unicode
        bidirectional algorithm when rendering the text.
        
        Parameters:
        
        * layer - The text layer.
        
        * direction (default: Gimp.TextDirection.LTR) - The base direction of
          the text.
        """
        pass

    def gimp_text_layer_set_color(self, layer: Gimp.TextLayer=None, color: Gegl.Color=None):
        """Set the color of the text in the text layer.
        
        This procedure sets the text color in the text layer 'layer'.
        
        Parameters:
        
        * layer - The text layer.
        
        * color - The color to use for the text.
        """
        pass

    def gimp_text_layer_set_font(self, layer: Gimp.TextLayer=None, font: Gimp.Font=None):
        """Set the font of a text layer.
        
        This procedure modifies the font used in the specified text layer.
        
        Parameters:
        
        * layer - The text layer.
        
        * font - The new font to use.
        """
        pass

    def gimp_text_layer_set_font_size(self, layer: Gimp.TextLayer=None, font_size: float=0.0, unit: Gimp.Unit=None):
        """Set the font size.
        
        This procedure changes the font size of a text layer. The size of your
        font will be a double 'font-size' of 'unit' units.
        
        Parameters:
        
        * layer - The text layer.
        
        * font_size (default: 0.0) - The font size.
        
        * unit - The unit to use for the font size.
        """
        pass

    def gimp_text_layer_set_hint_style(self, layer: Gimp.TextLayer=None, style: Gimp.TextHintStyle=Gimp.TextHintStyle.NONE):
        """Control how font outlines are hinted in a text layer.
        
        This procedure sets the hint style for font outlines in a text layer.
        This controls whether to fit font outlines to the pixel grid,
        and if so, whether to optimize for fidelity or contrast.
        
        Parameters:
        
        * layer - The text layer.
        
        * style (default: Gimp.TextHintStyle.NONE) - The new hint style.
        """
        pass

    def gimp_text_layer_set_indent(self, layer: Gimp.TextLayer=None, indent: float=-8192.0):
        """Set the indentation of the first line in a text layer.
        
        This procedure sets the indentation of the first line in the text layer.
        
        Parameters:
        
        * layer - The text layer.
        
        * indent (default: -8192.0) - The indentation for the first line.
        """
        pass

    def gimp_text_layer_set_justification(self, layer: Gimp.TextLayer=None, justify: Gimp.TextJustification=Gimp.TextJustification.LEFT):
        """Set the justification of the text in a text layer.
        
        This procedure sets the alignment of the lines in the text layer
        relative to each other.
        
        Parameters:
        
        * layer - The text layer.
        
        * justify (default: Gimp.TextJustification.LEFT) - The justification
          for your text.
        """
        pass

    def gimp_text_layer_set_kerning(self, layer: Gimp.TextLayer=None, kerning: bool=False):
        """Enable/disable kerning in a text layer.
        
        This procedure enables or disables kerning in a text layer.
        
        Parameters:
        
        * layer - The text layer.
        
        * kerning (default: False) - Enable/disable kerning in the text.
        """
        pass

    def gimp_text_layer_set_language(self, layer: Gimp.TextLayer=None, language: str=None):
        """Set the language of the text layer.
        
        This procedure sets the language of the text in text layer. For some
        scripts the language has an influence of how the text is
        rendered.
        
        Parameters:
        
        * layer - The text layer.
        
        * language - The new language to use for the text layer.
        """
        pass

    def gimp_text_layer_set_letter_spacing(self, layer: Gimp.TextLayer=None, letter_spacing: float=-8192.0):
        """Adjust the letter spacing in a text layer.
        
        This procedure sets the additional spacing between the single glyphs in
        a text layer.
        
        Parameters:
        
        * layer - The text layer.
        
        * letter_spacing (default: -8192.0) - The additional letter spacing to
          use.
        """
        pass

    def gimp_text_layer_set_line_spacing(self, layer: Gimp.TextLayer=None, line_spacing: float=-8192.0):
        """Adjust the line spacing in a text layer.
        
        This procedure sets the additional spacing used between lines a text
        layer.
        
        Parameters:
        
        * layer - The text layer.
        
        * line_spacing (default: -8192.0) - The additional line spacing to
          use.
        """
        pass

    def gimp_text_layer_set_markup(self, layer: Gimp.TextLayer=None, markup: str=None):
        """Set the markup for a text layer from a string.
        
        This procedure sets the markup of the styles for a text layer. The
        markup should be in the form of Pango's markup - See
        https://docs.gtk.org/Pango/pango_markup.html for a reference.
        Note that GIMP's text tool does not support all of Pango markup.
        Any unsupported markup will still be applied to your text layer,
        yet would be dropped as soon as you edit text with the tool.
        
        Parameters:
        
        * layer - The text layer.
        
        * markup - The new markup to set.
        """
        pass

    def gimp_text_layer_set_text(self, layer: Gimp.TextLayer=None, text: str=None):
        """Set the text of a text layer.
        
        This procedure changes the text of a text layer.
        
        Parameters:
        
        * layer - The text layer.
        
        * text - The new text to set.
        """
        pass

    def gimp_unit_get_data(self, unit_id: int=0) -> Tuple[str, float, int, str, str]:
        """Returns the various data pertaining to a given unit ID.
        
        This procedure returns all properties making up an unit. It is only
        meant for internal usage to query non built-in units and it is a
        programming error to use it directly, in particular for any of
        the built-in units.
        
        Parameters:
        
        * unit_id (default: 0) - The unit's integer ID.
        
        Returns:
        
        * name - The unit's name.
        
        * factor (default: 0.0) - The unit's factor.
        
        * digits (default: 0) - The unit's number of digits.
        
        * symbol - The unit's symbol.
        
        * abbreviation - The unit's abbreviation.
        """
        pass

    def gimp_unit_get_deletion_flag(self, unit: Gimp.Unit=None) -> bool:
        """Returns the deletion flag of the unit.
        
        This procedure returns the deletion flag of the unit. If this value is
        TRUE the unit's definition will not be saved in the user's
        unitrc file on gimp exit.
        
        Parameters:
        
        * unit - The unit.
        
        Returns:
        
        * deletion_flag (default: False) - The unit's deletion flag.
        """
        pass

    def gimp_unit_new(self, name: str=None, factor: float=0.0, digits: int=0, symbol: str=None, abbreviation: str=None) -> Gimp.Unit:
        """Creates a new unit.
        
        This procedure creates a new unit and returns it. Note that the new unit
        will have it's deletion flag set to TRUE, so you will have to
        set it to FALSE with 'gimp-unit-set-deletion-flag' to make it
        persistent.
        
        Parameters:
        
        * name - The new unit's name.
        
        * factor (default: 0.0) - The new unit's factor.
        
        * digits (default: 0) - The new unit's digits.
        
        * symbol - The new unit's symbol.
        
        * abbreviation - The new unit's abbreviation.
        
        Returns:
        
        * unit - The new unit.
        """
        pass

    def gimp_unit_set_deletion_flag(self, unit: Gimp.Unit=None, deletion_flag: bool=False):
        """Sets the deletion flag of a unit.
        
        This procedure sets the unit's deletion flag. If the deletion flag of a
        unit is TRUE on gimp exit, this unit's definition will not be
        saved in the user's unitrc.
        
        Parameters:
        
        * unit - The unit.
        
        * deletion_flag (default: False) - The new deletion flag of the unit.
        """
        pass

    def gimp_version(self) -> str:
        """Returns the host GIMP version.
        
        This procedure returns the version number of the currently running GIMP.
        
        Returns:
        
        * version - GIMP version number.
        """
        pass

    def gimp_xcf_load(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, file: Gio.File=None) -> Gimp.Image:
        """Loads file saved in the .xcf file format.
        
        The XCF file format has been designed specifically for loading and
        saving tiled and layered images in GIMP. This procedure will
        load the specified file.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - Dummy parameter.
        
        * file - The file to load.
        
        Returns:
        
        * image - Output image.
        """
        pass

    def gimp_xcf_save(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, file: Gio.File=None):
        """Saves file in the .xcf file format.
        
        The XCF file format has been designed specifically for loading and
        saving tiled and layered images in GIMP. This procedure will
        save the specified image in the xcf file format.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - Dummy parameter.
        
        * image - Input image.
        
        * file - The file to save the image in.
        """
        pass

    def plug_in_align_layers(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, horizontal_style: str='none', horizontal_base: str='left-edge', vertical_style: str='none', vertical_base: str='top-edge', grid_size: int=10, ignore_bottom_layer: bool=True, use_bottom_layer: bool=False):
        """Align all visible layers of the image.
        
        Image types: *
        Menu label: Align Visi_ble Layers...
        Menu path: <Image>/Image/[Arrange]
        
        Align visible layers.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * horizontal_style (default: none)
        
        * horizontal_base (default: left-edge)
        
        * vertical_style (default: none)
        
        * vertical_base (default: top-edge)
        
        * grid_size (default: 10) - Grid.
        
        * ignore_bottom_layer (default: True) - Ignore the bottom layer even
          if visible.
        
        * use_bottom_layer (default: False) - Use the (invisible) bottom layer
          as the base.
        """
        pass

    def plug_in_animationoptimize(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None) -> Gimp.Image:
        """Modify image to reduce size when saved as GIF animation.
        
        Image types: *
        Menu label: Optimize (for _GIF)
        Menu path: <Image>/Filters/Animation
        
        This procedure applies various optimizations to a GIMP layer-based
        animation in an attempt to reduce the final file size.
        
        If a frame of theanimation can use the 'combine' mode, this procedure
        attempts to maximize the number of ajdacent pixels having the
        same color, whichimproves the compression for some image formats
        such as GIF or MNG.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        Returns:
        
        * result - Resulting image.
        """
        pass

    def plug_in_animationoptimize_diff(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None) -> Gimp.Image:
        """Reduce file size where combining layers is possible.
        
        Image types: *
        Menu label: _Optimize (Difference)
        Menu path: <Image>/Filters/Animation
        
        This procedure applies various optimizations to a GIMP layer-based
        animation in an attempt to reduce the final file size.
        
        If a frame of the animation can use the 'combine' mode, this procedure
        uses a simple difference between the frames.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        Returns:
        
        * result - Resulting image.
        """
        pass

    def plug_in_animationplay(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None):
        """Preview a GIMP layer-based animation.
        
        Image types: *
        Menu label: _Playback...
        Menu path: <Image>/Filters/Animation
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        """
        pass

    def plug_in_animationunoptimize(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None) -> Gimp.Image:
        """Remove optimization to make editing easier.
        
        Image types: *
        Menu label: _Unoptimize
        Menu path: <Image>/Filters/Animation
        
        This procedure 'simplifies' a GIMP layer-based animation that has been
        optimized for animation. This makes editing the animation much
        easier.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        Returns:
        
        * result - Resulting image.
        """
        pass

    def plug_in_autocrop(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawable: Gimp.Drawable=None):
        """Remove empty borders from the image.
        
        Remove empty borders from the image.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - Input image).
        
        * drawable - Input drawable.
        """
        pass

    def plug_in_autocrop_layer(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawable: Gimp.Drawable=None):
        """Crop the selected layers based on empty borders of the input
        drawable.
        
        Crop the selected layers of the input "image" based on empty borders of
        the input "drawable".
        
        The input drawable serves as a base for detecting cropping extents
        (transparency or background color), and is not necessarily among
        the cropped layers (the current selected layers).
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - Input image).
        
        * drawable - Input drawable.
        """
        pass

    def plug_in_blinds(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, angle_displacement: int=30, num_segments: int=3, orientation: str='horizontal', bg_transparent: bool=False):
        """Simulate an image painted on window blinds.
        
        Image types: RGB*, GRAY*
        Menu label: _Blinds...
        Menu path: <Image>/Filters/Distorts
        
        More here later.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * angle_displacement (default: 30) - Angle of Displacement.
        
        * num_segments (default: 3) - Number of segments in blinds.
        
        * orientation (default: horizontal) - The orientation.
        
        * bg_transparent (default: False) - Background transparent.
        """
        pass

    def plug_in_borderaverage(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, thickness: int=3, bucket_exponent: str='levels-16') -> Gegl.Color:
        """Set foreground to the average color of the image border.
        
        Image types: RGB*
        Menu label: _Border Average...
        Menu path: <Image>/Colors/Info
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * thickness (default: 3) - Border size to take in count.
        
        * bucket_exponent (default: levels-16) - Bits for bucket size.
        
        Returns:
        
        * borderaverage - The average color of the specified border.
        """
        pass

    def plug_in_busy_dialog(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, read_fd: int=0, write_fd: int=0, message: str=None, cancelable: bool=False):
        """Show a dialog while waiting for an operation to finish.
        
        Used by GIMP to display a dialog, containing a spinner and a custom
        message, while waiting for an ongoing operation to finish.
        Optionally, the dialog may provide a "Cancel" button, which can
        be used to cancel the operation.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * read_fd (default: 0) - The read file descriptor.
        
        * write_fd (default: 0) - The write file descriptor.
        
        * message - The message.
        
        * cancelable (default: False) - Whether the dialog is cancelable.
        """
        pass

    def plug_in_checkerboard(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, psychobilly: bool=False, check_size: int=10):
        """Create a checkerboard pattern.
        
        Image types: RGB*, GRAY*
        Menu label: _Checkerboard (legacy)...
        Menu path: <Image>/Filters/Render/Pattern
        
        More here later.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * psychobilly (default: False) - Render a psychobilly checkerboard.
        
        * check_size (default: 10) - Size of the checks.
        """
        pass

    def plug_in_cml_explorer(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, parameter_file: Gio.File=None):
        """Create abstract Coupled-Map Lattice patterns.
        
        Image types: RGB*, GRAY*
        Menu label: CML _Explorer...
        Menu path: <Image>/Filters/Render/Pattern
        
        Make an image of Coupled-Map Lattice (CML). CML is a kind of Cellular
        Automata on continuous (value) domain. In
        GIMP_RUN_NONINTERACTIVE, the name of a parameter file is passed
        as the 4th arg. You can control CML_explorer via parameter file.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * parameter_file - The parameter file from which CML_explorer makes an
          image. This argument is only used in non-interactive runs.
        """
        pass

    def plug_in_colormap_remap(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, map: GLib.Bytes=None):
        """Rearrange the colormap.
        
        Image types: INDEXED*
        Menu label: R_earrange Colormap...
        Menu paths: <Image>/Colors/Map/[Colormap], <Colormap>/Colormap Menu
        
        This procedure takes an indexed image and lets you alter the positions
        of colors in the colormap without visually changing the image.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * map - Remap array for the colormap.
        """
        pass

    def plug_in_colormap_swap(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, index1: int=0, index2: int=0):
        """Swap two colors in the colormap.
        
        Image types: INDEXED*
        Menu label: _Swap Colors
        
        This procedure takes an indexed image and lets you swap the positions of
        two colors in the colormap without visually changing the image.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * index1 (default: 0) - First index in the colormap.
        
        * index2 (default: 0) - Second (other) index in the colormap.
        """
        pass

    def plug_in_compose(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, image_2: Gimp.Image=None, image_3: Gimp.Image=None, image_4: Gimp.Image=None, compose_type: str='rgb') -> Gimp.Image:
        """Create an image using multiple gray images as color channels.
        
        Image types: GRAY*
        Menu label: C_ompose...
        Menu path: <Image>/Colors/Components
        
        This function creates a new image from multiple gray images.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * image_2 - Second input image.
        
        * image_3 - Third input image.
        
        * image_4 - Fourth input image.
        
        * compose_type (default: rgb) - What to compose: "RGB", "RGBA", "HSV",
          "HSL", "CMYK", "LAB", "LCH", "YCbCr_ITU_R470",
          "YCbCr_ITU_R709", "YCbCr_ITU_R470_256",
          "YCbCr_ITU_R709_256".
        
        Returns:
        
        * new_image - Output image.
        """
        pass

    def plug_in_curve_bend(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, rotation: float=0.0, smoothing: bool=True, antialias: bool=True, work_on_copy: bool=False, curve_type: str='smooth', curve_border: str='upper', upper_point_x: Gimp.DoubleArray=None, upper_point_y: Gimp.DoubleArray=None, lower_point_x: Gimp.DoubleArray=None, lower_point_y: Gimp.DoubleArray=None, upper_val_y: GLib.Bytes=None, lower_val_y: GLib.Bytes=None) -> Gimp.Layer:
        """Bend the image using two control curves.
        
        Image types: RGB*, GRAY*
        Menu label: _Curve Bend...
        Menu path: <Image>/Filters/Distorts
        
        This plug-in bends the active layer. If there is a current selection it
        is copied to floating selection and the curve_bend distortion is
        done on the floating selection. If work_on_copy parameter is
        TRUE, the curve_bend distortion is done on a copy of the active
        layer (or floating selection). The upper and lower edges are
        bent in shape of 2 spline curves. Both (upper and lower) curves
        are determined by up to 17 points or by 256 Y-Values if
        curve_type == 1 (freehand mode). If rotation is not 0, the layer
        is rotated before and rotated back after the bend operation.
        This enables bending in other directions than vertical. Bending
        usually changes the size of the handled layer. This plug-in sets
        the offsets of the handled layer to keep its center at the same
        position.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * rotation (default: 0.0) - Direction {angle 0 to 360 degree } of the
          bend effect.
        
        * smoothing (default: True) - Smoothing.
        
        * antialias (default: True) - Antialias.
        
        * work_on_copy (default: False) - Copy the drawable and bend the copy.
        
        * curve_type (default: smooth) - Whether to use Smooth (17 points) or
          Freehand (256 points) to draw the curve.
        
        * curve_border (default: upper) - Choose the active border line to
          edit.
        
        * upper_point_x - Array of 17 x point coords { 0.0 <= x <= 1.0 or -1
          for unused point }.
        
        * upper_point_y - Array of 17 y point coords { 0.0 <= y <= 1.0 or -1
          for unused point }.
        
        * lower_point_x - Array of 17 x point coords { 0.0 <= x <= 1.0 or -1
          for unused point }.
        
        * lower_point_y - Array of 17 y point coords { 0.0 <= y <= 1.0 or -1
          for unused point }.
        
        * upper_val_y - Array of 256 y freehand coords { 0 <= y <= 255 }.
        
        * lower_val_y - Array of 256 y freehand coords { 0 <= y <= 255 }.
        
        Returns:
        
        * bent_layer - The transformed layer.
        """
        pass

    def plug_in_dbbrowser(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE):
        """List available procedures in the PDB.
        
        Menu label: Procedure _Browser
        Menu path: <Image>/Help/[Programming]
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        """
        pass

    def plug_in_decompose(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, decompose_type: str='rgb', layers_mode: bool=True, use_registration: bool=False) -> Tuple[Gimp.Image, Gimp.Image, Gimp.Image, Gimp.Image]:
        """Decompose an image into separate colorspace components.
        
        Image types: RGB*
        Menu label: _Decompose...
        Menu path: <Image>/Colors/Components
        
        This function creates new gray images with different channel information
        in each of them.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * decompose_type (default: rgb) - The model to decompose to.
        
        * layers_mode (default: True) - Create channels as layers in a single
          image.
        
        * use_registration (default: False) - When enabled, pixels in the
          foreground color will appear black in all output images.
          This can be used for things like crop marks that have to
          show up on all channels.
        
        Returns:
        
        * new_image_1 - Output gray image 1.
        
        * new_image_2 - Output gray image 2 (N/A for single channel extract).
        
        * new_image_3 - Output gray image 3 (N/A for single channel extract).
        
        * new_image_4 - Output gray image 4 (N/A for single channel extract).
        """
        pass

    def plug_in_depth_merge(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, source_1: Gimp.Drawable=None, depth_map_1: Gimp.Drawable=None, source_2: Gimp.Drawable=None, depth_map_2: Gimp.Drawable=None, overlap: float=0.0, offset: float=0.0, scale_1: float=1.0, scale_2: float=1.0):
        """Combine two images using depth maps (z-buffers).
        
        Image types: RGB*, GRAY*
        Menu label: _Depth Merge...
        Menu path: <Image>/Filters/Combine
        
        Taking as input two full-color, full-alpha images and two corresponding
        grayscale depth maps, this plug-in combines the images based on
        which is closer (has a lower depth map value) at each point.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * source_1 - Source 1.
        
        * depth_map_1 - Depth map 1.
        
        * source_2 - Source 2.
        
        * depth_map_2 - Depth map 2.
        
        * overlap (default: 0.0) - Overlap.
        
        * offset (default: 0.0) - Depth relative offset.
        
        * scale_1 (default: 1.0) - Depth relative scale 1.
        
        * scale_2 (default: 1.0) - Depth relative scale 2.
        """
        pass

    def plug_in_despeckle(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, radius: int=3, type: str='adaptive', black: int=7, white: int=248):
        """Remove speckle noise from the image.
        
        Image types: RGB*, GRAY*
        Menu label: Des_peckle...
        Menu path: <Image>/Filters/Enhance
        
        This plug-in selectively performs a median or adaptive box filter on an
        image.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * radius (default: 3) - Filter box radius.
        
        * type (default: adaptive) - Filter type.
        
        * black (default: 7) - Black level.
        
        * white (default: 248) - White level.
        """
        pass

    def plug_in_destripe(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, avg_width: int=36, create_histogram: bool=False):
        """Remove vertical stripe artifacts from the image.
        
        Image types: RGB*, GRAY*
        Menu label: Des_tripe...
        Menu path: <Image>/Colors/Tone Mapping
        
        This plug-in tries to remove vertical stripes from an image.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * avg_width (default: 36) - Averaging filter width.
        
        * create_histogram (default: False) - Output a histogram.
        """
        pass

    def plug_in_drawable_compose(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, drawable_2: Gimp.Drawable=None, drawable_3: Gimp.Drawable=None, drawable_4: Gimp.Drawable=None, compose_type: str='rgb') -> Gimp.Image:
        """Compose an image from multiple drawables of gray images.
        
        Image types: GRAY*
        
        This function creates a new image from multiple drawables of gray
        images.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * drawable_2 - Second input drawable.
        
        * drawable_3 - Third input drawable.
        
        * drawable_4 - Fourth input drawable.
        
        * compose_type (default: rgb) - What to compose: "RGB", "RGBA", "HSV",
          "HSL", "CMYK", "LAB", "LCH", "YCbCr_ITU_R470",
          "YCbCr_ITU_R709", "YCbCr_ITU_R470_256",
          "YCbCr_ITU_R709_256".
        
        Returns:
        
        * new_image - Output image.
        """
        pass

    def plug_in_film(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, film_height: int=0, film_color: Gegl.Color=None, number_start: int=1, number_font: Gimp.Font=None, number_color: Gegl.Color=None, at_top: bool=True, at_bottom: bool=True, images: GObject.Value=None, picture_height: float=0.695, picture_spacing: float=0.04, hole_offset: float=0.058, hole_width: float=0.052, hole_height: float=0.081, hole_spacing: float=0.081, number_height: float=0.052) -> Gimp.Image:
        """Combine several images on a film strip.
        
        Image types: *
        Menu label: _Filmstrip...
        Menu path: <Image>/Filters/Combine
        
        Compose several images to a roll film.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * film_height (default: 0) - Height of film (0: fit to images).
        
        * film_color - Color of the film.
        
        * number_start (default: 1) - Start index for numbering.
        
        * number_font - Font for drawing numbers.
        
        * number_color - Color for numbers.
        
        * at_top (default: True) - Draw numbers at top.
        
        * at_bottom (default: True) - Draw numbers at bottom.
        
        * images - Images to be used for film.
        
        * picture_height (default: 0.695) - As fraction of the strip height.
        
        * picture_spacing (default: 0.04) - The spacing between 2 images, as
          fraction of the strip height.
        
        * hole_offset (default: 0.058) - The offset from the edge of film, as
          fraction of the strip height.
        
        * hole_width (default: 0.052) - The width of the holes, as fraction of
          the strip height.
        
        * hole_height (default: 0.081) - The height of the holes, as fraction
          of the strip height.
        
        * hole_spacing (default: 0.081) - The distance between holes, as
          fraction of the strip height.
        
        * number_height (default: 0.052) - The height of drawn numbers, as
          fraction of the strip height.
        
        Returns:
        
        * new_image - Output image.
        """
        pass

    def plug_in_flame(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, brightness: float=1.0, contrast: float=1.0, gamma: float=1.0, sample_density: float=5.0, spatial_oversample: int=2, spatial_filter_radius: float=0.75, zoom: float=0.0, x: float=0.0, y: float=0.0):
        """Create cosmic recursive fractal flames.
        
        Image types: RGB*
        Menu label: _Flame...
        Menu path: <Image>/Filters/Render/Fractals
        
        Create cosmic recursive fractal flames.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * brightness (default: 1.0)
        
        * contrast (default: 1.0)
        
        * gamma (default: 1.0)
        
        * sample_density (default: 5.0)
        
        * spatial_oversample (default: 2)
        
        * spatial_filter_radius (default: 0.75)
        
        * zoom (default: 0.0)
        
        * x (default: 0.0)
        
        * y (default: 0.0)
        """
        pass

    def plug_in_fractalexplorer(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, fractal_type: str='mandelbrot', xmin: float=-2.0, xmax: float=2.0, ymin: float=-1.5, ymax: float=1.5, iter: float=50.0, cx: float=-0.75, cy: float=-0.2, color_mode: str='colormap', red_stretch: float=1.0, green_stretch: float=1.0, blue_stretch: float=1.0, red_mode: str='red-cos', green_mode: str='green-cos', blue_mode: str='blue-sin', red_invert: bool=False, green_invert: bool=False, blue_invert: bool=False, n_colors: int=512, use_loglog_smoothing: bool=False):
        """Render fractal art.
        
        Image types: RGB*, GRAY*
        Menu label: _Fractal Explorer...
        Menu path: <Image>/Filters/Render/Fractals
        
        No help yet.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * fractal_type (default: mandelbrot) - Type of Fractal Pattern.
        
        * xmin (default: -2.0) - X min fractal image delimiter.
        
        * xmax (default: 2.0) - X max fractal image delimiter.
        
        * ymin (default: -1.5) - Y min fractal image delimiter.
        
        * ymax (default: 1.5) - Y max fractal image delimiter.
        
        * iter (default: 50.0) - Iteration value.
        
        * cx (default: -0.75) - cx value.
        
        * cy (default: -0.2) - cy value.
        
        * color_mode (default: colormap) - Apply specified color map or active
          gradient to final image.
        
        * red_stretch (default: 1.0) - Red stretching factor.
        
        * green_stretch (default: 1.0) - Green stretching factor.
        
        * blue_stretch (default: 1.0) - Blue stretching factor.
        
        * red_mode (default: red-cos) - Red application mode.
        
        * green_mode (default: green-cos) - Green application mode.
        
        * blue_mode (default: blue-sin) - Blue application mode.
        
        * red_invert (default: False) - Red inversion mode.
        
        * green_invert (default: False) - Green inversion mode.
        
        * blue_invert (default: False) - Blue inversion mode.
        
        * n_colors (default: 512) - Number of Colors for mapping.
        
        * use_loglog_smoothing (default: False) - Use log log smoothing to
          eliminate "banding" in the result.
        """
        pass

    def plug_in_gfig(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None):
        """Create geometric shapes.
        
        Image types: RGB*, GRAY*
        Menu label: _Gfig...
        Menu path: <Image>/Filters/Render
        
        Draw Vector Graphics and paint them onto your images. Gfig allows you to
        draw many types of objects including Lines, Circles, Ellipses,
        Curves, Polygons, pointed stars, Bezier curves, and Spirals.
        Objects can be painted using Brushes or other tools or filled
        using colors or patterns. Gfig objects can also be used to
        create selections.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        """
        pass

    def plug_in_gflare(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, gflare_name: str='Default', center_x: int=128, center_y: int=128, radius: float=100.0, rotation: float=0.0, hue: float=0.0, vector_angle: float=60.0, vector_length: float=400.0, use_asupsample: bool=False, asupsample_max_depth: int=3, asupsample_threshold: float=0.2):
        """Produce a lense flare effect using gradients.
        
        Image types: RGB*, GRAY*
        Menu label: _Gradient Flare...
        Menu path: <Image>/Filters/Light and Shadow/[Light]
        
        This plug-in produces a lense flare effect using custom gradients. In
        interactive call, the user can edit their own favorite lense
        flare (GFlare) and render it. Edited gflare is saved
        automatically to the folder in gflare-path, if it is defined in
        gimprc. In non-interactive call, the user can only render one of
        GFlare which has been stored in gflare-path already.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * gflare_name (default: Default) - Name of the GFlare to render.
        
        * center_x (default: 128) - X coordinate of center of GFlare.
        
        * center_y (default: 128) - Y coordinate of center of GFlare.
        
        * radius (default: 100.0) - Radius of GFlare (pixel).
        
        * rotation (default: 0.0) - Rotation of GFlare (degree).
        
        * hue (default: 0.0) - Hue rotation of GFlare (degree).
        
        * vector_angle (default: 60.0) - Vector angle for second flares
          (degree).
        
        * vector_length (default: 400.0) - Vector length for second flares
          (percentage of Radius).
        
        * use_asupsample (default: False) - Use adaptive supersampling while
          rendering.
        
        * asupsample_max_depth (default: 3) - Max depth for adaptive
          supersampling.
        
        * asupsample_threshold (default: 0.2) - Threshold for adaptive
          supersampling.
        """
        pass

    def plug_in_gimpressionist(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, preset: str=None):
        """Performs various artistic operations.
        
        Image types: RGB*, GRAY*
        Menu label: _GIMPressionist...
        Menu path: <Image>/Filters/Artistic
        
        Performs various artistic operations on an image.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * preset - Preset Name.
        """
        pass

    def plug_in_goat_exercise_c(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None):
        """Plug-in example in C.
        
        Image types: *
        Menu label: Plug-In Example in _C
        Menu path: <Image>/Filters/Development/Plug-In Examples
        
        Plug-in example in C.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        """
        pass

    def plug_in_goat_exercise_python(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None):
        """Plug-in example in Python 3.
        
        Image types: *
        Menu label: Plug-In Example in _Python 3
        Menu path: <Image>/Filters/Development/Plug-In Examples
        
        Plug-in example in Python 3.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        """
        pass

    def plug_in_goat_exercise_vala(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None):
        """Plug-in example in Vala.
        
        Image types: RGB*, INDEXED*, GRAY*
        Menu label: Plug-In Example in _Vala
        Menu path: <Image>/Filters/Development/Plug-In Examples
        
        Plug-in example in Vala.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        """
        pass

    def plug_in_gradmap(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None):
        """Recolor the image using colors from the active gradient.
        
        Image types: RGB*, GRAY*
        Menu label: _Gradient Map
        Menu path: <Image>/Colors/Map
        
        This plug-in maps the contents of the specified drawable with active
        gradient. It calculates luminosity of each pixel and replaces
        the pixel by the sample of active gradient at the position
        proportional to that luminosity. Complete black pixel becomes
        the leftmost color of the gradient, and complete white becomes
        the rightmost. Works on both Grayscale and RGB image
        with/without alpha channel.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        """
        pass

    def plug_in_grid(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, hwidth: int=1, hspace: int=16, hoffset: int=8, hcolor: Gegl.Color=None, vwidth: int=1, vspace: int=16, voffset: int=8, vcolor: Gegl.Color=None, iwidth: int=0, ispace: int=2, ioffset: int=6, icolor: Gegl.Color=None):
        """Draw a grid on the image.
        
        Image types: *
        Menu label: _Grid (legacy)...
        Menu path: <Image>/Filters/Render/Pattern
        
        Draws a grid using the specified colors. The grid origin is the upper
        left corner.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * hwidth (default: 1) - Horizontal width.
        
        * hspace (default: 16) - Horizontal spacing.
        
        * hoffset (default: 8) - Horizontal offset.
        
        * hcolor - Horizontal color.
        
        * vwidth (default: 1) - Vertical width.
        
        * vspace (default: 16) - Vertical spacing.
        
        * voffset (default: 8) - Vertical offset.
        
        * vcolor - Vertical color.
        
        * iwidth (default: 0) - Intersection width.
        
        * ispace (default: 2) - Intersection spacing.
        
        * ioffset (default: 6) - Intersection offset.
        
        * icolor - Intersection color.
        """
        pass

    def plug_in_guillotine(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None) -> Any:
        """Slice the image into subimages using guides.
        
        Image types: *
        Menu label: Slice Using G_uides
        Menu path: <Image>/Image/[Crop]
        
        This function takes an image and slices it along its guides, creating
        new images. The original image is not modified.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        Returns:
        
        * images - Output images.
        """
        pass

    def plug_in_hot(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, mode: str='ntsc', action: str='reduce-luminance', new_layer: bool=True):
        """Find and fix pixels that may be unsafely bright.
        
        Image types: RGB
        Menu label: _Hot...
        Menu path: <Image>/Colors/[Modify]
        
        Hot scans an image for pixels that will give unsave values of
        chrominance or composite signal amplitude when encoded into an
        NTSC or PAL signal. Three actions can be performed on these
        'hot' pixels. (0) reduce luminance, (1) reduce saturation, or
        (2) Blacken.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * mode (default: ntsc) - Signal mode.
        
        * action (default: reduce-luminance) - Action.
        
        * new_layer (default: True) - Create a new layer.
        """
        pass

    def plug_in_ifscompose(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None):
        """Create an Iterated Function System (IFS) fractal.
        
        Image types: *
        Menu label: _IFS Fractal...
        Menu path: <Image>/Filters/Render/Fractals
        
        Interactively create an Iterated Function System fractal. Use the window
        on the upper left to adjustthe component transformations of the
        fractal. The operation that is performed is selected by the
        buttons underneath the window, or from a menu popped up by the
        right mouse button. The fractal will be rendered with a
        transparent background if the current image has an alpha
        channel.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        """
        pass

    def plug_in_imagemap(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None):
        """Create a clickable imagemap.
        
        Image types: *
        Menu label: _Image Map...
        Menu path: <Image>/Filters/Web
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        """
        pass

    def plug_in_jigsaw(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, x: int=5, y: int=5, style: str='square', blend_lines: int=3, blend_amount: float=0.5):
        """Add a jigsaw-puzzle pattern to the image.
        
        Image types: RGB*
        Menu label: _Jigsaw...
        Menu path: <Image>/Filters/Render/Pattern
        
        Jigsaw puzzle look.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * x (default: 5) - Number of pieces going across.
        
        * y (default: 5) - Number of pieces going down.
        
        * style (default: square) - The style/shape of the jigsaw puzzle.
        
        * blend_lines (default: 3) - Degree of slope of each piece's edge.
        
        * blend_amount (default: 0.5) - The amount of highlighting on the
          edges of each piece.
        """
        pass

    def plug_in_lic(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, effect_channel: str='brightness', effect_operator: str='gradient', effect_convolve: str='with-source-image', effect_image: Gimp.Drawable=None, filter_length: float=5.0, noise_magnitude: float=2.0, integration_steps: float=25.0, min_value: float=-25.0, max_value: float=25.0):
        """Special effects that nobody understands.
        
        Image types: RGB*
        Menu label: _Van Gogh (LIC)...
        Menu path: <Image>/Filters/Artistic
        
        No help yet.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * effect_channel (default: brightness) - Effect Channel.
        
        * effect_operator (default: gradient) - Effect Operator.
        
        * effect_convolve (default: with-source-image) - Convolve.
        
        * effect_image - Effect image.
        
        * filter_length (default: 5.0) - Filter length.
        
        * noise_magnitude (default: 2.0) - Noise Magnitude.
        
        * integration_steps (default: 25.0) - Integration steps.
        
        * min_value (default: -25.0) - Minimum value.
        
        * max_value (default: 25.0) - Maximum value.
        """
        pass

    def plug_in_lighting(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, bump_drawable: Gimp.Drawable=None, env_drawable: Gimp.Drawable=None, do_bumpmap: bool=True, do_envmap: bool=True, bumpmap_type: str='bumpmap-linear', bumpmap_max_height: float=0.1, light_type_1: str='light-point', light_color_1: Gegl.Color=None, light_intensity_1: float=1.0, light_position_x_1: float=-1.0, light_position_y_1: float=-1.0, light_position_z_1: float=1.0, light_direction_x_1: float=-1.0, light_direction_y_1: float=-1.0, light_direction_z_1: float=1.0, ambient_intensity: float=0.2, diffuse_intensity: float=0.5, diffuse_reflectivity: float=0.4, specular_reflectivity: float=0.5, highlight: float=27.0, metallic: bool=False, antialiasing: bool=False, new_image: bool=False, transparent_background: bool=False, distance: float=0.25):
        """Apply various lighting effects to an image.
        
        Image types: RGB*
        Menu label: _Lighting Effects...
        Menu path: <Image>/Filters/Light and Shadow/[Light]
        
        No help yet.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * bump_drawable - Bumpmap drawable (set to NULL if disabled).
        
        * env_drawable - Environmentmap drawable (set to NULL if disabled).
        
        * do_bumpmap (default: True) - Enable bumpmapping.
        
        * do_envmap (default: True) - Enable envmapping.
        
        * bumpmap_type (default: bumpmap-linear) - Type of mapping.
        
        * bumpmap_max_height (default: 0.1) - The maximum height of the
          bumpmap.
        
        * light_type_1 (default: light-point) - Type of light source.
        
        * light_color_1 - Light source color.
        
        * light_intensity_1 (default: 1.0) - Light source intensity.
        
        * light_position_x_1 (default: -1.0) - Light source position (x,y,z).
        
        * light_position_y_1 (default: -1.0) - Light source position (x,y,z).
        
        * light_position_z_1 (default: 1.0) - Light source position (x,y,z).
        
        * light_direction_x_1 (default: -1.0) - Light source direction
          (x,y,z).
        
        * light_direction_y_1 (default: -1.0) - Light source direction
          (x,y,z).
        
        * light_direction_z_1 (default: 1.0) - Light source direction (x,y,z).
        
        * ambient_intensity (default: 0.2) - Material ambient intensity
          (Glowing).
        
        * diffuse_intensity (default: 0.5) - Material diffuse intensity
          (Bright).
        
        * diffuse_reflectivity (default: 0.4) - Material diffuse reflectivity.
        
        * specular_reflectivity (default: 0.5) - Material specular
          reflectivity.
        
        * highlight (default: 27.0) - Material highlight (note, it's
          exponential) (Polished).
        
        * metallic (default: False) - Make surfaces look metallic.
        
        * antialiasing (default: False) - Apply antialiasing.
        
        * new_image (default: False) - Create a new image.
        
        * transparent_background (default: False) - Make background
          transparent.
        
        * distance (default: 0.25) - Distance of observer from surface.
        """
        pass

    def plug_in_map_object(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, map_type: str='map-plane', viewpoint_x: float=0.5, viewpoint_y: float=0.5, viewpoint_z: float=2.0, position_x: float=0.5, position_y: float=0.5, position_z: float=0.0, first_axis_x: float=1.0, first_axis_y: float=0.0, first_axis_z: float=0.0, second_axis_x: float=0.0, second_axis_y: float=1.0, second_axis_z: float=0.0, rotation_angle_x: float=0.0, rotation_angle_y: float=0.0, rotation_angle_z: float=0.0, light_type: str='point-light', light_color: Gegl.Color=None, light_position_x: float=-0.5, light_position_y: float=-0.5, light_position_z: float=2.0, light_direction_x: float=-1.0, light_direction_y: float=-1.0, light_direction_z: float=1.0, ambient_intensity: float=0.3, diffuse_intensity: float=1.0, diffuse_reflectivity: float=0.5, specular_reflectivity: float=0.5, highlight: float=27.0, antialiasing: bool=True, depth: float=3.0, threshold: float=0.25, tiled: bool=False, new_image: bool=False, new_layer: bool=False, transparent_background: bool=False, sphere_radius: float=0.25, box_front_drawable: Gimp.Drawable=None, box_back_drawable: Gimp.Drawable=None, box_top_drawable: Gimp.Drawable=None, box_bottom_drawable: Gimp.Drawable=None, box_left_drawable: Gimp.Drawable=None, box_right_drawable: Gimp.Drawable=None, x_scale: float=0.5, y_scale: float=0.5, z_scale: float=0.5, cyl_top_drawable: Gimp.Drawable=None, cyl_bottom_drawable: Gimp.Drawable=None, cylinder_radius: float=0.25, cylinder_length: float=0.25):
        """Map the image to an object (plane, sphere, box or cylinder).
        
        Image types: RGB*
        Menu label: Map _Object...
        Menu path: <Image>/Filters/Map
        
        No help yet.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * map_type (default: map-plane) - Type of mapping.
        
        * viewpoint_x (default: 0.5) - Position of viewpoint (x,y,z).
        
        * viewpoint_y (default: 0.5) - Position of viewpoint (x,y,z).
        
        * viewpoint_z (default: 2.0) - Position of viewpoint (x,y,z).
        
        * position_x (default: 0.5) - Object position (x,y,z).
        
        * position_y (default: 0.5) - Object position (x,y,z).
        
        * position_z (default: 0.0) - Object position (x,y,z).
        
        * first_axis_x (default: 1.0) - First axis of object (x,y,z).
        
        * first_axis_y (default: 0.0) - First axis of object (x,y,z).
        
        * first_axis_z (default: 0.0) - First axis of object (x,y,z).
        
        * second_axis_x (default: 0.0) - Second axis of object (x,y,z).
        
        * second_axis_y (default: 1.0) - Second axis of object (x,y,z).
        
        * second_axis_z (default: 0.0) - Second axis of object (x,y,z).
        
        * rotation_angle_x (default: 0.0) - Rotation about X axis in degrees.
        
        * rotation_angle_y (default: 0.0) - Rotation about Y axis in degrees.
        
        * rotation_angle_z (default: 0.0) - Rotation about Z axis in degrees.
        
        * light_type (default: point-light) - Type of lightsource.
        
        * light_color - Light source color.
        
        * light_position_x (default: -0.5) - Light source position (x,y,z).
        
        * light_position_y (default: -0.5) - Light source position (x,y,z).
        
        * light_position_z (default: 2.0) - Light source position (x,y,z).
        
        * light_direction_x (default: -1.0) - Light source direction (x,y,z).
        
        * light_direction_y (default: -1.0) - Light source direction (x,y,z).
        
        * light_direction_z (default: 1.0) - Light source direction (x,y,z).
        
        * ambient_intensity (default: 0.3) - Material ambient intensity.
        
        * diffuse_intensity (default: 1.0) - Material diffuse intensity.
        
        * diffuse_reflectivity (default: 0.5) - Material diffuse reflectivity.
        
        * specular_reflectivity (default: 0.5) - Material specular
          reflectivity.
        
        * highlight (default: 27.0) - Material highlight (note, it's
          exponential).
        
        * antialiasing (default: True) - Apply antialiasing.
        
        * depth (default: 3.0) - Antialiasing quality. Higher is better, but
          slower.
        
        * threshold (default: 0.25) - Stop when pixel differences are smaller
          than this value.
        
        * tiled (default: False) - Tile source image.
        
        * new_image (default: False) - Create a new image.
        
        * new_layer (default: False) - Create a new layer when applying
          filter.
        
        * transparent_background (default: False) - Make background
          transparent.
        
        * sphere_radius (default: 0.25) - Sphere radius.
        
        * box_front_drawable - Box front face (set this to NULL if not used).
        
        * box_back_drawable - Box back face.
        
        * box_top_drawable - Box top face.
        
        * box_bottom_drawable - Box bottom face.
        
        * box_left_drawable - Box left face.
        
        * box_right_drawable - Box right face.
        
        * x_scale (default: 0.5) - Box X size.
        
        * y_scale (default: 0.5) - Box Y size.
        
        * z_scale (default: 0.5) - Box Z size.
        
        * cyl_top_drawable - Cylinder top face (set this to NULL if not used).
        
        * cyl_bottom_drawable - Cylinder bottom face (set this to NULL if not
          used).
        
        * cylinder_radius (default: 0.25) - Cylinder radius.
        
        * cylinder_length (default: 0.25) - Cylinder length.
        """
        pass

    def plug_in_metadata_editor(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, parent_handle: GLib.Bytes=None):
        """Edit metadata (IPTC, EXIF, XMP).
        
        Image types: *
        Menu label: _Edit Metadata
        Menu path: <Image>/Image/Metadata
        
        Edit metadata information attached to the current image. Some or all of
        this metadata will be saved in the file, depending on the output
        file format.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * parent_handle - The opaque handle of the window to set this
          plug-in's dialog transient to.
        """
        pass

    def plug_in_metadata_viewer(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None):
        """View metadata (Exif, IPTC, XMP).
        
        Image types: *
        Menu label: _View Metadata
        Menu path: <Image>/Image/Metadata
        
        View metadata information attached to the current image. This can
        include Exif, IPTC and/or XMP information.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        """
        pass

    def plug_in_nl_filter(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, alpha: float=0.3, radius: float=0.3333333333333333, filter: str='alpha-trim'):
        """Nonlinear swiss army knife filter.
        
        Image types: RGB, GRAY
        Menu label: _NL Filter...
        Menu path: <Image>/Filters/Enhance
        
        This is the pnmnlfilt, in GIMP's clothing. See the pnmnlfilt manpage for
        details.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * alpha (default: 0.3) - The amount of the filter to apply.
        
        * radius (default: 0.3333333333333333) - The filter radius.
        
        * filter (default: alpha-trim) - The Filter to Run.
        """
        pass

    def plug_in_pagecurl(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, colors: str='fg-bg', edge: str='lower-right', orientation: str='vertical', shade: bool=True, opacity: float=0.0) -> Gimp.Layer:
        """Curl up one of the image corners.
        
        Image types: RGB*, GRAY*
        Menu label: _Pagecurl...
        Menu path: <Image>/Filters/Distorts
        
        This plug-in creates a pagecurl-effect.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * colors (default: fg-bg)
        
        * edge (default: lower-right) - Corner which is curled.
        
        * orientation (default: vertical)
        
        * shade (default: True) - Shade the region under the curl.
        
        * opacity (default: 0.0) - Opacity.
        
        Returns:
        
        * curl_layer - The new layer with the curl.
        """
        pass

    def plug_in_palettemap(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None):
        """Recolor the image using colors from the active palette.
        
        Image types: RGB*, GRAY*
        Menu label: _Palette Map
        Menu path: <Image>/Colors/Map
        
        This plug-in maps the contents of the specified drawable with the active
        palette. It calculates luminosity of each pixel and replaces the
        pixel by the palette sample at the corresponding index. A
        complete black pixel becomes the lowest palette entry, and
        complete white becomes the highest. Works on both Grayscale and
        RGB image with/without alpha channel.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        """
        pass

    def plug_in_plug_in_details(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE):
        """Display information about plug-ins.
        
        Menu label: _Plug-In Browser
        Menu path: <Image>/Help/[Programming]
        
        Allows one to browse the plug-in menus system. You can search for
        plug-in names, sort by name or menu location and you can view a
        tree representation of the plug-in menus. Can also be of help to
        find where new plug-ins have installed themselves in the menus.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        """
        pass

    def plug_in_qbist(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, anti_aliasing: bool=True):
        """Generate a huge variety of abstract patterns.
        
        Image types: RGB*
        Menu label: _Qbist...
        Menu path: <Image>/Filters/Render/Pattern
        
        This Plug-in is based on an article by Jörn Loviscach (appeared in c't
        10/95, page 326). It generates modern art pictures from a random
        genetic formula.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * anti_aliasing (default: True) - Enable anti-aliasing using an
          oversampling algorithm.
        """
        pass

    def plug_in_recompose(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None):
        """Recompose an image that was previously decomposed.
        
        Image types: GRAY*
        Menu label: R_ecompose
        Menu path: <Image>/Colors/Components
        
        This function recombines the grayscale layers produced by Decompose into
        a single RGB or RGBA layer, and replaces the originally
        decomposed layer with the result.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        """
        pass

    def plug_in_retinex(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, scale: int=240, nscales: int=3, scales_mode: str='uniform', cvar: float=1.2):
        """Enhance contrast using the Retinex method.
        
        Image types: RGB*
        Menu label: Retine_x...
        Menu path: <Image>/Colors/Tone Mapping
        
        The Retinex Image Enhancement Algorithm is an automatic image
        enhancement method that enhances a digital image in terms of
        dynamic range compression, color independence from the spectral
        distribution of the scene illuminant, and color/lightness
        rendition.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * scale (default: 240) - Biggest scale value.
        
        * nscales (default: 3) - Number of scales.
        
        * scales_mode (default: uniform) - Retinex distribution through
          scales.
        
        * cvar (default: 1.2) - Variance value.
        """
        pass

    def plug_in_run_tests(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, dirpath: str='C:\\Users\\Kamil\\AppData\\Roaming\\GIMP\\3.0\\batcher', prefix: str='test_', modules: List[str]=None, ignored_modules: List[str]=None, output_stream: str='stderr', verbose: bool=False):
        """Runs automated tests in the specified directory path.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * dirpath (default: C:\\Users\\Kamil\\AppData\\Roaming\\GIMP\\3.0\\batcher) -
          Directory path containing test modules.
        
        * prefix (default: test_) - Prefix of test modules.
        
        * modules - Modules to include.
        
        * ignored_modules - Modules to ignore.
        
        * output_stream (default: stderr) - Output stream or file path to
          write output to.
        
        * verbose (default: False) - If True, writes more detailed output.
        """
        pass

    def plug_in_sample_colorize(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, sample_drawable: Gimp.Drawable=None, hold_inten: bool=True, orig_inten: bool=True, rnd_subcolors: bool=False, guess_missing: bool=True, in_low: int=0, in_high: int=255, gamma: float=1.0, out_low: int=0, out_high: int=255):
        """Colorize image using a sample image as a guide.
        
        Image types: RGB*, GRAY*
        Menu label: _Sample Colorize...
        Menu path: <Image>/Colors/Map
        
        This plug-in colorizes the contents of the specified (gray) layer with
        the help of a
        
        sample (color) layer. It analyzes all colors in the sample layer. The
        sample colors are sorted by brightness (== intentisty) and
        amount and stored in a sample colortable (where brightness is
        the index) The pixels of the destination layer are remapped with
        the help of the sample colortable. If use_subcolors is TRUE, the
        remapping process uses all sample colors of the corresponding
        brightness-intensity and distributes the subcolors according to
        their amount in the sample (If the sample has 5 green, 3 yellow,
        and 1 red pixel of the
        
        intensity value 105, the destination pixels at intensity value 105 are
        randomly painted in green, yellow and red in a relation of 5:3:1
        If use_subcolors is FALSE only one sample color per intensity is
        used. (green will be used in this example) The brightness
        intensity value is transformed at the remapping process
        according to the levels: out_lo, out_hi, in_lo, in_high and
        gamma The in_low / in_high levels specify an initial mapping of
        the intensity. The gamma value determines how intensities are
        interpolated between the in_lo and in_high levels. A gamma value
        of 1.0 results in linear interpolation. Higher gamma values
        results in more high-level intensities Lower gamma values
        results in more low-level intensities The out_low/out_high
        levels constrain the resulting intensity index The intensity
        index is used to pick the corresponding color in the sample
        colortable. If hold_inten is FALSE the picked color is used 1:1
        as resulting remap_color. If hold_inten is TRUE The brightness
        of the picked color is adjusted back to the original intensity
        value (only hue and saturation are taken from the picked sample
        color) (or to the input level, if orig_inten is set FALSE) Works
        on both Grayscale and RGB image with/without alpha channel. (the
        image with the dst_drawable is converted to RGB if necessary)
        The sample_drawable should be of type RGB or RGBA.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * sample_drawable - Sample drawable (should be of Type RGB or RGBA).
        
        * hold_inten (default: True) - Hold brightness intensity levels.
        
        * orig_inten (default: True) - TRUE: hold brightness of original
          intensity levels, FALSE: Hold Intensity of input levels.
        
        * rnd_subcolors (default: False) - TRUE: Use all subcolors of same
          intensity, FALSE: Use only one color per intensity.
        
        * guess_missing (default: True) - TRUE: guess samplecolors for the
          missing intensity values, FALSE: use only colors found in
          the sample.
        
        * in_low (default: 0) - Intensity of lowest input.
        
        * in_high (default: 255) - Intensity of highest input.
        
        * gamma (default: 1.0) - Gamma adjustment factor, 1.0 is linear.
        
        * out_low (default: 0) - Lowest sample color intensity.
        
        * out_high (default: 255) - Highest sample color intensity.
        """
        pass

    def plug_in_screenshot(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, shoot_type: str='window', x1: int=0, y1: int=0, x2: int=0, y2: int=0, include_pointer: bool=False, color_profile: str='monitor') -> Gimp.Image:
        """Create an image from an area of the screen.
        
        Menu label: _Screenshot...
        Menu path: <Image>/File/Create
        
        The plug-in takes screenshots of an interactively selected window or of
        the desktop, either the whole desktop or an interactively
        selected region. When called non-interactively, it may grab the
        root window or use the window-id passed as a parameter.
        
        The last four parameters are optional and can be used to specify the
        corners of the region to be grabbed.On Mac OS X, when called
        non-interactively, the plug-inonly can take screenshots of the
        entire root window.Grabbing a window or a region is not
        supportednon-interactively. To grab a region or a
        particularwindow, you need to use the interactive mode.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * shoot_type (default: window) - The shoot type.
        
        * x1 (default: 0) - Region left x coord for SHOOT-WINDOW.
        
        * y1 (default: 0) - Region top y coord for SHOOT-WINDOW.
        
        * x2 (default: 0) - Region right x coord for SHOOT-WINDOW.
        
        * y2 (default: 0) - Region bottom y coord for SHOOT-WINDOW.
        
        * include_pointer (default: False) - Your pointing device's cursor
          will be part of the image.
        
        * color_profile (default: monitor)
        
        Returns:
        
        * image - Output image.
        """
        pass

    def plug_in_script_fu_console(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE):
        """Interactive console for Script-Fu development.
        
        Menu label: Script-Fu _Console
        Menu path: <Image>/Filters/Development/Script-Fu
        
        Provides an interface which allows interactive scheme development.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        """
        pass

    def plug_in_script_fu_eval(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, script: str=None):
        """Evaluate scheme code.
        
        Evaluate the code under the scheme interpreter (primarily for batch
        mode).
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * script - Batch commands in the target language, which will be run by
          the interpreter.
        """
        pass

    def plug_in_script_fu_server(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, ip: str=None, port: int=0, logfile: str=None):
        """Server for remote Script-Fu operation.
        
        Menu label: _Start Server...
        Menu path: <Image>/Filters/Development/Script-Fu
        
        Provides a server for remote script-fu operation. NOTE that for security
        reasons this procedure's API was changed in an incompatible way
        since GIMP 2.8.12. You now have to pass the IP to listen on as
        first parameter. Calling this procedure with the old API will
        fail on purpose.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * ip - The IP on which to listen for requests.
        
        * port (default: 0) - The port on which to listen for requests.
        
        * logfile - The file to log activity to.
        """
        pass

    def plug_in_script_fu_text_console(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE):
        """Provides a text console mode for script-fu development.
        
        Provides an interface which allows interactive scheme development.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        """
        pass

    def plug_in_sel2path(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, align_threshold: float=0.5, corner_always_threshold: float=60.0, corner_surround: int=4, corner_threshold: float=100.0, error_threshold: float=0.4, filter_alternative_surround: int=1, filter_epsilon: float=10.0, filter_iteration_count: int=4, filter_percent: float=0.33, filter_secondary_surround: int=3, filter_surround: int=2, keep_knees: bool=False, line_reversion_threshold: float=0.01, line_threshold: float=0.5, reparametrize_improvement: float=0.01, reparametrize_threshold: float=1.0, subdivide_search: float=0.1, subdivide_surround: int=4, subdivide_threshold: float=0.03, tangent_surround: int=3):
        """Converts a selection to a path.
        
        Image types: *
        
        Converts a selection to a path.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * align_threshold (default: 0.5) - If two endpoints are closer than
          this, they are made to be equal.
        
        * corner_always_threshold (default: 60.0) - If the angle defined by a
          point and its predecessors and successors is smaller than
          this, it's a corner, even if it's within 'corner_surround'
          pixels of a point with a smaller angle.
        
        * corner_surround (default: 4) - Number of points to consider when
          determining if a point is a corner or not.
        
        * corner_threshold (default: 100.0) - If a point, its predecessors,
          and its successors define an angle smaller than this, it's a
          corner.
        
        * error_threshold (default: 0.4) - Amount of error at which a fitted
          spline is unacceptable. If any pixel is further away than
          this from the fitted curve, we try again.
        
        * filter_alternative_surround (default: 1) - A second number of
          adjacent points to consider when filtering.
        
        * filter_epsilon (default: 10.0) - If the angles between the vectors
          produced by filter_surround and filter_alternative_surround
          points differ by more than this, use the one from
          filter_alternative_surround.
        
        * filter_iteration_count (default: 4) - Number of times to smooth
          original data points.  Increasing this number dramatically
          --- to 50 or so --- can produce vastly better results. But
          if any points that 'should' be corners aren't found, the
          curve goes to hell around that point.
        
        * filter_percent (default: 0.33) - To produce the new point, use the
          old point plus this times the neighbors.
        
        * filter_secondary_surround (default: 3) - Number of adjacent points
          to consider if 'filter_surround' points defines a straight
          line.
        
        * filter_surround (default: 2) - Number of adjacent points to consider
          when filtering.
        
        * keep_knees (default: False) - Says whether or not to remove 'knee'
          points after finding the outline.
        
        * line_reversion_threshold (default: 0.01) - If a spline is closer to
          a straight line than this, it remains a straight line, even
          if it would otherwise be changed back to a curve. This is
          weighted by the square of the curve length, to make shorter
          curves more likely to be reverted.
        
        * line_threshold (default: 0.5) - How many pixels (on the average) a
          spline can diverge from the line determined by its endpoints
          before it is changed to a straight line.
        
        * reparametrize_improvement (default: 0.01) - If reparameterization
          doesn't improve the fit by this much percent, stop doing it.
          Amount of error at which it is pointless to reparameterize.
        
        * reparametrize_threshold (default: 1.0) - Amount of error at which it
          is pointless to reparameterize.  This happens, for example,
          when we are trying to fit the outline of the outside of an
          'O' with a single spline. The initial fit is not good enough
          for the Newton-Raphson iteration to improve it.  It may be
          that it would be better to detect the cases where we didn't
          find any corners.
        
        * subdivide_search (default: 0.1) - Percentage of the curve away from
          the worst point to look for a better place to subdivide.
        
        * subdivide_surround (default: 4) - Number of points to consider when
          deciding whether a given point is a better place to
          subdivide.
        
        * subdivide_threshold (default: 0.03) - How many pixels a point can
          diverge from a straight line and still be considered a
          better place to subdivide.
        
        * tangent_surround (default: 3) - Number of points to look at on
          either side of a point when computing the approximation to
          the tangent at that point.
        """
        pass

    def plug_in_small_tiles(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, num_tiles: int=2):
        """Tile image into smaller versions of the original.
        
        Image types: RGB*, GRAY*
        Menu label: _Small Tiles...
        Menu path: <Image>/Filters/Map
        
        More here later.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * num_tiles (default: 2) - Number of tiles to make.
        """
        pass

    def plug_in_smooth_palette(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, width: int=256, height: int=64, n_tries: int=50, show_image: bool=True) -> Tuple[Gimp.Image, Gimp.Layer]:
        """Derive a smooth color palette from the image.
        
        Image types: RGB*
        Menu label: Smoo_th Palette...
        Menu path: <Image>/Colors/Info
        
        Help!.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * width (default: 256) - Width.
        
        * height (default: 64) - Height.
        
        * n_tries (default: 50) - Search depth.
        
        * show_image (default: True) - Show image.
        
        Returns:
        
        * new_image - Output image.
        
        * new_layer - Output layer.
        """
        pass

    def plug_in_sparkle(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, lum_threshold: float=0.01, flare_inten: float=0.5, spike_len: int=20, spike_points: int=4, spike_angle: int=15, density: float=1.0, transparency: float=0.0, random_hue: float=0.0, random_saturation: float=0.0, preserve_luminosity: bool=False, inverse: bool=False, border: bool=False, color_type: str='natural-color'):
        """Turn bright spots into starry sparkles.
        
        Image types: RGB*, GRAY*
        Menu label: _Sparkle...
        Menu path: <Image>/Filters/Light and Shadow/[Light]
        
        Uses a percentage based luminosity threshold to find candidate pixels
        for adding some sparkles (spikes).
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * lum_threshold (default: 0.01) - Adjust the luminosity threshold.
        
        * flare_inten (default: 0.5) - Adjust the flare intensity.
        
        * spike_len (default: 20) - Adjust the spike length (in pixels).
        
        * spike_points (default: 4) - Adjust the number of spikes.
        
        * spike_angle (default: 15) - Adjust the spike angle (-1 causes a
          random angle to be chosen).
        
        * density (default: 1.0) - Adjust the spike density.
        
        * transparency (default: 0.0) - Adjust the opacity of the spikes.
        
        * random_hue (default: 0.0) - Adjust how much the hue should be
          changed randomly.
        
        * random_saturation (default: 0.0) - Adjust how much the saturation
          should be changed randomly.
        
        * preserve_luminosity (default: False) - Should the luminosity be
          preserved?.
        
        * inverse (default: False) - Should the effect be inversed?.
        
        * border (default: False) - Draw a border of spikes around the image.
        
        * color_type (default: natural-color) - Color of sparkles.
        """
        pass

    def plug_in_spheredesigner(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None):
        """Create an image of a textured sphere.
        
        Image types: RGB*, GRAY*
        Menu label: Sphere _Designer...
        Menu path: <Image>/Filters/Render
        
        This plug-in can be used to create textured and/or bumpmapped spheres,
        and uses a small lightweight raytracer to perform the task with
        good quality.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        """
        pass

    def plug_in_spyrogimp(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, curve_type: str='spyrograph', shape: str='circle', sides: int=3, morph: float=0.0, fixed_teeth: int=96, moving_teeth: int=36, hole_percent: float=100.0, margin: int=0, equal_w_h: bool=False, pattern_rotation: float=0.0, shape_rotation: float=0.0, tool: str='preview', long_gradient: bool=False):
        """Draw spyrographs using current tool settings and selection.
        
        Image types: *
        Menu label: Spyrogimp...
        Menu path: <Image>/Filters/Render
        
        Uses current tool settings to draw Spyrograph patterns. The size and
        location of the pattern is based on the current selection.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * curve_type (default: spyrograph) - Curve Type.
        
        * shape (default: circle) - Shape.
        
        * sides (default: 3) - Number of sides of fixed gear (3 or greater).
          Only used by some shapes.
        
        * morph (default: 0.0) - Morph shape of fixed gear, between 0 and 1.
          Only used by some shapes.
        
        * fixed_teeth (default: 96) - Number of teeth for fixed gear.
        
        * moving_teeth (default: 36) - Number of teeth for fixed gear.
        
        * hole_percent (default: 100.0) - Location of hole in moving gear in
          percent, where 100 means that the hole is at the edge of the
          gear, and 0 means the hole is at the center.
        
        * margin (default: 0) - Margin from selection, in pixels.
        
        * equal_w_h (default: False) - Make width and height equal.
        
        * pattern_rotation (default: 0.0) - Pattern rotation, in degrees.
        
        * shape_rotation (default: 0.0) - Shape rotation of fixed gear, in
          degrees.
        
        * tool (default: preview) - Tool.
        
        * long_gradient (default: False) - Whether to apply a long gradient to
          match the length of the pattern. Only applicable to some of
          the tools.
        """
        pass

    def plug_in_tile(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, new_width: int=1, new_height: int=1, new_image: bool=True) -> Tuple[Gimp.Image, Gimp.Layer]:
        """Create an array of copies of the image.
        
        Image types: *
        Menu label: _Tile...
        Menu path: <Image>/Filters/Map
        
        This function creates a new image with a single layer sized to the
        specified 'new_width' and 'new_height' parameters. The specified
        drawable is tiled into this layer.
        
        The new layer will have the same type as the specified drawable and the
        new image will have a corresponding base type.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * new_width (default: 1) - New (tiled) image width.
        
        * new_height (default: 1) - New (tiled) image height.
        
        * new_image (default: True) - Create a new image.
        
        Returns:
        
        * new_image - Output image (NULL if new-image == FALSE).
        
        * new_layer - Output layer (NULL if new-image == FALSE).
        """
        pass

    def plug_in_unit_editor(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE):
        """Create or alter units used in GIMP.
        
        Menu label: U_nits
        Menu path: <Image>/Edit/[Preferences]
        
        The GIMP unit editor.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        """
        pass

    def plug_in_warp(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, amount: float=10.0, warp_map: Gimp.Drawable=None, iter: int=5, dither: float=0.0, angle: float=90.0, wrap_type: str='wrap', mag_map: Gimp.Drawable=None, mag_use: bool=False, substeps: int=1, grad_map: Gimp.Drawable=None, grad_scale: float=0.0, vector_map: Gimp.Drawable=None, vector_scale: float=0.0, vector_angle: float=0.0):
        """Twist or smear image in many different ways.
        
        Image types: RGB*, GRAY*
        Menu label: _Warp...
        Menu path: <Image>/Filters/Map
        
        Smears an image along vector paths calculated as the gradient of a
        separate control matrix. The effect can look like brushstrokes
        of acrylic or watercolor paint, in some cases.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * amount (default: 10.0) - Pixel displacement multiplier.
        
        * warp_map - Displacement control map.
        
        * iter (default: 5) - Iteration count.
        
        * dither (default: 0.0) - Random dither amount.
        
        * angle (default: 90.0) - Angle of gradient vector rotation.
        
        * wrap_type (default: wrap) - Wrap type.
        
        * mag_map - Magnitude control map.
        
        * mag_use (default: False) - Use magnitude map.
        
        * substeps (default: 1) - Substeps between image updates.
        
        * grad_map - Gradient control map.
        
        * grad_scale (default: 0.0) - Scaling factor for gradient map (0=don't
          use).
        
        * vector_map - Fixed vector control map.
        
        * vector_scale (default: 0.0) - Scaling factor for fixed vector map
          (0=don't use).
        
        * vector_angle (default: 0.0) - Angle for fixed vector map.
        """
        pass

    def plug_in_wavelet_decompose(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, scales: int=5, create_group: bool=True, create_masks: bool=False):
        """Wavelet decompose.
        
        Image types: RGB*, GRAY*
        Menu label: _Wavelet-decompose...
        Menu path: <Image>/Filters/Enhance
        
        Compute and render wavelet scales.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * scales (default: 5) - Number of scales.
        
        * create_group (default: True) - Create a layer group to store the
          decomposition.
        
        * create_masks (default: False) - Add a layer mask to each scales
          layer.
        """
        pass

    def plug_in_web_browser(self, url: str='https://www.gimp.org/'):
        """Open an URL in the user specified web browser.
        
        Opens the given URL in the user specified web browser.
        
        Parameters:
        
        * url (default: https://www.gimp.org/) - URL to open.
        """
        pass

    def plug_in_zealouscrop(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None):
        """Autocrop unused space from edges and middle.
        
        Image types: *
        Menu label: _Zealous Crop
        Menu path: <Image>/Image/[Crop]
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        """
        pass

    def python_fu_console(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE):
        """Interactive GIMP Python interpreter.
        
        Menu label: Python _Console
        Menu path: <Image>/Filters/Development/Python-Fu
        
        Type in commands and see results.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        """
        pass

    def python_fu_eval(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, script: str=None):
        """Evaluate Python code.
        
        Evaluate python code under the python interpreter (primarily for batch
        mode).
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * script - Batch commands in the target language, which will be run by
          the interpreter.
        """
        pass

    def python_fu_foggify(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, name: str='Clouds', color: Gegl.Color=None, turbulence: float=1.0, opacity: float=100.0):
        """Add a layer of fog.
        
        Image types: RGB*, GRAY*
        Menu label: _Fog...
        Menu path: <Image>/Filters/Decor
        
        Adds a layer of fog to the image.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * name (default: Clouds) - Layer name.
        
        * color - Fog color.
        
        * turbulence (default: 1.0) - Turbulence.
        
        * opacity (default: 100.0) - Opacity.
        """
        pass

    def python_fu_gradient_save_as_css(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, gradient: Gimp.Gradient=None, file: Gio.File=None):
        """Creates a new palette from a given gradient.
        
        Menu label: Save Gradient as CSS...
        Menu path: <Gradients>/Gradients Menu
        
        Creates a new palette from a given gradient.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * gradient
        
        * file
        """
        pass

    def python_fu_histogram_export(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, file: Gio.File=None, bucket_size: float=0.01, sample_average: bool=False, output_format: str='percent'):
        """Exports the image histogram to a text file (CSV).
        
        Image types: *
        Menu label: _Export histogram...
        Menu path: <Image>/Colors/Info
        
        Exports the image histogram to a text file, so that it can be used by
        other programs and loaded into spreadsheets.
        
        The resulting file is a CSV file (Comma Separated Values), which can be
        imported directly in most spreadsheet programs.
        
        The first two columns are the bucket boundaries, followed by the
        selected columns. The histogram refers to the selected image
        area, and can use either Sample Average data or data from the
        current drawable only.;
        
        The output is in "weighted pixels" - meaning all fully transparent
        pixels are not counted.
        
        Check the gimp-histogram call.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * file - Histogram export file.
        
        * bucket_size (default: 0.01) - Bucket Size.
        
        * sample_average (default: False) - Sample Average.
        
        * output_format (default: percent) - Output format.
        """
        pass

    def python_fu_palette_offset(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, palette: Gimp.Palette=None, amount: int=1) -> Gimp.Palette:
        """Offset the colors in a palette.
        
        Menu label: _Offset Palette...
        Menu path: <Palettes>/Palettes Menu
        
        Offset the colors in the palette. Offsets and returns the given palette
        when it is editable, otherwise copies the given palette and
        returns it.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * palette - Palette.
        
        * amount (default: 1) - Offset.
        
        Returns:
        
        * new_palette - The newly created palette when read-only, otherwise
          the input palette.
        """
        pass

    def python_fu_palette_sort(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, palette: Gimp.Palette=None, selections: str='all', slice_expr: str=None, channel1: str='luma', ascending1: bool=True, channel2: str='saturation', ascending2: bool=True, quantize: float=0.0, pchannel: str='luma', pquantize: float=0.0) -> Gimp.Palette:
        """Sort the colors in a palette.
        
        Menu label: _Sort Palette...
        Menu path: <Palettes>/Palettes Menu
        
        Sorts a palette, or part of a palette. Sorts the given palette when it
        is editable, otherwise creates a new sorted palette. The default
        is a 1D sort, but you can also sort over two color channels or
        create a 2D sorted palette with sorted rows. You can optionally
        install colormath (https://pypi.python.org/pypi/colormath/1.0.8)
        to GIMP's Python to get even more channels to choose from.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * palette - Palette.
        
        * selections (default: all) - Selections.
        
        * slice_expr -      Format is 'start:nrows,length' . All items are
          optional.      The empty string selects all items, as does
          ':'     ':4,' makes a 4-row selection out of all colors
          (length auto-determined)     ':4' also.     ':1,4' selects
          the first 4 colors     ':,4' selects rows of 4 colors (nrows
          auto-determined)     ':3,4' selects 3 rows of 4 colors
          '4:' selects a single row of all colors after 4, inclusive.
          '3:,4' selects rows of 4 colors, starting at 3 (nrows
          auto-determined)     '2:3,4' selects 3 rows of 4 colors (12
          colors total), beginning at index 2.     '4' is illegal
          (ambiguous) .
        
        * channel1 (default: luma) - Channel to sort.
        
        * ascending1 (default: True) - Ascending.
        
        * channel2 (default: saturation) - Secondary Channel to sort.
        
        * ascending2 (default: True) - Ascending.
        
        * quantize (default: 0.0) - Quantization.
        
        * pchannel (default: luma) - Partitioning channel.
        
        * pquantize (default: 0.0) - Partition quantization.
        
        Returns:
        
        * new_palette - Palette.
        """
        pass

    def python_fu_palette_to_gradient(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, palette: Gimp.Palette=None) -> Gimp.Gradient:
        """Create a gradient using colors from the palette.
        
        Menu label: Palette to _Gradient
        Menu path: <Palettes>/Palettes Menu
        
        Create a new gradient using colors from the palette.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * palette - Palette.
        
        Returns:
        
        * new_gradient - The newly created gradient.
        """
        pass

    def python_fu_palette_to_gradient_repeating(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, palette: Gimp.Palette=None) -> Gimp.Gradient:
        """Create a repeating gradient using colors from the palette.
        
        Menu label: Palette to _Repeating Gradient
        Menu path: <Palettes>/Palettes Menu
        
        Create a new repeating gradient using colors from the palette.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * palette - Palette.
        
        Returns:
        
        * new_gradient - The newly created gradient.
        """
        pass

    def script_fu_add_bevel(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, adjustment: int=5, toggle: bool=True, toggle_2: bool=False):
        """Add a beveled border to an image.
        
        Image types: RGB*
        Menu label: Add B_evel...
        Menu path: <Image>/Filters/Decor
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * adjustment (default: 5) - Thickness.
        
        * toggle (default: True) - Work on copy.
        
        * toggle_2 (default: False) - Keep bump layer.
        """
        pass

    def script_fu_addborder(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, adjustment: int=12, adjustment_2: int=12, color: Gegl.Color=None, adjustment_3: int=25, toggle: bool=True):
        """Add a border around an image.
        
        Image types: *
        Menu label: Add _Border...
        Menu path: <Image>/Filters/Decor
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * adjustment (default: 12) - Border X size.
        
        * adjustment_2 (default: 12) - Border Y size.
        
        * color - Border color.
        
        * adjustment_3 (default: 25) - Delta value on color.
        
        * toggle (default: True) - Allow resizing.
        """
        pass

    def script_fu_blend_anim(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, adjustment: int=3, adjustment_2: int=0, toggle: bool=True):
        """Create intermediate layers to blend two or more layers over a
        background as an animation.
        
        Image types: RGB* GRAY*
        Menu label: _Blend...
        Menu path: <Image>/Filters/Animation
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * adjustment (default: 3) - Intermediate frames.
        
        * adjustment_2 (default: 0) - Max. blur radius.
        
        * toggle (default: True) - Looped.
        """
        pass

    def script_fu_burn_in_anim(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, color: Gegl.Color=None, toggle: bool=False, adjustment: int=100, adjustment_2: int=7, adjustment_3: int=50, toggle_2: bool=True, toggle_3: bool=False, adjustment_4: int=50):
        """Create intermediate layers to produce an animated 'burn-in'
        transition between two layers.
        
        Image types: RGBA GRAYA INDEXEDA
        Menu label: B_urn-In...
        Menu path: <Image>/Filters/Animation
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * color - Glow color.
        
        * toggle (default: False) - Fadeout.
        
        * adjustment (default: 100) - Fadeout width.
        
        * adjustment_2 (default: 7) - Corona width.
        
        * adjustment_3 (default: 50) - After glow.
        
        * toggle_2 (default: True) - Add glowing.
        
        * toggle_3 (default: False) - Prepare for GIF.
        
        * adjustment_4 (default: 50) - Speed (pixels/frame).
        """
        pass

    def script_fu_carve_it(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, otherImage: Gimp.Image=None, drawable: Gimp.Drawable=None, toggle: bool=True):
        """Use the specified drawable as a stencil to carve from the specified
        image.
        
        Image types: GRAY
        Menu label: Stencil C_arve...
        Menu path: <Image>/Filters/Decor
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * otherImage - Mask image.
        
        * drawable - Mask drawable.
        
        * toggle (default: True) - Carve white areas.
        """
        pass

    def script_fu_circuit(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, adjustment: int=17, adjustment_2: int=3, toggle: bool=False, toggle_2: bool=True, toggle_3: bool=True):
        """Fill the selected region (or alpha) with traces like those on a
        circuit board.
        
        Image types: RGB* GRAY*
        Menu label: _Circuit...
        Menu path: <Image>/Filters/Render
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * adjustment (default: 17) - Oilify mask size.
        
        * adjustment_2 (default: 3) - Circuit seed.
        
        * toggle (default: False) - No background (only for separate layer).
        
        * toggle_2 (default: True) - Keep selection.
        
        * toggle_3 (default: True) - Separate layer.
        """
        pass

    def script_fu_clothify(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, adjustment: int=9, adjustment_2: int=9, adjustment_3: float=135.0, adjustment_4: float=45.0, adjustment_5: int=3):
        """Add a cloth-like texture to the selected region (or alpha).
        
        Image types: RGB* GRAY*
        Menu label: _Clothify...
        Menu path: <Image>/Filters/Artistic
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * adjustment (default: 9) - Blur X.
        
        * adjustment_2 (default: 9) - Blur Y.
        
        * adjustment_3 (default: 135.0) - Azimuth.
        
        * adjustment_4 (default: 45.0) - Elevation.
        
        * adjustment_5 (default: 3) - Depth.
        """
        pass

    def script_fu_coffee_stain(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, adjustment: int=3, toggle: bool=True, gradient: Gimp.Gradient=None):
        """Add layers of stain or blotch marks.
        
        Image types: RGB*
        Menu label: _Stain...
        Menu path: <Image>/Filters/Decor
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * adjustment (default: 3) - Number of stains to add.
        
        * toggle (default: True) - Darken only.
        
        * gradient - Gradient to color stains.
        """
        pass

    def script_fu_difference_clouds(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None):
        """Solid noise applied with Difference layer mode.
        
        Image types: RGB* GRAY*
        Menu label: _Difference Clouds
        Menu path: <Image>/Filters/Render/Noise
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        """
        pass

    def script_fu_distress_selection(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, adjustment: float=0.5, adjustment_2: int=8, adjustment_3: int=4, adjustment_4: int=2, toggle: bool=True, toggle_2: bool=True):
        """Distress the selection.
        
        Image types: RGB*,GRAY*
        Menu label: _Distort...
        Menu path: <Image>/Select/[Modify]
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * adjustment (default: 0.5) - Threshold.
        
        * adjustment_2 (default: 8) - Spread.
        
        * adjustment_3 (default: 4) - Granularity (1 is low).
        
        * adjustment_4 (default: 2) - Smooth.
        
        * toggle (default: True) - Smooth horizontally.
        
        * toggle_2 (default: True) - Smooth vertically.
        """
        pass

    def script_fu_drop_shadow(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, adjustment: int=4, adjustment_2: int=4, adjustment_3: int=15, color: Gegl.Color=None, adjustment_4: int=60, toggle: bool=True):
        """Add a drop shadow to the selected region (or alpha).
        
        Image types: RGB* GRAY*
        Menu label: _Drop Shadow (legacy)...
        Menu path: <Image>/Filters/Light and Shadow/[Shadow]
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * adjustment (default: 4) - Offset X.
        
        * adjustment_2 (default: 4) - Offset Y.
        
        * adjustment_3 (default: 15) - Blur radius.
        
        * color - Color.
        
        * adjustment_4 (default: 60) - Opacity.
        
        * toggle (default: True) - Allow resizing.
        """
        pass

    def script_fu_font_map(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, string: str='How quickly daft jumping zebras vex.', toggle: bool=False, toggle_2: bool=True, string_2: str='Sans', adjustment: int=32, adjustment_2: int=10, option: int=0):
        """Create an image filled with previews of fonts matching a fontname
        filter.
        
        Menu label: Render _Font Map...
        Menu path: <Fonts>/Fonts Menu
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * string (default: How quickly daft jumping zebras vex.) - Text.
        
        * toggle (default: False) - Use font name as text.
        
        * toggle_2 (default: True) - Labels.
        
        * string_2 (default: Sans) - Filter (regexp).
        
        * adjustment (default: 32) - Font size (pixels).
        
        * adjustment_2 (default: 10) - Border (pixels).
        
        * option (default: 0) - Color scheme.
        """
        pass

    def script_fu_fuzzy_border(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, color: Gegl.Color=None, adjustment: int=16, toggle: bool=True, adjustment_2: float=4.0, toggle_2: bool=False, adjustment_3: int=100, toggle_3: bool=True, toggle_4: bool=True):
        """Add a jagged, fuzzy border to an image.
        
        Image types: RGB* GRAY*
        Menu label: _Fuzzy Border...
        Menu path: <Image>/Filters/Decor
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * color - Color.
        
        * adjustment (default: 16) - Border size.
        
        * toggle (default: True) - Blur border.
        
        * adjustment_2 (default: 4.0) - Granularity (1 is Low).
        
        * toggle_2 (default: False) - Add shadow.
        
        * adjustment_3 (default: 100) - Shadow weight (%).
        
        * toggle_3 (default: True) - Work on copy.
        
        * toggle_4 (default: True) - Flatten image.
        """
        pass

    def script_fu_gradient_example(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, adjustment: int=400, adjustment_2: int=30, toggle: bool=False):
        """Create an image filled with an example of the current gradient.
        
        Menu label: Custom _Gradient...
        Menu path: <Gradients>/Gradients Menu
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * adjustment (default: 400) - Width.
        
        * adjustment_2 (default: 30) - Height.
        
        * toggle (default: False) - Gradient reverse.
        """
        pass

    def script_fu_guide_new(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, option: int=0, adjustment: int=0):
        """Add a guide at the orientation and position specified (in pixels).
        
        Image types: *
        Menu label: New _Guide...
        Menu path: <Image>/Image/Guides
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * option (default: 0) - Direction.
        
        * adjustment (default: 0) - Position.
        """
        pass

    def script_fu_guide_new_percent(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, option: int=0, adjustment: float=50.0):
        """Add a guide at the position specified as a percentage of the image
        size.
        
        Image types: *
        Menu label: New Guide (by _Percent)...
        Menu path: <Image>/Image/Guides
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * option (default: 0) - Direction.
        
        * adjustment (default: 50.0) - Position (in %).
        """
        pass

    def script_fu_guides_from_selection(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None):
        """Create four guides around the bounding box of the current selection.
        
        Image types: *
        Menu label: New Guides from _Selection
        Menu path: <Image>/Image/Guides
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        """
        pass

    def script_fu_guides_remove(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None):
        """Remove all horizontal and vertical guides.
        
        Image types: *
        Menu label: _Remove all Guides
        Menu path: <Image>/Image/Guides
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        """
        pass

    def script_fu_lava(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, adjustment: int=10, adjustment_2: int=10, adjustment_3: int=7, gradient: Gimp.Gradient=None, toggle: bool=True, toggle_2: bool=True, toggle_3: bool=False):
        """Fill the current selection with lava.
        
        Image types: RGB* GRAY*
        Menu label: _Lava...
        Menu path: <Image>/Filters/Render
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * adjustment (default: 10) - Seed.
        
        * adjustment_2 (default: 10) - Size.
        
        * adjustment_3 (default: 7) - Roughness.
        
        * gradient - Gradient.
        
        * toggle (default: True) - Keep selection.
        
        * toggle_2 (default: True) - Separate layer.
        
        * toggle_3 (default: False) - Use current gradient.
        """
        pass

    def script_fu_line_nova(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, adjustment: int=200, adjustment_2: float=1.0, adjustment_3: int=100, adjustment_4: int=30):
        """Fill a layer with rays emanating outward from its center using the
        foreground color.
        
        Image types: *
        Menu label: Line _Nova...
        Menu path: <Image>/Filters/Render
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * adjustment (default: 200) - Number of lines.
        
        * adjustment_2 (default: 1.0) - Sharpness (degrees).
        
        * adjustment_3 (default: 100) - Offset radius.
        
        * adjustment_4 (default: 30) - Randomness.
        """
        pass

    def script_fu_make_brush_elliptical(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, string: str='Ellipse', adjustment: int=20, adjustment_2: int=20, adjustment_3: float=25.0):
        """Create an elliptical brush.
        
        Menu label: _Elliptical...
        Menu path: <Brushes>/Brushes Menu
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * string (default: Ellipse) - Name.
        
        * adjustment (default: 20) - Width.
        
        * adjustment_2 (default: 20) - Height.
        
        * adjustment_3 (default: 25.0) - Spacing.
        """
        pass

    def script_fu_make_brush_elliptical_feathered(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, string: str='Ellipse', adjustment: int=20, adjustment_2: int=20, adjustment_3: int=4, adjustment_4: float=25.0):
        """Create an elliptical brush with feathered edges.
        
        Menu label: Elli_ptical, Feathered...
        Menu path: <Brushes>/Brushes Menu
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * string (default: Ellipse) - Name.
        
        * adjustment (default: 20) - Width.
        
        * adjustment_2 (default: 20) - Height.
        
        * adjustment_3 (default: 4) - Feathering.
        
        * adjustment_4 (default: 25.0) - Spacing.
        """
        pass

    def script_fu_make_brush_rectangular(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, string: str='Rectangle', adjustment: int=20, adjustment_2: int=20, adjustment_3: float=25.0):
        """Create a rectangular brush.
        
        Menu label: _Rectangular...
        Menu path: <Brushes>/Brushes Menu
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * string (default: Rectangle) - Name.
        
        * adjustment (default: 20) - Width.
        
        * adjustment_2 (default: 20) - Height.
        
        * adjustment_3 (default: 25.0) - Spacing.
        """
        pass

    def script_fu_make_brush_rectangular_feathered(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, string: str='Rectangle', adjustment: int=20, adjustment_2: int=20, adjustment_3: int=4, adjustment_4: float=25.0):
        """Create a rectangular brush with feathered edges.
        
        Menu label: Re_ctangular, Feathered...
        Menu path: <Brushes>/Brushes Menu
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * string (default: Rectangle) - Name.
        
        * adjustment (default: 20) - Width.
        
        * adjustment_2 (default: 20) - Height.
        
        * adjustment_3 (default: 4) - Feathering.
        
        * adjustment_4 (default: 25.0) - Spacing.
        """
        pass

    def script_fu_old_photo(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, toggle: bool=True, adjustment: int=20, toggle_2: bool=True, toggle_3: bool=False, toggle_4: bool=True):
        """Make an image look like an old photo.
        
        Image types: RGB* GRAY*
        Menu label: _Old Photo...
        Menu path: <Image>/Filters/Decor
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * toggle (default: True) - Defocus.
        
        * adjustment (default: 20) - Border size.
        
        * toggle_2 (default: True) - Sepia.
        
        * toggle_3 (default: False) - Mottle.
        
        * toggle_4 (default: True) - Work on copy.
        """
        pass

    def script_fu_paste_as_brush(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, string: str='My Brush', string_2: str='mybrush', adjustment: float=25.0):
        """Paste the clipboard contents into a new brush.
        
        Menu label: Paste as New _Brush...
        Menu path: <Image>/Edit/Paste as
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * string (default: My Brush) - Brush name.
        
        * string_2 (default: mybrush) - File name.
        
        * adjustment (default: 25.0) - Spacing.
        """
        pass

    def script_fu_paste_as_pattern(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, string: str='My Pattern', string_2: str='mypattern'):
        """Paste the clipboard contents into a new pattern.
        
        Menu label: Paste as New _Pattern...
        Menu path: <Image>/Edit/Paste as
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * string (default: My Pattern) - Pattern name.
        
        * string_2 (default: mypattern) - File name.
        """
        pass

    def script_fu_perspective_shadow(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, adjustment: float=45.0, adjustment_2: float=5.0, adjustment_3: float=1.0, adjustment_4: int=3, color: Gegl.Color=None, adjustment_5: int=80, enum: Gimp.InterpolationType=Gimp.InterpolationType.LINEAR, toggle: bool=False):
        """Add a perspective shadow to the selected region (or alpha).
        
        Image types: RGB* GRAY*
        Menu label: _Perspective...
        Menu path: <Image>/Filters/Light and Shadow/[Shadow]
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * adjustment (default: 45.0) - Angle.
        
        * adjustment_2 (default: 5.0) - Relative distance of horizon.
        
        * adjustment_3 (default: 1.0) - Relative length of shadow.
        
        * adjustment_4 (default: 3) - Blur radius.
        
        * color - Color.
        
        * adjustment_5 (default: 80) - Opacity.
        
        * enum (default: Gimp.InterpolationType.LINEAR) - Interpolation.
        
        * toggle (default: False) - Allow resizing.
        """
        pass

    def script_fu_reverse_layers(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None):
        """Reverse the order of layers in the image.
        
        Image types: *
        Menu label: Reverse Layer _Order
        Menu path: <Image>/Layer/Stack
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        """
        pass

    def script_fu_ripply_anim(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, adjustment: float=3.0, adjustment_2: int=15, option: int=0):
        """Create a multi-layer image by adding a ripple effect to the current
        layer.
        
        Image types: RGB* GRAY*
        Menu label: _Rippling...
        Menu path: <Image>/Filters/Animation
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * adjustment (default: 3.0) - Rippling strength.
        
        * adjustment_2 (default: 15) - Number of frames.
        
        * option (default: 0) - Edge behavior.
        """
        pass

    def script_fu_round_corners(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, adjustment: int=15, toggle: bool=True, adjustment_2: int=8, adjustment_3: int=8, adjustment_4: int=15, toggle_2: bool=True, toggle_3: bool=True):
        """Round the corners of an image and optionally add a drop-shadow and
        background.
        
        Image types: RGB* GRAY*
        Menu label: _Round Corners...
        Menu path: <Image>/Filters/Decor
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * adjustment (default: 15) - Edge radius.
        
        * toggle (default: True) - Add drop-shadow.
        
        * adjustment_2 (default: 8) - Shadow X offset.
        
        * adjustment_3 (default: 8) - Shadow Y offset.
        
        * adjustment_4 (default: 15) - Blur radius.
        
        * toggle_2 (default: True) - Add background.
        
        * toggle_3 (default: True) - Work on copy.
        """
        pass

    def script_fu_selection_round(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, adjustment: float=1.0):
        """This procedure is deprecated! Use
        'script-fu-selection-rounded-rectangle' instead.
        
        Image types: *
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * adjustment (default: 1.0) - Relative radius.
        """
        pass

    def script_fu_selection_rounded_rectangle(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, adjustment: int=50, toggle: bool=False):
        """Round the corners of the current selection.
        
        Image types: *
        Menu label: Rounded R_ectangle...
        Menu path: <Image>/Select/[Modify]
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * adjustment (default: 50) - Radius (%).
        
        * toggle (default: False) - Concave.
        """
        pass

    def script_fu_set_cmap(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, palette: Gimp.Palette=None):
        """Change the colormap of an image to the colors in a specified palette.
        
        Image types: INDEXED*
        Menu label: Se_t Colormap...
        Menu path: <Image>/Colors/Map/[Colormap]
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * palette - Palette.
        """
        pass

    def script_fu_slide(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, string: str='GIMP', string_2: str='32', font: Gimp.Font=None, color: Gegl.Color=None, toggle: bool=True):
        """Add a slide-film like frame, sprocket holes, and labels to an image.
        
        Image types: RGB GRAY
        Menu label: _Slide...
        Menu path: <Image>/Filters/Decor
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * string (default: GIMP) - Text.
        
        * string_2 (default: 32) - Number.
        
        * font - Font.
        
        * color - Font color.
        
        * toggle (default: True) - Work on copy.
        """
        pass

    def script_fu_sota_chrome_it(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, adjustment: int=-80, adjustment_2: int=-47, adjustment_3: float=0.75, filename: Gio.File=None, color: Gegl.Color=None, color_2: Gegl.Color=None, toggle: bool=True):
        """Add a chrome effect to the selected region (or alpha) using a
        specified (grayscale) stencil.
        
        Image types: *
        Menu label: Stencil C_hrome...
        Menu path: <Image>/Filters/Decor
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * adjustment (default: -80) - Chrome saturation.
        
        * adjustment_2 (default: -47) - Chrome lightness.
        
        * adjustment_3 (default: 0.75) - Chrome factor.
        
        * filename - Environment map.
        
        * color - Highlight balance.
        
        * color_2 - Chrome balance.
        
        * toggle (default: True) - Chrome white areas.
        """
        pass

    def script_fu_spinning_globe(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, otherImage: Gimp.Image=None, drawable: Gimp.Drawable=None, adjustment: int=10, toggle: bool=False, toggle_2: bool=True, adjustment_2: int=63, toggle_3: bool=True):
        """Create an animation by mapping the current image onto a spinning
        sphere.
        
        Image types: RGB* GRAY*
        Menu label: _Spinning Globe...
        Menu path: <Image>/Filters/Animation
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * otherImage - The Image.
        
        * drawable - The Layer.
        
        * adjustment (default: 10) - Frames.
        
        * toggle (default: False) - Turn from left to right.
        
        * toggle_2 (default: True) - Transparent background.
        
        * adjustment_2 (default: 63) - Index to n colors (0 = remain RGB).
        
        * toggle_3 (default: True) - Work on copy.
        """
        pass

    def script_fu_test_sphere_v3(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, adjustment: int=100, adjustment_2: float=45.0, toggle: bool=True, color: Gegl.Color=None, color_2: Gegl.Color=None, brush: Gimp.Brush=None, string: str='Tiny-Fu rocks!', text: str='Hello,\nWorld!', pattern: Gimp.Pattern=None, gradient: Gimp.Gradient=None, toggle_2: bool=False, font: Gimp.Font=None, adjustment_3: int=50, palette: Gimp.Palette=None, filename: Gio.File=None, option: int=0, enum: Gimp.InterpolationType=Gimp.InterpolationType.LINEAR, dirname: Gio.File=None, otherImage: Gimp.Image=None, layer: Gimp.Layer=None, channel: Gimp.Channel=None, drawable: Gimp.Drawable=None, vectors: Gimp.Path=None):
        """Plug-in example in Scheme.
        
        Image types: *
        Menu label: Plug-In Example in _Scheme
        Menu path: <Image>/Filters/Development/Plug-In Examples
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * adjustment (default: 100) - Radius (in pixels).
        
        * adjustment_2 (default: 45.0) - Lighting (degrees).
        
        * toggle (default: True) - Shadow.
        
        * color - Background color.
        
        * color_2 - Sphere color.
        
        * brush - Brush.
        
        * string (default: Tiny-Fu rocks!) - Text.
        
        * text (default: Hello, World!) - Multi-line text.
        
        * pattern - Pattern.
        
        * gradient - Gradient.
        
        * toggle_2 (default: False) - Gradient reverse.
        
        * font - Font.
        
        * adjustment_3 (default: 50) - Font size (pixels).
        
        * palette - Palette.
        
        * filename - Environment map.
        
        * option (default: 0) - Orientation.
        
        * enum (default: Gimp.InterpolationType.LINEAR) - Interpolation.
        
        * dirname - Output directory.
        
        * otherImage - Image.
        
        * layer - Layer.
        
        * channel - Channel.
        
        * drawable - Drawable.
        
        * vectors - Vectors.
        """
        pass

    def script_fu_tile_blur(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, adjustment: int=5, toggle: bool=True, toggle_2: bool=True, option: int=0):
        """Blur the edges of an image so the result tiles seamlessly.
        
        Image types: RGB*
        Menu label: _Tileable Blur...
        Menu path: <Image>/Filters/Blur
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * adjustment (default: 5) - Radius.
        
        * toggle (default: True) - Blur vertically.
        
        * toggle_2 (default: True) - Blur horizontally.
        
        * option (default: 0) - Blur type.
        """
        pass

    def script_fu_unsharp_mask(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, adjustment: int=5, adjustment_2: int=50):
        """Make a new image from the current layer by applying the unsharp mask
        method.
        
        Image types: *
        Menu label: Unsharp Mask...
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * adjustment (default: 5) - Mask size.
        
        * adjustment_2 (default: 50) - Mask opacity.
        """
        pass

    def script_fu_waves_anim(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, adjustment: float=10.0, adjustment_2: float=10.0, adjustment_3: int=6, toggle: bool=False):
        """Create a multi-layer image with an effect like a stone was thrown
        into the current image.
        
        Image types: RGB* GRAY*
        Menu label: _Waves...
        Menu path: <Image>/Filters/Animation
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * adjustment (default: 10.0) - Amplitude.
        
        * adjustment_2 (default: 10.0) - Wavelength.
        
        * adjustment_3 (default: 6) - Number of frames.
        
        * toggle (default: False) - Invert direction.
        """
        pass

    def script_fu_weave(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, adjustment: float=30.0, adjustment_2: float=10.0, adjustment_3: float=75.0, adjustment_4: float=75.0, adjustment_5: float=200.0, adjustment_6: float=50.0, adjustment_7: float=100.0):
        """Create a new layer filled with a weave effect to be used as an
        overlay or bump map.
        
        Image types: RGB* GRAY*
        Menu label: _Weave...
        Menu path: <Image>/Filters/Artistic
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * adjustment (default: 30.0) - Ribbon width.
        
        * adjustment_2 (default: 10.0) - Ribbon spacing.
        
        * adjustment_3 (default: 75.0) - Shadow darkness.
        
        * adjustment_4 (default: 75.0) - Shadow depth.
        
        * adjustment_5 (default: 200.0) - Thread length.
        
        * adjustment_6 (default: 50.0) - Thread density.
        
        * adjustment_7 (default: 100.0) - Thread intensity.
        """
        pass

    def script_fu_xach_effect(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None, adjustment: int=-1, adjustment_2: int=-1, color: Gegl.Color=None, adjustment_3: int=66, color_2: Gegl.Color=None, adjustment_4: int=100, adjustment_5: int=12, adjustment_6: int=5, adjustment_7: int=5, toggle: bool=True):
        """Add a subtle translucent 3D effect to the selected region (or alpha).
        
        Image types: RGB* GRAY*
        Menu label: _Xach-Effect...
        Menu path: <Image>/Filters/Light and Shadow/[Shadow]
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        * adjustment (default: -1) - Highlight X offset.
        
        * adjustment_2 (default: -1) - Highlight Y offset.
        
        * color - Highlight color.
        
        * adjustment_3 (default: 66) - Highlight opacity.
        
        * color_2 - Drop shadow color.
        
        * adjustment_4 (default: 100) - Drop shadow opacity.
        
        * adjustment_5 (default: 12) - Drop shadow blur radius.
        
        * adjustment_6 (default: 5) - Drop shadow X offset.
        
        * adjustment_7 (default: 5) - Drop shadow Y offset.
        
        * toggle (default: True) - Keep selection.
        """
        pass

    def test_export_plug_ins(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None):
        """Run file export plug-in tests.
        
        Image types: *
        Menu label: Test file _export plug-ins
        Menu path: <Image>/Filters/Development/Python-Fu
        
        Run file export plug-in tests.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        """
        pass

    def test_import_plug_ins(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None):
        """Run file import plug-in tests.
        
        Image types: *
        Menu label: Test file _import plug-ins
        Menu path: <Image>/Filters/Development/Python-Fu
        
        Run file import plug-in tests.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        """
        pass

    def twain_acquire(self, run_mode: Gimp.RunMode=Gimp.RunMode.INTERACTIVE, image: Gimp.Image=None, drawables: GObject.Value=None) -> Any:
        """Capture an image from a TWAIN datasource.
        
        Image types: *
        Menu label: _Scanner/Camera...
        Menu path: <Image>/File/Create
        
        This plug-in will capture an image from a TWAIN datasource.
        
        Parameters:
        
        * run_mode (default: Gimp.RunMode.INTERACTIVE) - The run mode.
        
        * image - The input image.
        
        * drawables - The input drawables.
        
        Returns:
        
        * images - Array of acquired images.
        """
        pass

    def gegl__absolute(self, drawable_: Gimp.Drawable=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Absolute
        
        Makes each linear RGB component be the absolute of its value,
        fabs(input_value).
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__aces_rrt(self, drawable_: Gimp.Drawable=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """ACES RRT
        
        HDR to SDR proofing filter/mapping curve that is an approximation of
        the ACES RRT (Reference Rendering Transform). When feeding
        scene-refereed imagery into this op, the result is suitable
        for display referred transform to sRGB or output display
        using regular ICC matric profiles as the ODT. Note that for
        the time being, this is a luminance only approximation of the
        ACES RRT; without desaturation of highlights and shadows nor
        red hue modifications.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__add(self, drawable_: Gimp.Drawable=None, value: float=0.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Add
        
        Math operation add, performs the operation per pixel, using either
        the constant provided in 'value' or the corresponding pixel
        from the buffer on aux as operands. The result is the
        evaluation of the expression result = input + value.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * value (default: 0.0) - global value used if aux doesn't contain
          data.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__alien_map(self, drawable_: Gimp.Drawable=None, color_model: str='rgb', cpn_1_frequency: float=1.0, cpn_2_frequency: float=1.0, cpn_3_frequency: float=1.0, cpn_1_phaseshift: float=0.0, cpn_2_phaseshift: float=0.0, cpn_3_phaseshift: float=0.0, cpn_1_keep: bool=False, cpn_2_keep: bool=False, cpn_3_keep: bool=False, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Alien Map
        
        Heavily distort images colors by applying trigonometric functions to
        map color values.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * color_model (default: rgb) - What color model used for the
          transformation.
        
        * cpn_1_frequency (default: 1.0)
        
        * cpn_2_frequency (default: 1.0)
        
        * cpn_3_frequency (default: 1.0)
        
        * cpn_1_phaseshift (default: 0.0)
        
        * cpn_2_phaseshift (default: 0.0)
        
        * cpn_3_phaseshift (default: 0.0)
        
        * cpn_1_keep (default: False)
        
        * cpn_2_keep (default: False)
        
        * cpn_3_keep (default: False)
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__alpha_clip(self, drawable_: Gimp.Drawable=None, clip_low: bool=True, low_limit: float=0.0, clip_high: bool=True, high_limit: float=1.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Clip Alpha
        
        Keep alpha values inside a specific range.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * clip_low (default: True) - Clip low pixel values.
        
        * low_limit (default: 0.0) - Pixels values lower than this limit will
          be set to it.
        
        * clip_high (default: True) - Clip high pixel values.
        
        * high_limit (default: 1.0) - Pixels values higher than this limit
          will be set to it.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__alpha_inpaint(self, drawable_: Gimp.Drawable=None, seek_distance: int=10, seek_reduction: float=0.6, min_iter: int=20, min_neighbors: int=1, max_iter: int=800, iterations: int=23, histogram: float=0.5, ring_gap1: float=1.1, ring_gap2: float=1.9, ring_gap3: float=3.2, ring_gap4: float=4.1, scale_needles: int=5, rounds: int=16, chance_try: float=0.015, chance_retry: float=0.9, chance_neighbor: float=1.0, metric_dist_powk: float=1.8, metric_empty_hay_score: float=0.275, metric_empty_needle_score: float=0.18, metric_cohesion: float=0.13, ring_twist: float=0.0, direction_invariant: bool=True, source_neighbors: int=8, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Heal transparent
        
        Replaces transparent pixels with good candidate pixels found in the
        neighborhood of the missing pixel.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * seek_distance (default: 10) - Maximum distance in neighborhood we
          look for better candidates per improvement.
        
        * seek_reduction (default: 0.6) - factor seek distance is shortened,
          until we're about 2px short per iteration, 1.0 means no
          reduction.
        
        * min_iter (default: 20) - Ensuring that we get results even with low
          retry chance.
        
        * min_neighbors (default: 1) - minimum neighbors that must be set
          before we consider setting.
        
        * max_iter (default: 800) - Mostly a saftey valve, so that we
          terminate.
        
        * iterations (default: 23) - number of improvement iterations, after
          initial search - that each probe gets.
        
        * histogram (default: 0.5) - only consider pixels whose neighborhood
          color distribution is smaller than specified, set to 1.0 for
          much faster processing, but needing lower seek distance to
          yield ok results.
        
        * ring_gap1 (default: 1.1) - radius, in pixels of nearest to pixel
          circle of neighborhood metric.
        
        * ring_gap2 (default: 1.9) - radius, in pixels of second nearest to
          pixel circle.
        
        * ring_gap3 (default: 3.2) - radius, in pixels of third pixel circle.
        
        * ring_gap4 (default: 4.1) - radius, in pixels of fourth pixel circle
          (not always in use).
        
        * scale_needles (default: 5)
        
        * rounds (default: 16) - number of improvement iterations, after
          initial search - that each probe gets.
        
        * chance_try (default: 0.015) - The chance that a candidate pixel
          probe will start being filled in.
        
        * chance_retry (default: 0.9) - The chance that a pixel probe gets an
          improvement in an iteration.
        
        * chance_neighbor (default: 1.0) - The chance of trying to find
          neighbor improvements.
        
        * metric_dist_powk (default: 1.8) - influences the (lack of)
          importance of further away pixels.
        
        * metric_empty_hay_score (default: 0.275) - score given to pixels that
          are empty, in the search neighborhood of pixel, this being
          at default or higher value sometimes discourages some of the
          good very nearby matches.
        
        * metric_empty_needle_score (default: 0.18) - the score given in the
          metric to an empty spot.
        
        * metric_cohesion (default: 0.13) - influences the importance of probe
          spatial proximity.
        
        * ring_twist (default: 0.0) - incremental twist per circle, in
          radians.
        
        * direction_invariant (default: True) - wheter we normalize feature
          vector to start with highest energy ray.
        
        * source_neighbors (default: 8) - pick neighbor of neighbors as
          starting point if good, 4connected 8conntected or 12/16 with
          longer teleport.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__antialias(self, drawable_: Gimp.Drawable=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Scale3X Antialiasing
        
        Antialias using the Scale3X edge-extrapolation algorithm.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__apply_lens(self, drawable_: Gimp.Drawable=None, refraction_index: float=1.7, keep_surroundings: bool=False, background_color: Gegl.Color=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Apply Lens
        
        Simulates the optical distortion caused by having an elliptical lens
        over the image.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * refraction_index (default: 1.7)
        
        * keep_surroundings (default: False) - Keep image unchanged, where not
          affected by the lens.
        
        * background_color
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__average(self, drawable_: Gimp.Drawable=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """average
        
        Image blending operation 'average' (<tt>c = (cA + aB)/2</tt>).
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__band_tune(self, drawable_: Gimp.Drawable=None, radius1: float=1.1, scale1: float=-1.6, bw1: float=0.375, radius2: float=10.0, scale2: float=0.0, bw2: float=0.375, show_mask: bool=False, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Band tune
        
        Parametric band equalizer for tuning frequency bands of image, the op
        provides abstracted input parameters that control two
        difference of gaussians driven band pass filters used as
        adjustments of the image signal.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * radius1 (default: 1.1) - Features size for detail band, used for
          noise removal.
        
        * scale1 (default: -1.6) - Scaling factor for image features at
          radius, -1 cancels them out 1.0 edge enhances.
        
        * bw1 (default: 0.375) - lower values narrower band, higher values
          wider band - default value presumed to provide good band
          separation.
        
        * radius2 (default: 10.0) - Features size for edge band, used to
          compensate for loss of edges in detail pass.
        
        * scale2 (default: 0.0) - Scaling factor for image features at radius,
          -1 cancels them out 1.0 edge enhances.
        
        * bw2 (default: 0.375) - lower values narrower band, higher values
          wider band - default value presumed to provide good band
          separation.
        
        * show_mask (default: False)
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__bayer_matrix(self, drawable_: Gimp.Drawable=None, subdivisions: int=1, x_scale: int=1, y_scale: int=1, rotation: str='0', reflect: bool=False, amplitude: float=0.0, offset: float=0.0, exponent: float=0.0, x_offset: int=0, y_offset: int=0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Bayer Matrix
        
        Generate a Bayer matrix pattern.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * subdivisions (default: 1) - Number of subdivisions.
        
        * x_scale (default: 1) - Horizontal pattern scale.
        
        * y_scale (default: 1) - Vertical pattern scale.
        
        * rotation (default: 0) - Pattern rotation angle.
        
        * reflect (default: False) - Reflect the pattern horizontally.
        
        * amplitude (default: 0.0) - Pattern amplitude (logarithmic scale).
        
        * offset (default: 0.0) - Value offset.
        
        * exponent (default: 0.0) - Value exponent (logarithmic scale).
        
        * x_offset (default: 0) - Offset for X axis.
        
        * y_offset (default: 0) - Offset for Y axis.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__bevel(self, drawable_: Gimp.Drawable=None, type: str='chamfer', blendmode: str='hardlight', metric: str='chebyshev', radius: float=3.0, elevation: float=25.0, depth: int=40, azimuth: float=68.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Bevel
        
        Two bevel effects in one place, Chamfer - which simulates lighting of
        chamfered 3D-edges, and Bump - the second make a 3D inflation
        effect by an emboss covering a blur. Both bevels benefit from
        color filled alpha defined shapes.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * type (default: chamfer) - The family of bevel to use.
        
        * blendmode (default: hardlight) - What blending mode the bevel's
          emboss will be. Light Map is a special blend mode that
          allows users to extract the filters output as a light map
          which should be put on a layer above or be used with Gimp's
          blending options.
        
        * metric (default: chebyshev) - Distance Map is unique to chamfer
          bevel and has three settings that alter the structure of the
          chamfer.
        
        * radius (default: 3.0) - Radius of softening for making bump of the
          shape.
        
        * elevation (default: 25.0) - Elevation angle of the Bevel.
        
        * depth (default: 40) - Emboss depth - Brings out depth and detail of
          the bump bevel.
        
        * azimuth (default: 68.0) - Direction of a light source illuminating
          and shading the bevel.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__bilateral_filter(self, drawable_: Gimp.Drawable=None, blur_radius: float=4.0, edge_preservation: float=8.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Bilateral Filter
        
        Like a gaussian blur; but where the contribution for each
        neighborhood pixel is also weighted by the color difference
        with the original center pixel.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * blur_radius (default: 4.0) - Radius of square pixel region, (width
          and height will be radius*2+1).
        
        * edge_preservation (default: 8.0) - Amount of edge preservation.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__bilateral_filter_fast(self, drawable_: Gimp.Drawable=None, r_sigma: float=50.0, s_sigma: int=8, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Bilateral Box Filter
        
        A fast approximation of bilateral filter, using a box-filter instead
        of a gaussian blur.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * r_sigma (default: 50.0) - Level of smoothness.
        
        * s_sigma (default: 8) - Radius of square pixel region, (width and
          height will be radius*2+1).
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__blend_reflect(self, drawable_: Gimp.Drawable=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """blend-reflect
        
        Image blending operation 'blend-reflect' (<tt>c = cB>=1.0?1.0:cA*cA /
        (1.0-cB)</tt>).
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__bloom(self, drawable_: Gimp.Drawable=None, threshold: float=50.0, softness: float=25.0, radius: float=10.0, strength: float=50.0, limit_exposure: bool=False, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Bloom
        
        Add glow around bright areas.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * threshold (default: 50.0) - Glow-area brightness threshold.
        
        * softness (default: 25.0) - Glow-area edge softness.
        
        * radius (default: 10.0) - Glow radius.
        
        * strength (default: 50.0) - Glow strength.
        
        * limit_exposure (default: False) - Don't over-expose highlights.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__border_align(self, drawable_: Gimp.Drawable=None, origin_x: float=0.0, origin_y: float=0.0, near_z: float=0.0, sampler: Gegl.SamplerType=Gegl.SamplerType.LINEAR, x: float=0.5, y: float=0.5, horizontal_margin: float=0.0, vertical_margin: float=0.0, snap_integer: bool=True, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Border Align
        
        Aligns box of input rectangle with border of compositing target or
        aux' bounding-box border, if aux pad is not connected the op
        tries to figure out which bounding box' border applies.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * origin_x (default: 0.0) - X coordinate of origin.
        
        * origin_y (default: 0.0) - Y coordinate of origin.
        
        * near_z (default: 0.0) - Z coordinate of the near clipping plane.
        
        * sampler (default: Gegl.SamplerType.LINEAR) - Sampler used
          internally.
        
        * x (default: 0.5) - Horizontal justification 0.0 is left 0.5 centered
          and 1.0 right.
        
        * y (default: 0.5) - Vertical justification 0.0 is top 0.5 middle and
          1.0 bottom.
        
        * horizontal_margin (default: 0.0)
        
        * vertical_margin (default: 0.0)
        
        * snap_integer (default: True)
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__box_blur(self, drawable_: Gimp.Drawable=None, radius: int=4, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Box Blur
        
        Blur resulting from averaging the colors of a square neighborhood.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * radius (default: 4) - Radius of square pixel region, (width and
          height will be radius*2+1).
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__boxblur(self, drawable_: Gimp.Drawable=None, radius: int=4, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """BoxBlur
        
        Blur resulting from averaging the colors of a square neighborhood.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * radius (default: 4) - Radius of square pixel region, (width and
          height will be radius*2+1).
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__boxblur_1d(self, drawable_: Gimp.Drawable=None, radius: int=4, orientation: str='horizontal', blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """1D Box Blur
        
        Blur resulting from averaging the colors of a row neighborhood.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * radius (default: 4) - Radius of row pixel region, (size will be
          radius*2+1).
        
        * orientation (default: horizontal) - The orientation of the blur -
          hor/ver.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__brightness_contrast(self, drawable_: Gimp.Drawable=None, contrast: float=1.0, brightness: float=0.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Brightness Contrast
        
        Changes the light level and contrast. This operation operates in
        linear light, 'contrast' is a scale factor around 50% gray,
        and 'brightness' a constant offset to apply after contrast
        scaling.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * contrast (default: 1.0) - Magnitude of contrast scaling >1.0
          brighten < 1.0 darken.
        
        * brightness (default: 0.0) - Amount to increase brightness.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__buffer_sink(self, drawable_: Gimp.Drawable=None, buffer: GObject.Value=None, format: GObject.Value=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Buffer Sink
        
        Create a new GEGL buffer to write the resulting rendering.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * buffer
        
        * format
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__buffer_source(self, drawable_: Gimp.Drawable=None, buffer: Gegl.Buffer=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Buffer Source
        
        Use an existing in-memory GeglBuffer as image source.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * buffer - The GeglBuffer to load into the pipeline.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__bump_map(self, drawable_: Gimp.Drawable=None, type: str='linear', compensate: bool=True, invert: bool=False, tiled: bool=False, azimuth: float=135.0, elevation: float=45.0, depth: int=3, offset_x: int=0, offset_y: int=0, waterlevel: float=0.0, ambient: float=0.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Bump Map
        
        This plug-in uses the algorithm described by John Schlag, "Fast
        Embossing Effects on Raster Image Data" in Graphics GEMS IV
        (ISBN 0-12-336155-9). It takes a buffer to be applied as a
        bump map to another buffer and produces a nice embossing
        effect.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * type (default: linear) - Type of map.
        
        * compensate (default: True) - Compensate for darkening.
        
        * invert (default: False) - Invert bumpmap.
        
        * tiled (default: False) - Tiled bumpmap.
        
        * azimuth (default: 135.0)
        
        * elevation (default: 45.0)
        
        * depth (default: 3)
        
        * offset_x (default: 0)
        
        * offset_y (default: 0)
        
        * waterlevel (default: 0.0) - Level that full transparency should
          represent.
        
        * ambient (default: 0.0)
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__c2g(self, drawable_: Gimp.Drawable=None, radius: int=300, samples: int=4, iterations: int=10, enhance_shadows: bool=False, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Color to Grayscale
        
        Color to grayscale conversion, uses envelopes formed with the STRESS
        approach to perform local color-difference preserving
        grayscale generation.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * radius (default: 300) - Neighborhood taken into account, this is the
          radius in pixels taken into account when deciding which
          colors map to which gray values.
        
        * samples (default: 4) - Number of samples to do per iteration looking
          for the range of colors.
        
        * iterations (default: 10) - Number of iterations, a higher number of
          iterations provides less noisy results at a computational
          cost.
        
        * enhance_shadows (default: False) - When enabled details in shadows
          are boosted at the expense of noise.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__cache(self, drawable_: Gimp.Drawable=None, cache: Gegl.Buffer=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Cache
        
        An explicit caching node, caches results and should provide faster
        recomputation if what is cached by it is expensive but isn't
        changing.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * cache - NULL or a GeglBuffer containing cached rendering results,
          this is a special buffer where
          gegl_buffer_list_valid_rectangles returns the part of the
          cache that is valid.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__cartoon(self, drawable_: Gimp.Drawable=None, mask_radius: float=7.0, pct_black: float=0.2, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Cartoon
        
        Simulates a cartoon, its result is similar to a black felt pen
        drawing subsequently shaded with color. This is achieved by
        enhancing edges and darkening areas that are already
        distinctly darker than their neighborhood.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * mask_radius (default: 7.0)
        
        * pct_black (default: 0.2)
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__cast_format(self, drawable_: Gimp.Drawable=None, input_format: GObject.Value=None, output_format: GObject.Value=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Cast Format
        
        Cast the data between input_format and output_format, both formats
        must have the same bpp.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * input_format - The babl format of the input.
        
        * output_format - The babl format of the output.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__cast_space(self, drawable_: Gimp.Drawable=None, space_name: str='sRGB', pointer: GObject.Value=None, path: str='', blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Cast color space
        
        Override the specified color space setting a pointer to a format
        override the string property and setting an aux pad overrides
        both.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * space_name (default: sRGB) - One of: sRGB, Adobish, Rec2020,
          ProPhoto, Apple, ACEScg, ACES2065-1.
        
        * pointer - pointer to a const * Babl space.
        
        * path (default: ) - File system path to ICC matrix profile to load.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__cell_noise(self, drawable_: Gimp.Drawable=None, scale: float=1.0, shape: float=2.0, rank: int=1, iterations: int=1, palettize: bool=False, seed: int=0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Cell Noise
        
        Generates a cellular texture.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * scale (default: 1.0) - The scale of the noise function.
        
        * shape (default: 2.0) - Interpolate between Manhattan and Euclidean
          distance.
        
        * rank (default: 1) - Select the n-th closest point.
        
        * iterations (default: 1) - The number of noise octaves.
        
        * palettize (default: False) - Fill each cell with a random color.
        
        * seed (default: 0) - The random seed for the noise function.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__channel_mixer(self, drawable_: Gimp.Drawable=None, preserve_luminosity: bool=False, rr_gain: float=1.0, rg_gain: float=0.0, rb_gain: float=0.0, gr_gain: float=0.0, gg_gain: float=1.0, gb_gain: float=0.0, br_gain: float=0.0, bg_gain: float=0.0, bb_gain: float=1.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Channel Mixer
        
        Remix colors; by defining relative contributions from source
        components.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * preserve_luminosity (default: False)
        
        * rr_gain (default: 1.0) - Set the red amount for the red channel.
        
        * rg_gain (default: 0.0) - Set the green amount for the red channel.
        
        * rb_gain (default: 0.0) - Set the blue amount for the red channel.
        
        * gr_gain (default: 0.0) - Set the red amount for the green channel.
        
        * gg_gain (default: 1.0) - Set the green amount for the green channel.
        
        * gb_gain (default: 0.0) - Set the blue amount for the green channel.
        
        * br_gain (default: 0.0) - Set the red amount for the blue channel.
        
        * bg_gain (default: 0.0) - Set the green amount for the blue channel.
        
        * bb_gain (default: 1.0) - Set the blue amount for the blue channel.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__checkerboard(self, drawable_: Gimp.Drawable=None, x: int=16, y: int=16, x_offset: int=0, y_offset: int=0, color1: Gegl.Color=None, color2: Gegl.Color=None, format: GObject.Value=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Checkerboard
        
        Render a checkerboard pattern.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * x (default: 16) - Horizontal width of cells pixels.
        
        * y (default: 16) - Vertical width of cells pixels.
        
        * x_offset (default: 0) - Horizontal offset (from origin) for start of
          grid.
        
        * y_offset (default: 0) - Vertical offset (from origin) for start of
          grid.
        
        * color1 - The first cell color.
        
        * color2 - The second cell color.
        
        * format - The babl format of the output.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__clone(self, drawable_: Gimp.Drawable=None, ref: str='ID', blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Clone
        
        Clone a buffer, this is the same as gegl:nop but can get special
        treatment to get more human readable references in
        serializations/UI.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * ref (default: ID) - The reference ID used as input (for use in XML).
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__color(self, drawable_: Gimp.Drawable=None, value: Gegl.Color=None, format: GObject.Value=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Color
        
        Generates a buffer entirely filled with the specified color, use
        gegl:crop to get smaller dimensions.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * value - The color to render (defaults to 'black').
        
        * format - The babl format of the output.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__color_assimilation_grid(self, drawable_: Gimp.Drawable=None, grid_size: float=23.0, saturation: float=2.5, angle: float=45.0, line_thickness: float=0.4, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Color Assimilation Grid
        
        Turn image grayscale and overlay an oversaturated grid - through
        color assimilation happening in the human visual system, for
        some grid scales this produces the illusion that the
        grayscale grid cells themselves also have color.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * grid_size (default: 23.0)
        
        * saturation (default: 2.5)
        
        * angle (default: 45.0)
        
        * line_thickness (default: 0.4)
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__color_enhance(self, drawable_: Gimp.Drawable=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Color Enhance
        
        Stretch color chroma to cover maximum possible range, keeping hue and
        lightness untouched.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__color_exchange(self, drawable_: Gimp.Drawable=None, from_color: Gegl.Color=None, to_color: Gegl.Color=None, red_threshold: float=0.0, green_threshold: float=0.0, blue_threshold: float=0.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Exchange color
        
        Exchange one color with another, optionally setting a threshold to
        convert from one shade to another.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * from_color - The color to change.
        
        * to_color - Replacement color.
        
        * red_threshold (default: 0.0) - Red threshold of the input color.
        
        * green_threshold (default: 0.0) - Green threshold of the input color.
        
        * blue_threshold (default: 0.0) - Blue threshold of the input color.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__color_overlay(self, drawable_: Gimp.Drawable=None, value: Gegl.Color=None, srgb: bool=False, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Color Overlay
        
        Paint a color overlay over the input, preserving its transparency.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * value - The color to paint over the input.
        
        * srgb (default: False) - Use sRGB gamma instead of linear.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__color_rotate(self, drawable_: Gimp.Drawable=None, src_clockwise: bool=False, src_from: float=0.0, src_to: float=90.0, dest_clockwise: bool=False, dest_from: float=0.0, dest_to: float=90.0, threshold: float=0.0, gray_mode: str='change-to', hue: float=0.0, saturation: float=0.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Color Rotate
        
        Replace a range of colors with another.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * src_clockwise (default: False) - Switch to clockwise.
        
        * src_from (default: 0.0) - Start angle of the source color range.
        
        * src_to (default: 90.0) - End angle of the source color range.
        
        * dest_clockwise (default: False) - Switch to clockwise.
        
        * dest_from (default: 0.0) - Start angle of the destination color
          range.
        
        * dest_to (default: 90.0) - End angle of the destination color range.
        
        * threshold (default: 0.0) - Colors with a saturation less than this
          will treated as gray.
        
        * gray_mode (default: change-to) - Treat as this: Gray colors from
          above source range will be treated as if they had this hue
          and saturation Change to this: Change gray colors to this
          hue and saturation.
        
        * hue (default: 0.0) - Hue value for above gray settings.
        
        * saturation (default: 0.0) - Saturation value for above gray
          settings.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__color_temperature(self, drawable_: Gimp.Drawable=None, original_temperature: float=6500.0, intended_temperature: float=6500.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Color Temperature
        
        Change the color temperature of the image, from an assumed original
        color temperature to an intended one.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * original_temperature (default: 6500.0) - Estimated temperature of
          the light source in Kelvin the image was taken with.
        
        * intended_temperature (default: 6500.0) - Corrected estimation of the
          temperature of the light source in Kelvin.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__color_to_alpha(self, drawable_: Gimp.Drawable=None, color: Gegl.Color=None, transparency_threshold: float=0.0, opacity_threshold: float=1.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Color to Alpha
        
        Convert a specified color to transparency, works best with white.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * color - The color to make transparent.
        
        * transparency_threshold (default: 0.0) - The limit below which colors
          become transparent.
        
        * opacity_threshold (default: 1.0) - The limit above which colors
          remain opaque.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__color_warp(self, drawable_: Gimp.Drawable=None, from_0: Gegl.Color=None, to_0: Gegl.Color=None, weight_0: float=100.0, from_1: Gegl.Color=None, to_1: Gegl.Color=None, weight_1: float=100.0, from_2: Gegl.Color=None, to_2: Gegl.Color=None, weight_2: float=100.0, from_3: Gegl.Color=None, to_3: Gegl.Color=None, weight_3: float=100.0, from_4: Gegl.Color=None, to_4: Gegl.Color=None, weight_4: float=100.0, from_5: Gegl.Color=None, to_5: Gegl.Color=None, weight_5: float=100.0, from_6: Gegl.Color=None, to_6: Gegl.Color=None, weight_6: float=100.0, from_7: Gegl.Color=None, to_7: Gegl.Color=None, weight_7: float=100.0, weight: float=1.0, amount: float=1.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Color warp
        
        Warps the colors of an image between colors with weighted distortion
        factors, color pairs which are black to black get ignored
        when constructing the mapping.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * from_0
        
        * to_0
        
        * weight_0 (default: 100.0)
        
        * from_1
        
        * to_1
        
        * weight_1 (default: 100.0)
        
        * from_2
        
        * to_2
        
        * weight_2 (default: 100.0)
        
        * from_3
        
        * to_3
        
        * weight_3 (default: 100.0)
        
        * from_4
        
        * to_4
        
        * weight_4 (default: 100.0)
        
        * from_5
        
        * to_5
        
        * weight_5 (default: 100.0)
        
        * from_6
        
        * to_6
        
        * weight_6 (default: 100.0)
        
        * from_7
        
        * to_7
        
        * weight_7 (default: 100.0)
        
        * weight (default: 1.0)
        
        * amount (default: 1.0)
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__component_extract(self, drawable_: Gimp.Drawable=None, component: str='rgb-r', invert: bool=False, linear: bool=False, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Extract Component
        
        Extract a color model component.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * component (default: rgb-r) - Component to extract.
        
        * invert (default: False) - Invert the extracted component.
        
        * linear (default: False) - Use linear output instead of gamma
          corrected.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__connected_components(self, drawable_: Gimp.Drawable=None, separator: Gegl.Color=None, invert: bool=False, base: float=0.0, step: float=1.0, normalize: bool=True, linear: bool=False, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Connected Components
        
        Fills each connected region of the input, separated from the rest of
        the input by a given color, with a unique color.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * separator - Component separator color.
        
        * invert (default: False) - Invert the separator region.
        
        * base (default: 0.0) - Base index.
        
        * step (default: 1.0) - Index step.
        
        * normalize (default: True) - Normalize output to the range [base,base
          + step].
        
        * linear (default: False) - Linear output.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__contrast_curve(self, drawable_: Gimp.Drawable=None, sampling_points: int=0, curve: Gegl.Curve=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Contrast Curve
        
        Adjusts the contrast of a grayscale image with a curve specifying
        contrast for intensity.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * sampling_points (default: 0) - Number of curve sampling points.  0
          for exact calculation.
        
        * curve - The contrast curve.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__convert_format(self, drawable_: Gimp.Drawable=None, format: GObject.Value=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Convert Format
        
        Convert the data to the specified format.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * format - The babl format of the output.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__convert_space(self, drawable_: Gimp.Drawable=None, space_name: str='sRGB', pointer: GObject.Value=None, path: str='', blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Convert color space
        
        Set color space which subsequent babl-formats in the pipeline are
        created with, and the ICC profile potentially embedded for
        external color management, setting a pointer to a format
        overrides the string property and setting an aux pad
        overrides both.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * space_name (default: sRGB) - One of: sRGB, Adobish, Rec2020,
          ProPhoto, Apple, ACEScg, ACES2065-1.
        
        * pointer - pointer to a const * Babl space.
        
        * path (default: ) - File system path to ICC matrix profile to load.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__convolution_matrix(self, drawable_: Gimp.Drawable=None, a1: float=0.0, a2: float=0.0, a3: float=0.0, a4: float=0.0, a5: float=0.0, b1: float=0.0, b2: float=0.0, b3: float=0.0, b4: float=0.0, b5: float=0.0, c1: float=0.0, c2: float=0.0, c3: float=1.0, c4: float=0.0, c5: float=0.0, d1: float=0.0, d2: float=0.0, d3: float=0.0, d4: float=0.0, d5: float=0.0, e1: float=0.0, e2: float=0.0, e3: float=0.0, e4: float=0.0, e5: float=0.0, divisor: float=1.0, offset: float=0.0, red: bool=True, green: bool=True, blue: bool=True, alpha: bool=True, normalize: bool=True, alpha_weight: bool=True, border: str='clamp', blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Convolution Matrix
        
        Apply a generic 5x5 convolution matrix.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * a1 (default: 0.0)
        
        * a2 (default: 0.0)
        
        * a3 (default: 0.0)
        
        * a4 (default: 0.0)
        
        * a5 (default: 0.0)
        
        * b1 (default: 0.0)
        
        * b2 (default: 0.0)
        
        * b3 (default: 0.0)
        
        * b4 (default: 0.0)
        
        * b5 (default: 0.0)
        
        * c1 (default: 0.0)
        
        * c2 (default: 0.0)
        
        * c3 (default: 1.0)
        
        * c4 (default: 0.0)
        
        * c5 (default: 0.0)
        
        * d1 (default: 0.0)
        
        * d2 (default: 0.0)
        
        * d3 (default: 0.0)
        
        * d4 (default: 0.0)
        
        * d5 (default: 0.0)
        
        * e1 (default: 0.0)
        
        * e2 (default: 0.0)
        
        * e3 (default: 0.0)
        
        * e4 (default: 0.0)
        
        * e5 (default: 0.0)
        
        * divisor (default: 1.0)
        
        * offset (default: 0.0)
        
        * red (default: True)
        
        * green (default: True)
        
        * blue (default: True)
        
        * alpha (default: True)
        
        * normalize (default: True)
        
        * alpha_weight (default: True)
        
        * border (default: clamp)
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__copy_buffer(self, drawable_: Gimp.Drawable=None, buffer: Gegl.Buffer=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Copy Buffer
        
        Writes image data to an already existing buffer.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * buffer - An already existing GeglBuffer to write incoming buffer
          data to, or NULL.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__crop(self, drawable_: Gimp.Drawable=None, x: float=0.0, y: float=0.0, width: float=0.0, height: float=0.0, reset_origin: bool=False, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Crop
        
        Crops a buffer, if the aux pad is connected the bounding box of the
        node connected is used. When the crop area is configured to
        0x0 at 0,0 and nothing is connected on aux, the bounding box
        of the node at the producing end of the input chain is used.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * x (default: 0.0)
        
        * y (default: 0.0)
        
        * width (default: 0.0)
        
        * height (default: 0.0)
        
        * reset_origin (default: False)
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__ctx_script(self, drawable_: Gimp.Drawable=None, u8: bool=False, d: str='duration 5.0   # duration of this page/scene\n\nrgba 0 0 0 (0=0 3=1.0) paint\n\n\nsave\nglobalAlpha (0=0 1=1.0)\n\ntranslate 50% 50% \nscale 100^ 100^\n\ntranslate -0.6 -0.6 scale 0.041 0.041 g M0 0m24.277 20.074m-.473.020m-1.607 1.364m.148.745m.097.182c5.014.017.027.034.041.051c.495.602 1.252.616 1.736.726c.484.110.843.406 1.020.729l-.010 0c.149.270.440-1.029.334-1.932c-.085-.725-.417-1.263-.840-1.616z gray0F G g M0 0m24.679 1.686c.029 0.056 0.081 0c.099.016.217.122.258.242c.041.120 1.672 8.369-.655 13.117c-2.327 4.748-7.474 6.185-10.439 6.165c-4.982.073-9.310-1.706-11.300-5.760c2.161-.073 2.879-2.166 2.914-3.909c.011-.538.854-6.389 1.047-6.646c.053-.065.131-.032.169.027c.810 1.266 1.555 1.920 2.648 2.518c1.737.750 2.868 1.026 5.430.570c2.563-.456 6.783-1.977 9.550-6.130c.106-.136.209-.186.296-.196z rgb.549.502.451F G g g Y9.339 11.583O2.856 3.200B0 0 1 0 6.283 0G gray1F G g g Y9.955 11.701O1.718 2.089B0 0 1 0 6.283 0G gray0F G g B9.961 10.547.783 0 6.283 0gray1F G g W.979.202 0-.204.979 0 0 0 1g Y.016 12.121O2.432 3.136B0 0 1 0 6.283 0G gray0F G g B2.168 10.276 1.324 0 6.283 0gray1F G g M0 0m18.543 16.076c-.174-.121.034-.311.411-.324c.226-.010.513.048.813.219c.809.462.836 1.031.571 1.154gray0F G g M0 0m19.337 16.213c-1.594 2.213-4.031 3.547-8.009 2.984c-.519-.069-.913.615 1.453.712c2.966.121 5.525-.764 7.267-3.182z gray0F G g M0 0m18.995 17.907c-.661-.276-1.568.662-1.225.914c.527.338 2.364 1.513 2.752 1.719c.450.239 1.092-.188 1.092-.188l.200-.377c0 0-.010-.771-.456-1.010c-.291-.154-1.504-.686-2.355-1.055c0 0-.010 0-.010 0z rgb.949.518.051F G g M0 0m21.071 20.510c.084.297.380.162.559.262c.179.100.221.422.517.336c.296-.085.685-.784.601-1.081c-.084-.297-.380-.162-.559-.262c-.179-.100-.221-.422-.517-.337c-.297.085-.685.784-.601 1.082z gray.733F G g g Y15.632 11.590O3.750 3.828B0 0 1 0 6.283 0G gray1F G g g Y16.539 11.730O2.322 2.545B0 0 1 0 6.283 0G gray0F G g B16.539 10.344.997 0 6.283 0gray1F G g M0 0m23.353 19.831c-.354.005-.671.119-.880.341c-.613.639-.497 1.610-.029 2.216c-.078-.261-.171-.718-.033-.816c.160-.115.532.539.838.350c.305-.189-.289-.712.010-.959c.312-.247.734.444.997.133c.225-.274-.505-.683-.390-.872c.106-.174.610-.005.858.118c-.417-.348-.924-.517-1.372-.511z rgb.549.502.451F G\nrestore\n\nsave\ntranslate (0=50 1=75 2=33  4=65 5=50)% (0=50 1=75 2=23 3=40 4=14 5=50)%\nscale (0=30 3=60 5=30)^ (0=30 3=60 5=30)^\n\ntranslate -0.5 -0.5\n\nrgba 1 1 1 0.4\nm 0.43956786,0.90788066 c 0.0195929,0.0102943 0.0716181,0.0218038 0.10361884,-0.0167646 L 0.93768705,0.37887837 c 0.019925,-0.0342044 -0.00963,-0.0544608 -0.0308834,-0.0508084 -0.17965502,0.0285588 -0.35466092,-0.055125 -0.45096394,-0.21253089 -0.0176003,-0.02988716 -0.0594422,-0.01560777 -0.0594422,0.0139473 0,0.0591101 0.003321,0.49845135 0.001991,0.70699722 0.00039042,0.0283487 0.0157362,0.0529866 0.0408456,0.070733 F\nf 0.0525 0 0.9905 0\np 0.0 1.0 1.0 0.66 1.0\np 0.2 1 0.66 0 1.0\np 0.5 1 0.0 0 1.0\np 1.0 0.4 0.0 0.53 1.0\nm 0.39772584,0.91850721 h -0.0664159 c -0.15408489,0 -0.27894675,-0.12486192 -0.27894675,-0.2789468 0,-0.15408489 0.12486186,-0.27861466 0.27894675,-0.27894675 l 0.18585599,0.0000662 c 0.0111839,0.00017138 0.0158287,0.001542 0.0263337,0.0134822 0.11733258,0.14373102 0.3018009,0.36870115 0.3942639,0.49195316 0.0185394,0.0332794 -0.0106225,0.0505515 -0.0228143,0.0505207 F\nf 0.697 0.17 0.4318 0.884\np 0.0 0.26 0.26 1 1.0\np 0.3 0 1 1 0.4\np 1.0 0 1 0.26 1.0\nm 0.43956786,0.90788066 c 0.0195929,0.0102943 0.0716181,0.0218038 0.10361884,-0.0167646 L 0.93768705,0.37887837 c 0.019925,-0.0342044 -0.00963,-0.0544608 -0.0308834,-0.0508084 -0.17965502,0.0285588 -0.35466092,-0.055125 -0.45096394,-0.21253089 -0.0176003,-0.02988716 -0.0594422,-0.01560777 -0.0594422,0.0139473 0,0.0591101 0.003321,0.49845135 0.001991,0.70699722 0.0039042,0.0283487 0.0157362,0.0529866 0.0408456,0.070733 F\nrestore\n\nnewPage\nduration 1\ngray (0=0 1=1) paint\n\nnewPage\nduration 1\nrgba 0 0 0 (0=1.0 1=0) paint\n\nnewPage\nduration 2\nsave\n rgba\n conicGradient 50% 50%  (0=0 5=14) 7\n addStop 0.0 1 0 0 1\n addStop (0=0.5 1=0.8  2=0.5) 1 0 0 0.0\n addStop 1.0 1 0 0 1.0\n\n paint\nrestore\n\nnewPage\nrgb 1 1 0 paint\nduration 1\n', play: bool=False, loop_scene: bool=False, page: int=0, time: float=0.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Ctx script
        
        Renders a ctx vector graphics script.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * u8 (default: False) - Render using R'aG'AB'a u8 (rather than linear
          RaGaBaA float); the user->device space color maping is
          identity by default; thus changing the meaning of colors set
          in the script.
        
        * d (default: duration 5.0   # duration of this page/scene  rgba 0 0 0
          (0=0 3=1.0) paint   save globalAlpha (0=0 1=1.0)  translate
          50% 50%  scale 100^ 100^  translate -0.6 -0.6 scale 0.041
          0.041 g M0 0m24.277 20.074m-.473.020m-1.607
          1.364m.148.745m.097.182c5.014.017.027.034.041.051c.495.602
          1.252.616 1.736.726c.484.110.843.406 1.020.729l-.010 0c.149.
          270.440-1.029.334-1.932c-.085-.725-.417-1.263-.840-1.616z
          gray0F G g M0 0m24.679 1.686c.029 0.056 0.081
          0c.099.016.217.122.258.242c.041.120 1.672 8.369-.655
          13.117c-2.327 4.748-7.474 6.185-10.439
          6.165c-4.982.073-9.310-1.706-11.300-5.760c2.161-.073
          2.879-2.166 2.914-3.909c.011-.538.854-6.389
          1.047-6.646c.053-.065.131-.032.169.027c.810 1.266 1.555
          1.920 2.648 2.518c1.737.750 2.868 1.026 5.430.570c2.563-.456
          6.783-1.977 9.550-6.130c.106-.136.209-.186.296-.196z
          rgb.549.502.451F G g g Y9.339 11.583O2.856 3.200B0 0 1 0
          6.283 0G gray1F G g g Y9.955 11.701O1.718 2.089B0 0 1 0
          6.283 0G gray0F G g B9.961 10.547.783 0 6.283 0gray1F G g
          W.979.202 0-.204.979 0 0 0 1g Y.016 12.121O2.432 3.136B0 0 1
          0 6.283 0G gray0F G g B2.168 10.276 1.324 0 6.283 0gray1F G
          g M0 0m18.543 16.076c-.174-.121.034-.311.411-.324c.226-.010.
          513.048.813.219c.809.462.836 1.031.571 1.154gray0F G g M0
          0m19.337 16.213c-1.594 2.213-4.031 3.547-8.009
          2.984c-.519-.069-.913.615 1.453.712c2.966.121 5.525-.764
          7.267-3.182z gray0F G g M0 0m18.995
          17.907c-.661-.276-1.568.662-1.225.914c.527.338 2.364 1.513
          2.752 1.719c.450.239 1.092-.188 1.092-.188l.200-.377c0
          0-.010-.771-.456-1.010c-.291-.154-1.504-.686-2.355-1.055c0
          0-.010 0-.010 0z rgb.949.518.051F G g M0 0m21.071 20.510c.08
          4.297.380.162.559.262c.179.100.221.422.517.336c.296-.085.685
          -.784.601-1.081c-.084-.297-.380-.162-.559-.262c-.179-.100-.2
          21-.422-.517-.337c-.297.085-.685.784-.601 1.082z gray.733F G
          g g Y15.632 11.590O3.750 3.828B0 0 1 0 6.283 0G gray1F G g g
          Y16.539 11.730O2.322 2.545B0 0 1 0 6.283 0G gray0F G g
          B16.539 10.344.997 0 6.283 0gray1F G g M0 0m23.353
          19.831c-.354.005-.671.119-.880.341c-.613.639-.497 1.610-.029
          2.216c-.078-.261-.171-.718-.033-.816c.160-.115.532.539.838.3
          50c.305-.189-.289-.712.010-.959c.312-.247.734.444.997.133c.2
          25-.274-.505-.683-.390-.872c.106-.174.610-.005.858.118c-.417
          -.348-.924-.517-1.372-.511z rgb.549.502.451F G restore  save
          translate (0=50 1=75 2=33  4=65 5=50)% (0=50 1=75 2=23 3=40
          4=14 5=50)% scale (0=30 3=60 5=30)^ (0=30 3=60 5=30)^
          translate -0.5 -0.5  rgba 1 1 1 0.4 m 0.43956786,0.90788066
          c 0.0195929,0.0102943 0.0716181,0.0218038
          0.10361884,-0.0167646 L 0.93768705,0.37887837 c
          0.019925,-0.0342044 -0.00963,-0.0544608
          -0.0308834,-0.0508084 -0.17965502,0.0285588
          -0.35466092,-0.055125 -0.45096394,-0.21253089
          -0.0176003,-0.02988716 -0.0594422,-0.01560777
          -0.0594422,0.0139473 0,0.0591101 0.003321,0.49845135
          0.001991,0.70699722 0.00039042,0.0283487 0.0157362,0.0529866
          0.0408456,0.070733 F f 0.0525 0 0.9905 0 p 0.0 1.0 1.0 0.66
          1.0 p 0.2 1 0.66 0 1.0 p 0.5 1 0.0 0 1.0 p 1.0 0.4 0.0 0.53
          1.0 m 0.39772584,0.91850721 h -0.0664159 c -0.15408489,0
          -0.27894675,-0.12486192 -0.27894675,-0.2789468 0,-0.15408489
          0.12486186,-0.27861466 0.27894675,-0.27894675 l
          0.18585599,0.0000662 c 0.0111839,0.00017138
          0.0158287,0.001542 0.0263337,0.0134822 0.11733258,0.14373102
          0.3018009,0.36870115 0.3942639,0.49195316
          0.0185394,0.0332794 -0.0106225,0.0505515
          -0.0228143,0.0505207 F f 0.697 0.17 0.4318 0.884 p 0.0 0.26
          0.26 1 1.0 p 0.3 0 1 1 0.4 p 1.0 0 1 0.26 1.0 m
          0.43956786,0.90788066 c 0.0195929,0.0102943
          0.0716181,0.0218038 0.10361884,-0.0167646 L
          0.93768705,0.37887837 c 0.019925,-0.0342044
          -0.00963,-0.0544608 -0.0308834,-0.0508084
          -0.17965502,0.0285588 -0.35466092,-0.055125
          -0.45096394,-0.21253089 -0.0176003,-0.02988716
          -0.0594422,-0.01560777 -0.0594422,0.0139473 0,0.0591101
          0.003321,0.49845135 0.001991,0.70699722 0.0039042,0.0283487
          0.0157362,0.0529866 0.0408456,0.070733 F restore  newPage
          duration 1 gray (0=0 1=1) paint  newPage duration 1 rgba 0 0
          0 (0=1.0 1=0) paint  newPage duration 2 save  rgba
          conicGradient 50% 50%  (0=0 5=14) 7  addStop 0.0 1 0 0 1
          addStop (0=0.5 1=0.8  2=0.5) 1 0 0 0.0  addStop 1.0 1 0 0
          1.0   paint restore  newPage rgb 1 1 0 paint duration 1 ) -
          A string containing a ctx protocol document.
        
        * play (default: False)
        
        * loop_scene (default: False)
        
        * page (default: 0)
        
        * time (default: 0.0)
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__cubism(self, drawable_: Gimp.Drawable=None, tile_size: float=10.0, tile_saturation: float=2.5, bg_color: Gegl.Color=None, seed: int=0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Cubism
        
        Convert the image into randomly rotated square blobs, somehow
        resembling a cubist painting style.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * tile_size (default: 10.0) - Average diameter of each tile (in
          pixels).
        
        * tile_saturation (default: 2.5) - Expand tiles by this amount.
        
        * bg_color - The tiles' background color.
        
        * seed (default: 0)
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__deinterlace(self, drawable_: Gimp.Drawable=None, keep: str='even', orientation: str='horizontal', size: int=1, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Deinterlace
        
        Fix images where every other row or column is missing.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * keep (default: even) - Keep even or odd fields.
        
        * orientation (default: horizontal) - Deinterlace horizontally or
          vertically.
        
        * size (default: 1) - Block size of deinterlacing rows/columns.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__demosaic_bimedian(self, drawable_: Gimp.Drawable=None, pattern: int=0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Demosaic With Bimedian Interpolation
        
        Performs a grayscale2color demosaicing of an image, using bimedian
        interpolation.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * pattern (default: 0) - Bayer pattern used, 0 seems to work for some
          nikon files, 2 for some Fuji files.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__demosaic_simple(self, drawable_: Gimp.Drawable=None, pattern: int=0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Demosaic Without Interpolation
        
        Performs a naive grayscale2color demosaicing of an image, no
        interpolation.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * pattern (default: 0) - Bayer pattern used, 0 seems to work for some
          nikon files, 2 for some Fuji files.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__denoise_dct(self, drawable_: Gimp.Drawable=None, patch_size: str='size8x8', sigma: float=5.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Denoise DCT
        
        Denoising algorithm using a per-patch DCT thresholding.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * patch_size (default: size8x8) - Size of patches used to denoise.
        
        * sigma (default: 5.0) - Noise standard deviation.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__difference_of_gaussians(self, drawable_: Gimp.Drawable=None, radius1: float=1.0, radius2: float=2.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Difference of Gaussians
        
        Edge detection with control of edge thickness, based on the
        difference of two gaussian blurs.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * radius1 (default: 1.0)
        
        * radius2 (default: 2.0)
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__diffraction_patterns(self, drawable_: Gimp.Drawable=None, red_frequency: float=0.815, green_frequency: float=1.221, blue_frequency: float=1.123, red_contours: float=0.821, green_contours: float=0.821, blue_contours: float=0.974, red_sedges: float=0.61, green_sedges: float=0.677, blue_sedges: float=0.636, brightness: float=0.066, scattering: float=37.126, polarization: float=-0.473, width: int=200, height: int=200, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Diffraction Patterns
        
        Generate diffraction patterns.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * red_frequency (default: 0.815) - Light frequency (red).
        
        * green_frequency (default: 1.221) - Light frequency (green).
        
        * blue_frequency (default: 1.123) - Light frequency (blue).
        
        * red_contours (default: 0.821) - Number of contours (red).
        
        * green_contours (default: 0.821) - Number of contours (green).
        
        * blue_contours (default: 0.974) - Number of contours (blue).
        
        * red_sedges (default: 0.61) - Number of sharp edges (red).
        
        * green_sedges (default: 0.677) - Number of sharp edges (green).
        
        * blue_sedges (default: 0.636) - Number of sharp edges (blue).
        
        * brightness (default: 0.066) - Brightness and shifting/fattening of
          contours.
        
        * scattering (default: 37.126) - Scattering (speed vs. quality).
        
        * polarization (default: -0.473) - Polarization.
        
        * width (default: 200) - Width of the generated buffer.
        
        * height (default: 200) - Height of the generated buffer.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__displace(self, drawable_: Gimp.Drawable=None, displace_mode: str='cartesian', sampler_type: str='cubic', abyss_policy: str='clamp', amount_x: float=0.0, amount_y: float=0.0, center: bool=False, center_x: float=0.5, center_y: float=0.5, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Displace
        
        Displace pixels as indicated by displacement maps.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * displace_mode (default: cartesian) - Mode of displacement.
        
        * sampler_type (default: cubic) - Type of GeglSampler used to fetch
          input pixels.
        
        * abyss_policy (default: clamp) - How image edges are handled.
        
        * amount_x (default: 0.0) - Displace multiplier for X or radial
          direction.
        
        * amount_y (default: 0.0) - Displace multiplier for Y or tangent
          (degrees) direction.
        
        * center (default: False) - Center the displacement around a specified
          point.
        
        * center_x (default: 0.5) - X coordinate of the displacement center.
        
        * center_y (default: 0.5) - Y coordinate of the displacement center.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__display(self, drawable_: Gimp.Drawable=None, window_title: str='window_title', blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Display
        
        Display the input buffer in a window.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * window_title (default: window_title) - Title to be given to output
          window.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__distance_transform(self, drawable_: Gimp.Drawable=None, metric: str='euclidean', edge_handling: str='below', threshold_lo: float=0.0001, threshold_hi: float=1.0, averaging: int=0, normalize: bool=True, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Distance Transform
        
        Calculate a distance transform.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * metric (default: euclidean) - Metric to use for the distance
          calculation.
        
        * edge_handling (default: below) - How areas outside the input are
          considered when calculating distance.
        
        * threshold_lo (default: 0.0001)
        
        * threshold_hi (default: 1.0)
        
        * averaging (default: 0) - Number of computations for grayscale
          averaging.
        
        * normalize (default: True) - Normalize output to range 0.0 to 1.0.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__dither(self, drawable_: Gimp.Drawable=None, red_levels: int=6, green_levels: int=6, blue_levels: int=6, alpha_levels: int=256, dither_method: str='floyd-steinberg', seed: int=0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Dither
        
        Reduce the number of colors in the image, by reducing the levels per
        channel (colors and alpha). Different dithering methods can
        be specified to counteract quantization induced banding.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * red_levels (default: 6) - Number of levels for red channel.
        
        * green_levels (default: 6) - Number of levels for green channel.
        
        * blue_levels (default: 6) - Number of levels for blue channel.
        
        * alpha_levels (default: 256) - Number of levels for alpha channel.
        
        * dither_method (default: floyd-steinberg) - The dithering method to
          use.
        
        * seed (default: 0)
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__ditto(self, drawable_: Gimp.Drawable=None, sampler_type: str='nearest', blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Ditto
        
        Test op to do a 1:1 map of input to output, while sampling.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * sampler_type (default: nearest) - Sampler used internally.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__divide(self, drawable_: Gimp.Drawable=None, value: float=1.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Divide
        
        Math operation divide, performs the operation per pixel, using either
        the constant provided in 'value' or the corresponding pixel
        from the buffer on aux as operands. The result is the
        evaluation of the expression result =
        value==0.0f?0.0f:input/value.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * value (default: 1.0) - global value used if aux doesn't contain
          data.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__domain_transform(self, drawable_: Gimp.Drawable=None, n_iterations: int=3, spatial_factor: float=30.0, edge_preservation: float=0.8, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Smooth by Domain Transform
        
        An edge-preserving smoothing filter implemented with the Domain
        Transform recursive technique. Similar to a bilateral filter,
        but faster to compute.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * n_iterations (default: 3) - Number of filtering iterations. A value
          between 2 and 4 is usually enough.
        
        * spatial_factor (default: 30.0) - Spatial standard deviation of the
          blur kernel, measured in pixels.
        
        * edge_preservation (default: 0.8) - Amount of edge preservation. This
          quantity is inversely proportional to the range standard
          deviation of the blur kernel.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__dropshadow(self, drawable_: Gimp.Drawable=None, x: float=20.0, y: float=20.0, radius: float=10.0, grow_shape: str='circle', grow_radius: float=0.0, color: Gegl.Color=None, opacity: float=0.5, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Dropshadow
        
        Creates a dropshadow effect on the input buffer.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * x (default: 20.0) - Horizontal shadow offset.
        
        * y (default: 20.0) - Vertical shadow offset.
        
        * radius (default: 10.0)
        
        * grow_shape (default: circle) - The shape to expand or contract the
          shadow in.
        
        * grow_radius (default: 0.0) - The distance to expand the shadow
          before blurring; a negative value will contract the shadow
          instead.
        
        * color - The shadow's color (defaults to 'black').
        
        * opacity (default: 0.5)
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__edge(self, drawable_: Gimp.Drawable=None, algorithm: str='sobel', amount: float=2.0, border_behavior: str='clamp', blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Edge Detection
        
        Several simple methods for detecting edges.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * algorithm (default: sobel) - Edge detection algorithm.
        
        * amount (default: 2.0) - Edge detection amount.
        
        * border_behavior (default: clamp) - Edge detection behavior.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__edge_laplace(self, drawable_: Gimp.Drawable=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Laplacian Edge Detection
        
        High-resolution edge detection.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__edge_neon(self, drawable_: Gimp.Drawable=None, radius: float=5.0, amount: float=0.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Neon Edge Detection
        
        Performs edge detection using a Gaussian derivative method.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * radius (default: 5.0) - Radius of effect (in pixels).
        
        * amount (default: 0.0) - Strength of Effect.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__edge_sobel(self, drawable_: Gimp.Drawable=None, horizontal: bool=True, vertical: bool=True, keep_sign: bool=True, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Sobel Edge Detection
        
        Specialized direction-dependent edge detection.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * horizontal (default: True)
        
        * vertical (default: True)
        
        * keep_sign (default: True) - Keep negative values in result; when
          off, the absolute value of the result is used instead.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__emboss(self, drawable_: Gimp.Drawable=None, type: str='emboss', azimuth: float=30.0, elevation: float=45.0, depth: int=20, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Emboss
        
        Simulates an image created by embossing.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * type (default: emboss) - Rendering type.
        
        * azimuth (default: 30.0) - Light angle (degrees).
        
        * elevation (default: 45.0) - Elevation angle (degrees).
        
        * depth (default: 20) - Filter width.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__engrave(self, drawable_: Gimp.Drawable=None, row_height: int=10, limit: bool=False, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Engrave
        
        Simulate an antique engraving.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * row_height (default: 10) - Resolution in pixels.
        
        * limit (default: False) - Limit line width.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__exp_combine(self, drawable_: Gimp.Drawable=None, exposures: str='', steps: int=13, sigma: float=8.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Combine Exposures
        
        Combine multiple scene exposures into one high dynamic range image.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * exposures (default: ) - Relative brightness of each exposure in EV.
        
        * steps (default: 13) - Log2 of source's discretization steps.
        
        * sigma (default: 8.0) - Weight distribution sigma controlling
          response contributions.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__exposure(self, drawable_: Gimp.Drawable=None, black_level: float=0.0, exposure: float=0.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Exposure
        
        Change exposure of an image in shutter speed stops.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * black_level (default: 0.0) - Adjust the black level.
        
        * exposure (default: 0.0) - Relative brightness change in stops.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__exr_load(self, drawable_: Gimp.Drawable=None, path: str='', blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """
        
        EXR image loader.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * path (default: ) - Path of file to load.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__exr_save(self, drawable_: Gimp.Drawable=None, path: str='', tile: int=0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """
        
        OpenEXR image saver.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * path (default: ) - path of file to write to.
        
        * tile (default: 0) - tile size to use.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__fattal02(self, drawable_: Gimp.Drawable=None, alpha: float=1.0, beta: float=0.9, saturation: float=0.8, noise: float=0.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Fattal et al. 2002 Tone Mapping
        
        Adapt an image, which may have a high dynamic range, for presentation
        using a low dynamic range. This operator attenuates the
        magnitudes of local image gradients, producing luminance
        within the range 0.0-1.0. This tonemapping approach was
        originally presented by Raanan Fattal, in the 2002 SIGGRAPH
        paper: Gradient Domain High Dynamic Range Compression.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * alpha (default: 1.0) - Gradient threshold for detail enhancement.
        
        * beta (default: 0.9) - Strength of local detail enhancement.
        
        * saturation (default: 0.8) - Global color saturation factor.
        
        * noise (default: 0.0) - Gradient threshold for lowering detail
          enhancement.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__fill_path(self, drawable_: Gimp.Drawable=None, color: Gegl.Color=None, opacity: float=1.0, fill_rule: str='nonzero', transform: str='', d: Gegl.Path=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Fill Path
        
        Renders a filled region.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * color - Color of paint to use for filling.
        
        * opacity (default: 1.0) - The fill opacity to use.
        
        * fill_rule (default: nonzero) - how to determine what to fill
          (nonzero|evenodd).
        
        * transform (default: ) - svg style description of transform.
        
        * d - A GeglVector representing the path of the stroke.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__focus_blur(self, drawable_: Gimp.Drawable=None, blur_type: str='gaussian', blur_radius: float=25.0, highlight_factor: float=0.0, highlight_threshold_low: float=0.0, highlight_threshold_high: float=1.0, shape: str='circle', x: float=0.5, y: float=0.5, radius: float=0.75, focus: float=0.25, midpoint: float=0.5, aspect_ratio: float=0.0, rotation: float=0.0, high_quality: bool=False, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Focus Blur
        
        Blur the image around a focal point.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * blur_type (default: gaussian)
        
        * blur_radius (default: 25.0) - Out-of-focus blur radius.
        
        * highlight_factor (default: 0.0) - Relative highlight strength.
        
        * highlight_threshold_low (default: 0.0)
        
        * highlight_threshold_high (default: 1.0)
        
        * shape (default: circle)
        
        * x (default: 0.5)
        
        * y (default: 0.5)
        
        * radius (default: 0.75) - Focus-region outer radius.
        
        * focus (default: 0.25) - Focus-region inner limit.
        
        * midpoint (default: 0.5) - Focus-transition midpoint.
        
        * aspect_ratio (default: 0.0)
        
        * rotation (default: 0.0)
        
        * high_quality (default: False) - Generate more accurate and
          consistent output (slower).
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__fractal_explorer(self, drawable_: Gimp.Drawable=None, fractaltype: str='mandelbrot', iter: int=50, zoom: float=300.0, shiftx: float=0.0, shifty: float=0.0, cx: float=-0.75, cy: float=-0.2, redstretch: float=1.0, greenstretch: float=1.0, bluestretch: float=1.0, redmode: str='cosine', greenmode: str='cosine', bluemode: str='sine', redinvert: bool=False, greeninvert: bool=False, blueinvert: bool=False, ncolors: int=256, useloglog: bool=False, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Fractal Explorer
        
        Rendering of multiple different fractal systems, with configurable
        coloring options.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * fractaltype (default: mandelbrot) - Type of a fractal.
        
        * iter (default: 50)
        
        * zoom (default: 300.0) - Zoom in the fractal space.
        
        * shiftx (default: 0.0) - X shift in the fractal space.
        
        * shifty (default: 0.0) - Y shift in the fractal space.
        
        * cx (default: -0.75) - CX (No effect in Mandelbrot and Sierpinski).
        
        * cy (default: -0.2) - CY (No effect in Mandelbrot and Sierpinski).
        
        * redstretch (default: 1.0)
        
        * greenstretch (default: 1.0)
        
        * bluestretch (default: 1.0)
        
        * redmode (default: cosine)
        
        * greenmode (default: cosine)
        
        * bluemode (default: sine)
        
        * redinvert (default: False)
        
        * greeninvert (default: False)
        
        * blueinvert (default: False)
        
        * ncolors (default: 256)
        
        * useloglog (default: False)
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__fractal_trace(self, drawable_: Gimp.Drawable=None, fractal: str='mandelbrot', X1: float=-1.0, X2: float=0.5, Y1: float=-1.0, Y2: float=1.0, JX: float=0.5, JY: float=0.5, depth: int=3, bailout: float=10000.0, abyss_policy: str='loop', blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Fractal Trace
        
        Transform the image with the fractals.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * fractal (default: mandelbrot)
        
        * X1 (default: -1.0) - X1 value, position.
        
        * X2 (default: 0.5) - X2 value, position.
        
        * Y1 (default: -1.0) - Y1 value, position.
        
        * Y2 (default: 1.0) - Y2 value, position.
        
        * JX (default: 0.5) - Julia seed X value, position.
        
        * JY (default: 0.5) - Julia seed Y value, position.
        
        * depth (default: 3)
        
        * bailout (default: 10000.0)
        
        * abyss_policy (default: loop) - How to deal with pixels outside of
          the input buffer.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__gamma(self, drawable_: Gimp.Drawable=None, value: float=1.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Gamma
        
        Math operation gamma, performs the operation per pixel, using either
        the constant provided in 'value' or the corresponding pixel
        from the buffer on aux as operands. The result is the
        evaluation of the expression result = (input >= 0.0f ? powf
        (input, value) : -powf (-input, value)).
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * value (default: 1.0) - global value used if aux doesn't contain
          data.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__gaussian_blur(self, drawable_: Gimp.Drawable=None, std_dev_x: float=1.5, std_dev_y: float=1.5, filter: str='auto', abyss_policy: str='clamp', clip_extent: bool=True, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Gaussian Blur
        
        Performs an averaging of neighboring pixels with the normal
        distribution as weighting.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * std_dev_x (default: 1.5) - Standard deviation for the horizontal
          axis.
        
        * std_dev_y (default: 1.5) - Standard deviation (spatial scale
          factor).
        
        * filter (default: auto) - How the gaussian kernel is discretized.
        
        * abyss_policy (default: clamp) - How image edges are handled.
        
        * clip_extent (default: True) - Should the output extent be clipped to
          the input extent.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__gaussian_blur_selective(self, drawable_: Gimp.Drawable=None, blur_radius: float=5.0, max_delta: float=0.2, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Selective Gaussian Blur
        
        Blur neighboring pixels, but only in low-contrast areas.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * blur_radius (default: 5.0) - Radius of square pixel region, (width
          and height will be radius*2+1).
        
        * max_delta (default: 0.2) - Maximum delta.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__gblur_1d(self, drawable_: Gimp.Drawable=None, std_dev: float=1.5, orientation: str='horizontal', filter: str='auto', abyss_policy: str='none', clip_extent: bool=True, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """1D Gaussian-blur
        
        Performs an averaging of neighboring pixels with the normal
        distribution as weighting.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * std_dev (default: 1.5) - Standard deviation (spatial scale factor).
        
        * orientation (default: horizontal) - The orientation of the blur -
          hor/ver.
        
        * filter (default: auto) - How the gaussian kernel is discretized.
        
        * abyss_policy (default: none) - How image edges are handled.
        
        * clip_extent (default: True) - Should the output extent be clipped to
          the input extent.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__gegl(self, drawable_: Gimp.Drawable=None, string: str='# uncomment a set of lines below by removing the\n# leading to test and modify an example, use\n# use ctrl+a before typing to select all, if you\n# want a blank slate.\n#\nid=in # name a reference to the input buffer \'in\'\n\n\n# adaptive threshold:\n#\n#threshold aux=[ ref=in gaussian-blur  std-dev-x=0.2rel std-dev-y=0.2rel ]\n\n# local white balance and contrast stretching\n#\n#divide aux=[  ref=in  median-blur radius=.25rel percentile=100  gaussian-blur std-dev-x=.5rel std-dev-y=.5rel ]\n\n# median sharpen (unsharp-mask with median-blur):\n#\n#add aux=[  ref=in subtract aux=[ ref=in  median-blur radius=5  ] ] \n\n# styled text overlay\n#\n#over aux=[ text wrap=1.0rel  color=rgb(0.1,0.1,.3) size=.1rel string="ipsum sic amet deliriarium mic sel adendum. Mic fubar bax qux facilium dhat." dropshadow radius=.01rel  grow-radius=0.0065rel color=white x=0 y=0 border-align x=0.5 y=0.33  ] # try x=1 y=1\n\n\n# thumbs with misc filters along bottom of image:\n#\n#over aux=[\n#  ref=in scale-ratio x=0.20 y=0.20 newsprint period=0.01rel period2=0.01rel period3=0.01rel period4=0.01rel color-model=cmyk aa-samples=64 pattern=pssquare pattern2=pssquare pattern3=pssquare pattern4=pssquare \n#  pack gap=0.05rel aux=[ ref=in scale-ratio x=0.20 y=0.20 newsprint period=0.01rel period2=0.01rel period3=0.01rel period4=00.01rel color-model=rgb aa-samples=64  ] \n#  pack gap=0.05rel aux=[ ref=in scale-ratio x=0.20 y=0.20 id=scaled snn-mean snn-mean crop aux=[ ref=scaled ] ] \n#  pack gap=0.05rel aux=[ ref=in scale-ratio x=0.20 y=0.20 mosaic tile-size=0.03rel ] \n#  border-align x=0.5 y=0.9\n#]\n\n# All the examples can be expanded to be on\n# multiple lines, this graph description\n# language is not whitespace sensitive, the\n# rel suffix is relative to image height\n', error: str='', blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """GEGL graph
        
        Do a chain of operations, with key=value pairs after each operation
        name to set properties. And aux=[ source filter ] for
        specifying a chain with a source as something connected to an
        aux pad.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * string (default: # uncomment a set of lines below by removing the #
          leading to test and modify an example, use # use ctrl+a
          before typing to select all, if you # want a blank slate. #
          id=in # name a reference to the input buffer 'in'   #
          adaptive threshold: # #threshold aux=[ ref=in gaussian-blur
          std-dev-x=0.2rel std-dev-y=0.2rel ]  # local white balance
          and contrast stretching # #divide aux=[  ref=in  median-blur
          radius=.25rel percentile=100  gaussian-blur std-dev-x=.5rel
          std-dev-y=.5rel ]  # median sharpen (unsharp-mask with
          median-blur): # #add aux=[  ref=in subtract aux=[ ref=in
          median-blur radius=5  ] ]   # styled text overlay # #over
          aux=[ text wrap=1.0rel  color=rgb(0.1,0.1,.3) size=.1rel
          string="ipsum sic amet deliriarium mic sel adendum. Mic
          fubar bax qux facilium dhat." dropshadow radius=.01rel
          grow-radius=0.0065rel color=white x=0 y=0 border-align x=0.5
          y=0.33  ] # try x=1 y=1   # thumbs with misc filters along
          bottom of image: # #over aux=[ #  ref=in scale-ratio x=0.20
          y=0.20 newsprint period=0.01rel period2=0.01rel
          period3=0.01rel period4=0.01rel color-model=cmyk
          aa-samples=64 pattern=pssquare pattern2=pssquare
          pattern3=pssquare pattern4=pssquare  #  pack gap=0.05rel
          aux=[ ref=in scale-ratio x=0.20 y=0.20 newsprint
          period=0.01rel period2=0.01rel period3=0.01rel
          period4=00.01rel color-model=rgb aa-samples=64  ]  #  pack
          gap=0.05rel aux=[ ref=in scale-ratio x=0.20 y=0.20 id=scaled
          snn-mean snn-mean crop aux=[ ref=scaled ] ]  #  pack
          gap=0.05rel aux=[ ref=in scale-ratio x=0.20 y=0.20 mosaic
          tile-size=0.03rel ]  #  border-align x=0.5 y=0.9 #]  # All
          the examples can be expanded to be on # multiple lines, this
          graph description # language is not whitespace sensitive,
          the # rel suffix is relative to image height ) - [op
          [property=value] [property=value]] [[op] [property=value].
        
        * error (default: ) - There is a problem in the syntax or in the
          application of parsed property values. Things might mostly
          work nevertheless.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__gegl_buffer_load(self, drawable_: Gimp.Drawable=None, path: str='/tmp/gegl-buffer.gegl', blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """
        
        GeglBuffer file loader.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * path (default: /tmp/gegl-buffer.gegl) - Path of GeglBuffer file to
          load.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__gegl_buffer_save(self, drawable_: Gimp.Drawable=None, path: str='/tmp/gegl-buffer.gegl', blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """
        
        GeglBuffer file writer.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * path (default: /tmp/gegl-buffer.gegl) - Target file path to write
          GeglBuffer to.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__gif_load(self, drawable_: Gimp.Drawable=None, path: str='', frame: int=0, frames: int=0, frame_delay: int=100, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """GIF File Loader
        
        GIF image loader.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * path (default: ) - Path of file to load.
        
        * frame (default: 0) - frame number to decode.
        
        * frames (default: 0) - Number of frames in gif animation.
        
        * frame_delay (default: 100) - Delay in ms for last decoded frame.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__gradient_map(self, drawable_: Gimp.Drawable=None, color1: Gegl.Color=None, stop1: float=0.0, color2: Gegl.Color=None, stop2: float=1.0, color3: Gegl.Color=None, stop3: float=1.0, color4: Gegl.Color=None, stop4: float=1.0, color5: Gegl.Color=None, stop5: float=1.0, srgb: bool=False, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Gradient Map
        
        Applies a color gradient.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * color1
        
        * stop1 (default: 0.0)
        
        * color2
        
        * stop2 (default: 1.0)
        
        * color3
        
        * stop3 (default: 1.0)
        
        * color4
        
        * stop4 (default: 1.0)
        
        * color5
        
        * stop5 (default: 1.0)
        
        * srgb (default: False)
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__gray(self, drawable_: Gimp.Drawable=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Make Gray
        
        Turns the image grayscale.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__gray_component_replacement(self, drawable_: Gimp.Drawable=None, inklimit: float=250.0, amount: float=100.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Gray Component Replacement
        
        Reduces total ink-coverage by transferring color from CMY to K
        component.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * inklimit (default: 250.0)
        
        * amount (default: 100.0)
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__grid(self, drawable_: Gimp.Drawable=None, x: int=32, y: int=32, x_offset: int=0, y_offset: int=0, line_width: int=4, line_height: int=4, line_color: Gegl.Color=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Grid
        
        Grid renderer.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * x (default: 32) - Horizontal width of cells pixels.
        
        * y (default: 32) - Vertical width of cells pixels.
        
        * x_offset (default: 0) - Horizontal offset (from origin) for start of
          grid.
        
        * y_offset (default: 0) - Vertical offset (from origin) for start of
          grid.
        
        * line_width (default: 4) - Width of grid lines in pixels.
        
        * line_height (default: 4) - Height of grid lines in pixels.
        
        * line_color - Color of the grid lines.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__high_pass(self, drawable_: Gimp.Drawable=None, std_dev: float=4.0, contrast: float=1.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """High Pass Filter
        
        Enhances fine details.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * std_dev (default: 4.0) - Standard deviation (spatial scale factor).
        
        * contrast (default: 1.0) - Contrast of high-pass.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__hue_chroma(self, drawable_: Gimp.Drawable=None, hue: float=0.0, chroma: float=0.0, lightness: float=0.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Hue-Chroma
        
        Adjust LCH Hue, Chroma, and Lightness.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * hue (default: 0.0) - Hue adjustment.
        
        * chroma (default: 0.0) - Chroma adjustment.
        
        * lightness (default: 0.0) - Lightness adjustment.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__icc_load(self, drawable_: Gimp.Drawable=None, path: str='', blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """ICC File Loader
        
        ICC profile loader.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * path (default: ) - Path of file to load.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__icc_save(self, drawable_: Gimp.Drawable=None, path: str='', blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """ICC profile saver
        
        Stores the ICC profile that would be embedded if stored as an image.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * path (default: ) - Target path and filename.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__illusion(self, drawable_: Gimp.Drawable=None, division: int=8, illusion_type: str='type1', blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Illusion
        
        Superimpose many altered copies of the image.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * division (default: 8) - The number of divisions.
        
        * illusion_type (default: type1) - Type of illusion.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__image_compare(self, drawable_: Gimp.Drawable=None, wrong_pixels: int=0, max_diff: float=0.0, avg_diff_wrong: float=0.0, avg_diff_total: float=0.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """
        
        Compares if input and aux buffers are different. Global statistics
        are saved in the properties and a visual difference image is
        produced as a visual result.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * wrong_pixels (default: 0) - Number of differing pixels.
        
        * max_diff (default: 0.0) - Maximum difference between two pixels.
        
        * avg_diff_wrong (default: 0.0) - Average difference between wrong
          pixels.
        
        * avg_diff_total (default: 0.0) - Average difference between all
          pixels.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__image_gradient(self, drawable_: Gimp.Drawable=None, output_mode: str='magnitude', blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Image Gradient
        
        Compute gradient magnitude and/or direction by central differences.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * output_mode (default: magnitude) - Output Mode.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__inner_glow(self, drawable_: Gimp.Drawable=None, grow_shape: str='circleig', x: float=0.0, y: float=0.0, radius: float=7.5, grow_radius: float=4.0, opacity: float=1.2, value: Gegl.Color=None, cover: float=60.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Inner Glow
        
        GEGL does an inner shadow glow effect; for more interesting use
        different blend mode than the default, Replace.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * grow_shape (default: circleig) - The shape to expand or contract the
          shadow in.
        
        * x (default: 0.0) - Horizontal shadow offset.
        
        * y (default: 0.0) - Vertical shadow offset.
        
        * radius (default: 7.5)
        
        * grow_radius (default: 4.0) - The distance to expand the shadow
          before blurring; a negative value will contract the shadow
          instead.
        
        * opacity (default: 1.2)
        
        * value - The color to paint over the input.
        
        * cover (default: 60.0) - Median Blur covers unaffected pixels. Making
          this slider too high will make it outline-like. So only
          slide it as high as you need to cover thin shape corners.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__integral_image(self, drawable_: Gimp.Drawable=None, squared: bool=False, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Integral Image
        
        Compute integral and squared integral image.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * squared (default: False) - Add squared values sum to the output.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__invert_gamma(self, drawable_: Gimp.Drawable=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Invert in Perceptual space
        
        Invert the components (except alpha) perceptually, the result is the
        corresponding "negative" image.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__invert_linear(self, drawable_: Gimp.Drawable=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Invert
        
        Invert the components (except alpha) in linear light, the result is
        the corresponding "negative" image.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__jp2_load(self, drawable_: Gimp.Drawable=None, path: str='', uri: str='', blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """JPEG 2000 File Loader
        
        JPEG 2000 image loader using jasper.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * path (default: ) - Path of file to load.
        
        * uri (default: ) - URI for file to load.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__jpg_load(self, drawable_: Gimp.Drawable=None, path: str='', uri: str='', blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """JPEG File Loader
        
        JPEG image loader using libjpeg.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * path (default: ) - Path of file to load.
        
        * uri (default: ) - URI of file to load.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__jpg_save(self, drawable_: Gimp.Drawable=None, path: str='', quality: int=90, smoothing: int=0, optimize: bool=True, progressive: bool=True, grayscale: bool=False, metadata: Gegl.Metadata=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """JPEG File Saver
        
        JPEG image saver, using libjpeg.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * path (default: ) - Target path and filename, use '-' for stdout.
        
        * quality (default: 90) - JPEG compression quality (between 1 and
          100).
        
        * smoothing (default: 0) - Smoothing factor from 1 to 100; 0 disables
          smoothing.
        
        * optimize (default: True) - Use optimized huffman tables.
        
        * progressive (default: True) - Create progressive JPEG images.
        
        * grayscale (default: False) - Create a grayscale (monochrome) image.
        
        * metadata - Object to supply image metadata.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__json__dropshadow2(self, drawable_: Gimp.Drawable=None, x: float=0.0, y: float=0.0, color: Gegl.Color=None, radius: float=1.5, opacity: float=1.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """
        
        
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * x (default: 0.0) - Horizontal translation.
        
        * y (default: 0.0) - Vertical translation.
        
        * color - The color to render (defaults to 'black').
        
        * radius (default: 1.5) - Standard deviation for the horizontal axis.
        
        * opacity (default: 1.0) - Global opacity value that is always used on
          top of the optional auxiliary input buffer.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__json__grey2(self, drawable_: Gimp.Drawable=None, height: float=0.0, width: float=0.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """
        
        
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * height (default: 0.0)
        
        * width (default: 0.0)
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__layer(self, drawable_: Gimp.Drawable=None, composite_op: str='gegl:over', opacity: float=1.0, x: float=0.0, y: float=0.0, scale: float=1.0, src: str='', blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Layer
        
        A layer in the traditional sense.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * composite_op (default: gegl:over) - Composite operation to use.
        
        * opacity (default: 1.0)
        
        * x (default: 0.0) - Horizontal position in pixels.
        
        * y (default: 0.0) - Vertical position in pixels.
        
        * scale (default: 1.0) - Scale 1:1 size.
        
        * src (default: ) - Source image file path (png, jpg, raw, svg, bmp,
          tif, ...).
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__lcms_from_profile(self, drawable_: Gimp.Drawable=None, src_profile: GObject.Value=None, intent: str='perceptual', black_point_compensation: bool=False, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """LCMS From Profile
        
        Converts the input from an ICC color profile to a well defined babl
        format. The buffer's data will then be correctly managed by
        GEGL for further processing.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * src_profile
        
        * intent (default: perceptual) - The rendering intent to use in the
          conversion.
        
        * black_point_compensation (default: False) - Convert using black
          point compensation.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__lens_blur(self, drawable_: Gimp.Drawable=None, radius: float=10.0, highlight_factor: float=0.0, highlight_threshold_low: float=0.0, highlight_threshold_high: float=1.0, clip: bool=True, linear_mask: bool=False, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Lens Blur
        
        Simulate out-of-focus lens blur.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * radius (default: 10.0) - Blur radius.
        
        * highlight_factor (default: 0.0) - Relative highlight strength.
        
        * highlight_threshold_low (default: 0.0)
        
        * highlight_threshold_high (default: 1.0)
        
        * clip (default: True) - Clip output to the input extents.
        
        * linear_mask (default: False) - Use linear mask values.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__lens_correct(self, drawable_: Gimp.Drawable=None, maker: str='none', Camera: str='none', Lens: str='none', focal: float=20.0, center: bool=True, cx: int=0, cy: int=0, rscale: float=0.5, correct: bool=True, red_a: float=0.0, red_b: float=0.0, red_c: float=0.0, red_d: float=1.0, green_a: float=0.0, green_b: float=0.0, green_c: float=0.0, green_d: float=1.0, blue_a: float=0.0, blue_b: float=0.0, blue_c: float=0.0, blue_d: float=1.0, alpha_a: float=0.0, alpha_b: float=0.0, alpha_c: float=0.0, alpha_d: float=1.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """
        
        Copies image performing lens distortion correction.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * maker (default: none) - Write lens maker correctly.
        
        * Camera (default: none) - Write camera name correctly.
        
        * Lens (default: none) - Write your lens model with uppercase letters.
        
        * focal (default: 20.0) - Calculate b value from focal.
        
        * center (default: True) - If you want center.
        
        * cx (default: 0) - Coordinates of lens center.
        
        * cy (default: 0) - Coordinates of lens center.
        
        * rscale (default: 0.5) - Scale of the image.
        
        * correct (default: True) - Autocorrect D values for lens correction
          models.
        
        * red_a (default: 0.0)
        
        * red_b (default: 0.0)
        
        * red_c (default: 0.0)
        
        * red_d (default: 1.0)
        
        * green_a (default: 0.0)
        
        * green_b (default: 0.0)
        
        * green_c (default: 0.0)
        
        * green_d (default: 1.0)
        
        * blue_a (default: 0.0)
        
        * blue_b (default: 0.0)
        
        * blue_c (default: 0.0)
        
        * blue_d (default: 1.0)
        
        * alpha_a (default: 0.0)
        
        * alpha_b (default: 0.0)
        
        * alpha_c (default: 0.0)
        
        * alpha_d (default: 1.0)
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__lens_distortion(self, drawable_: Gimp.Drawable=None, main: float=0.0, edge: float=0.0, zoom: float=0.0, x_shift: float=0.0, y_shift: float=0.0, brighten: float=0.0, background: Gegl.Color=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Lens Distortion
        
        Corrects barrel or pincushion lens distortion.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * main (default: 0.0) - Amount of second-order distortion.
        
        * edge (default: 0.0) - Amount of fourth-order distortion.
        
        * zoom (default: 0.0) - Rescale overall image size.
        
        * x_shift (default: 0.0) - Effect center offset in X.
        
        * y_shift (default: 0.0) - Effect center offset in Y.
        
        * brighten (default: 0.0) - Adjust brightness in corners.
        
        * background
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__lens_flare(self, drawable_: Gimp.Drawable=None, pos_x: float=0.5, pos_y: float=0.5, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Lens Flare
        
        Adds a lens flare effect.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * pos_x (default: 0.5) - X coordinates of the flare center.
        
        * pos_y (default: 0.5) - Y coordinates of the flare center.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__levels(self, drawable_: Gimp.Drawable=None, in_low: float=0.0, in_high: float=1.0, out_low: float=0.0, out_high: float=1.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Levels
        
        Remaps the intensity range of the image.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * in_low (default: 0.0) - Input luminance level to become lowest
          output.
        
        * in_high (default: 1.0) - Input luminance level to become white.
        
        * out_low (default: 0.0) - Lowest luminance level in output.
        
        * out_high (default: 1.0) - Highest luminance level in output.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__line_profile(self, drawable_: Gimp.Drawable=None, x0: int=0, x1: int=0, y0: int=0, y1: int=0, width: int=1024, height: int=256, min: float=500.0, max: float=8.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Line Profile
        
        Renders luminance profiles for red green and blue components along
        the specified line in the input buffer, plotted in a buffer
        of the specified size.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * x0 (default: 0) - Start x coordinate.
        
        * x1 (default: 0) - End x coordinate.
        
        * y0 (default: 0) - Start y coordinate.
        
        * y1 (default: 0) - End y coordinate.
        
        * width (default: 1024)
        
        * height (default: 256)
        
        * min (default: 500.0) - Value at bottom.
        
        * max (default: 8.0) - Value at top.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__linear_gradient(self, drawable_: Gimp.Drawable=None, start_x: float=25.0, start_y: float=25.0, end_x: float=150.0, end_y: float=150.0, start_color: Gegl.Color=None, end_color: Gegl.Color=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Linear Gradient
        
        Linear gradient renderer.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * start_x (default: 25.0)
        
        * start_y (default: 25.0)
        
        * end_x (default: 150.0)
        
        * end_y (default: 150.0)
        
        * start_color - The color at (x1, y1).
        
        * end_color - The color at (x2, y2).
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__linear_sinusoid(self, drawable_: Gimp.Drawable=None, x_period: float=128.0, y_period: float=128.0, x_amplitude: float=0.0, y_amplitude: float=0.0, x_phase: float=0.0, y_phase: float=0.0, angle: float=90.0, offset: float=0.0, exponent: float=0.0, x_offset: float=0.0, y_offset: float=0.0, rotation: float=0.0, supersampling: int=1, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Linear Sinusoid
        
        Generate a linear sinusoid pattern.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * x_period (default: 128.0) - Period for X axis.
        
        * y_period (default: 128.0) - Period for Y axis.
        
        * x_amplitude (default: 0.0) - Amplitude for X axis (logarithmic
          scale).
        
        * y_amplitude (default: 0.0) - Amplitude for Y axis (logarithmic
          scale).
        
        * x_phase (default: 0.0) - Phase for X axis.
        
        * y_phase (default: 0.0) - Phase for Y axis.
        
        * angle (default: 90.0) - Axis separation angle.
        
        * offset (default: 0.0) - Value offset.
        
        * exponent (default: 0.0) - Value exponent (logarithmic scale).
        
        * x_offset (default: 0.0) - Offset for X axis.
        
        * y_offset (default: 0.0) - Offset for Y axis.
        
        * rotation (default: 0.0) - Pattern rotation angle.
        
        * supersampling (default: 1) - Number of samples along each axis per
          pixel.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__load(self, drawable_: Gimp.Drawable=None, path: str='', uri: str='', metadata: Gegl.Metadata=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Load Image
        
        Multipurpose file loader, that uses other native handlers, and
        fallback conversion using Image Magick's convert.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * path (default: ) - Path of file to load.
        
        * uri (default: ) - URI of file to load.
        
        * metadata - Object to supply image metadata.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__local_threshold(self, drawable_: Gimp.Drawable=None, radius: float=200.0, aa_factor: int=1, low: float=0.5, high: float=1.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Local Threshold
        
        Applies a threshold using the local neighborhood.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * radius (default: 200.0) - Standard deviation of gaussian
          neighborhood average for computing local contrast. If 0 is
          used a global threshold is used instead of one based on
          local contrast.
        
        * aa_factor (default: 1) - Rough target of levels of accuracy for
          antialiasing, 1 to disable antialiasing.
        
        * low (default: 0.5) - Thresholding level, 0.5 towards 0 to minimize
          shadows and towards 1.0 to minimize highlights.
        
        * high (default: 1.0) - Maximum values to include, above this gets set
          to 0.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__long_shadow(self, drawable_: Gimp.Drawable=None, style: str='finite', angle: float=45.0, length: float=100.0, midpoint: float=100.0, midpoint_rel: float=0.5, color: Gegl.Color=None, composition: str='shadow-plus-image', blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Long Shadow
        
        Creates a long-shadow effect.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * style (default: finite) - Shadow style.
        
        * angle (default: 45.0) - Shadow angle.
        
        * length (default: 100.0) - Shadow length.
        
        * midpoint (default: 100.0) - Shadow fade midpoint.
        
        * midpoint_rel (default: 0.5) - Shadow fade midpoint, as a factor of
          the shadow length.
        
        * color - Shadow color.
        
        * composition (default: shadow-plus-image) - Output composition.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__magick_load(self, drawable_: Gimp.Drawable=None, path: str='/tmp/gegl-logo.svg', blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """
        
        Image Magick wrapper using the png op.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * path (default: /tmp/gegl-logo.svg) - Path of file to load.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__mantiuk06(self, drawable_: Gimp.Drawable=None, contrast: float=0.1, saturation: float=0.8, detail: float=1.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Mantiuk 2006 Tone Mapping
        
        Adapt an image, which may have a high dynamic range, for presentation
        using a low dynamic range. This operator constrains contrasts
        across multiple spatial frequencies, producing luminance
        within the range 0.0-1.0.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * contrast (default: 0.1) - The amount of contrast compression.
        
        * saturation (default: 0.8) - Global color saturation factor.
        
        * detail (default: 1.0) - Level of emphasis on image gradient details.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__map_absolute(self, drawable_: Gimp.Drawable=None, sampler_type: str='cubic', abyss_policy: str='none', blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Map Absolute
        
        Sample input with an auxiliary buffer that contain absolute source
        coordinates.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * sampler_type (default: cubic)
        
        * abyss_policy (default: none)
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__map_relative(self, drawable_: Gimp.Drawable=None, scaling: float=1.0, sampler_type: str='cubic', abyss_policy: str='none', blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Map Relative
        
        Sample input with an auxiliary buffer that contain relative source
        coordinates.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * scaling (default: 1.0) - scaling factor of displacement, indicates
          how large spatial displacement a relative mapping value of
          1.0 corresponds to.
        
        * sampler_type (default: cubic)
        
        * abyss_policy (default: none)
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__matting_global(self, drawable_: Gimp.Drawable=None, iterations: int=10, seed: int=0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Matting Global
        
        Given a sparse user supplied tri-map and an input image, create a
        foreground alpha matte. Set white as foreground, black as
        background for the tri-map. Everything else will be treated
        as unknown and filled in.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * iterations (default: 10)
        
        * seed (default: 0)
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__matting_levin(self, drawable_: Gimp.Drawable=None, epsilon: int=-6, radius: int=1, threshold: float=0.02, lambda: float=100.0, levels: int=4, active_levels: int=2, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Matting Levin
        
        Given a sparse user supplied tri-map and an input image, create a
        foreground alpha mat. Set white as selected, black as
        unselected, for the tri-map.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * epsilon (default: -6) - Log of the error weighting.
        
        * radius (default: 1) - Radius of the processing window.
        
        * threshold (default: 0.02) - Alpha threshold for multilevel
          processing.
        
        * lambda (default: 100.0) - Trimap influence factor.
        
        * levels (default: 4) - Number of downsampled levels to use.
        
        * active_levels (default: 2) - Number of levels to perform solving.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__maze(self, drawable_: Gimp.Drawable=None, x: int=16, y: int=16, algorithm_type: str='depth-first', tileable: bool=False, seed: int=0, fg_color: Gegl.Color=None, bg_color: Gegl.Color=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Maze
        
        Draw a labyrinth.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * x (default: 16) - Horizontal width of cells pixels.
        
        * y (default: 16) - Vertical width of cells pixels.
        
        * algorithm_type (default: depth-first) - Maze algorithm type.
        
        * tileable (default: False)
        
        * seed (default: 0)
        
        * fg_color - The foreground color.
        
        * bg_color - The background color.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__mblur(self, drawable_: Gimp.Drawable=None, dampness: float=0.95, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Temporal blur
        
        Accumulating motion blur using a kalman filter, for use with video
        sequences of frames.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * dampness (default: 0.95) - The value represents the contribution of
          the past to the new frame.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__mean_curvature_blur(self, drawable_: Gimp.Drawable=None, iterations: int=20, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Mean Curvature Blur
        
        Regularize geometry at a speed proportional to the local mean
        curvature value.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * iterations (default: 20) - Controls the number of iterations.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__median_blur(self, drawable_: Gimp.Drawable=None, neighborhood: str='circle', radius: int=3, percentile: float=50.0, alpha_percentile: float=50.0, abyss_policy: str='clamp', high_precision: bool=False, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Median Blur
        
        Blur resulting from computing the median color in the neighborhood of
        each pixel.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * neighborhood (default: circle) - Neighborhood type.
        
        * radius (default: 3) - Neighborhood radius, a negative value will
          calculate with inverted percentiles.
        
        * percentile (default: 50.0) - Neighborhood color percentile.
        
        * alpha_percentile (default: 50.0) - Neighborhood alpha percentile.
        
        * abyss_policy (default: clamp) - How image edges are handled.
        
        * high_precision (default: False) - Avoid clipping and quantization
          (slower).
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__mirrors(self, drawable_: Gimp.Drawable=None, m_angle: float=0.0, r_angle: float=0.0, n_segs: int=6, c_x: float=0.5, c_y: float=0.5, o_x: float=0.0, o_y: float=0.0, trim_x: float=0.0, trim_y: float=0.0, input_scale: float=100.0, output_scale: float=1.0, clip: bool=True, warp: bool=True, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Kaleidoscopic Mirroring
        
        Create a kaleidoscope like effect.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * m_angle (default: 0.0) - Rotation applied to the mirrors.
        
        * r_angle (default: 0.0) - Rotation applied to the result.
        
        * n_segs (default: 6) - Number of mirrors to use.
        
        * c_x (default: 0.5) - position of symmetry center in output.
        
        * c_y (default: 0.5) - position of symmetry center in output.
        
        * o_x (default: 0.0) - X axis ratio for the center of mirroring.
        
        * o_y (default: 0.0) - Y axis ratio for the center of mirroring.
        
        * trim_x (default: 0.0) - X axis ratio for trimming mirror expanse.
        
        * trim_y (default: 0.0) - Y axis ratio for trimming mirror expanse.
        
        * input_scale (default: 100.0) - Scale factor to make rendering size
          bigger.
        
        * output_scale (default: 1.0) - Scale factor to make rendering size
          bigger.
        
        * clip (default: True)
        
        * warp (default: True) - Fill full output area.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__mix(self, drawable_: Gimp.Drawable=None, ratio: float=0.5, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Mix
        
        Do a lerp, linear interpolation (lerp) between input and aux.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * ratio (default: 0.5) - Mixing ratio, read as amount of aux, 0=input
          0.5=half 1.0=aux.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__mono_mixer(self, drawable_: Gimp.Drawable=None, preserve_luminosity: bool=False, red: float=0.333, green: float=0.333, blue: float=0.333, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Mono Mixer
        
        Monochrome channel mixer.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * preserve_luminosity (default: False)
        
        * red (default: 0.333)
        
        * green (default: 0.333)
        
        * blue (default: 0.333)
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__mosaic(self, drawable_: Gimp.Drawable=None, tile_type: str='hexagons', tile_size: float=15.0, tile_height: float=4.0, tile_neatness: float=0.65, color_variation: float=0.2, color_averaging: bool=True, tile_surface: bool=False, tile_allow_split: bool=True, tile_spacing: float=1.0, joints_color: Gegl.Color=None, light_color: Gegl.Color=None, light_dir: float=135.0, antialiasing: bool=True, seed: int=0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Mosaic
        
        Mosaic is a filter which transforms an image into what appears to be
        a mosaic, composed of small primitives, each of constant
        color and of an approximate size.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * tile_type (default: hexagons) - What shape to use for tiles.
        
        * tile_size (default: 15.0) - Average diameter of each tile (in
          pixels).
        
        * tile_height (default: 4.0) - Apparent height of each tile (in
          pixels).
        
        * tile_neatness (default: 0.65) - Deviation from perfectly formed
          tiles.
        
        * color_variation (default: 0.2) - Magnitude of random color
          variations.
        
        * color_averaging (default: True) - Tile color based on average of
          subsumed pixels.
        
        * tile_surface (default: False) - Surface characteristics.
        
        * tile_allow_split (default: True) - Allows splitting tiles at hard
          edges.
        
        * tile_spacing (default: 1.0) - Inter-tile spacing (in pixels).
        
        * joints_color
        
        * light_color
        
        * light_dir (default: 135.0) - Direction of light-source (in degrees).
        
        * antialiasing (default: True) - Enables smoother tile output.
        
        * seed (default: 0)
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__motion_blur_circular(self, drawable_: Gimp.Drawable=None, center_x: float=0.5, center_y: float=0.5, angle: float=5.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Circular Motion Blur
        
        Circular motion blur.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * center_x (default: 0.5)
        
        * center_y (default: 0.5)
        
        * angle (default: 5.0) - Rotation blur angle. A large angle may take
          some time to render.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__motion_blur_linear(self, drawable_: Gimp.Drawable=None, length: float=10.0, angle: float=0.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Linear Motion Blur
        
        Blur pixels in a direction, simulates blurring caused by moving
        camera in a straight line during exposure.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * length (default: 10.0) - Length of blur in pixels.
        
        * angle (default: 0.0) - Angle of blur in degrees.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__motion_blur_zoom(self, drawable_: Gimp.Drawable=None, center_x: float=0.5, center_y: float=0.5, factor: float=0.1, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Zooming Motion Blur
        
        Zoom motion blur.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * center_x (default: 0.5)
        
        * center_y (default: 0.5)
        
        * factor (default: 0.1)
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__multiply(self, drawable_: Gimp.Drawable=None, value: float=1.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Multiply
        
        Math operation multiply, performs the operation per pixel, using
        either the constant provided in 'value' or the corresponding
        pixel from the buffer on aux as operands. The result is the
        evaluation of the expression result = input * value.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * value (default: 1.0) - global value used if aux doesn't contain
          data.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__negation(self, drawable_: Gimp.Drawable=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """negation
        
        Image blending operation 'negation' (<tt>c = 1.0 -
        fabs(1.0-cA-cB)</tt>).
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__negative_darkroom(self, drawable_: Gimp.Drawable=None, curve: str='fujicrystal', exposure: float=0.0, expC: float=60.0, expM: float=60.0, expY: float=60.0, clip: bool=True, boost: float=1.0, contrast: float=1.0, dodge: float=1.0, preflash: bool=False, flashC: float=0.0, flashM: float=0.0, flashY: float=0.0, illum: bool=False, illumX: float=0.965, illumZ: float=0.829, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Negative Darkroom
        
        Simulate a negative film enlargement in an analog darkroom.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * curve (default: fujicrystal) - Hardcoded characteristic curve and
          color data.
        
        * exposure (default: 0.0) - Base enlargement exposure.
        
        * expC (default: 60.0) - Cyan filter compensation for the negative
          image.
        
        * expM (default: 60.0) - Magenta filter compensation for the negative
          image.
        
        * expY (default: 60.0) - Yellow filter compensation for the negative
          image.
        
        * clip (default: True) - Clip base + fog to have a pure white output
          value.
        
        * boost (default: 1.0) - Boost paper density to take advantage of
          increased dynamic range of a monitor compared to a
          photographic paper.
        
        * contrast (default: 1.0) - Increase contrast for papers with fixed
          contrast (usually color papers).
        
        * dodge (default: 1.0) - The f-stop of dodge/burn for pure white/black
          auxiliary input.
        
        * preflash (default: False) - Show preflash controls.
        
        * flashC (default: 0.0) - Preflash the negative with red light to
          reduce contrast of the print.
        
        * flashM (default: 0.0) - Preflash the negative with green light to
          reduce contrast of the print.
        
        * flashY (default: 0.0) - Preflash the negative with blue light to
          reduce contrast of the print.
        
        * illum (default: False) - Show illuminant controls.
        
        * illumX (default: 0.965) - Adjust the X tristimulus value for output.
        
        * illumZ (default: 0.829) - Adjust the Z tristimulus value for output.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__newsprint(self, drawable_: Gimp.Drawable=None, color_model: str='black-on-white', pattern2: str='line', period2: float=12.0, angle2: float=15.0, pattern3: str='line', period3: float=12.0, angle3: float=45.0, pattern4: str='line', period4: float=12.0, angle4: float=0.0, pattern: str='line', period: float=12.0, angle: float=75.0, black_pullout: float=1.0, aa_samples: int=16, turbulence: float=0.0, blocksize: float=-1.0, angleboost: float=0.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Newsprint
        
        Digital halftoning with optional modulations.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * color_model (default: black-on-white) - How many inks to use just
          black, rg, rgb (additive), or cmyk.
        
        * pattern2 (default: line) - Halftoning/dot pattern to use.
        
        * period2 (default: 12.0) - The number of pixels across one repetition
          of a base pattern at base resolution.
        
        * angle2 (default: 15.0)
        
        * pattern3 (default: line) - Halftoning/dot pattern to use.
        
        * period3 (default: 12.0) - The number of pixels across one repetition
          of a base pattern at base resolution.
        
        * angle3 (default: 45.0)
        
        * pattern4 (default: line) - Halftoning/dot pattern to use.
        
        * period4 (default: 12.0) - The number of pixels across one repetition
          of a base pattern at base resolution.
        
        * angle4 (default: 0.0)
        
        * pattern (default: line) - Halftoning/dot pattern to use.
        
        * period (default: 12.0) - The number of pixels across one repetition
          of a base pattern at base resolution.
        
        * angle (default: 75.0) - Angle offset for patterns.
        
        * black_pullout (default: 1.0) - How much of common gray to pull out
          of CMY.
        
        * aa_samples (default: 16) - Number of samples that are averaged for
          antialiasing the result.
        
        * turbulence (default: 0.0) - Color saturation dependent compression
          of period.
        
        * blocksize (default: -1.0) - Number of periods per tile, this tiling
          avoids high frequency anomaly that angle boost causes.
        
        * angleboost (default: 0.0) - Multiplication factor for desired
          rotation of the local space for texture, the way this is
          computed makes it weak for desaturated colors and possibly
          stronger where there is color.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__noise_cie_lch(self, drawable_: Gimp.Drawable=None, holdness: int=2, lightness_distance: float=40.0, chroma_distance: float=40.0, hue_distance: float=3.0, seed: int=0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Add CIE Lch Noise
        
        Randomize lightness, chroma and hue independently.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * holdness (default: 2) - A high value lowers the randomness of the
          noise.
        
        * lightness_distance (default: 40.0)
        
        * chroma_distance (default: 40.0)
        
        * hue_distance (default: 3.0)
        
        * seed (default: 0)
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__noise_hsv(self, drawable_: Gimp.Drawable=None, holdness: int=2, hue_distance: float=3.0, saturation_distance: float=0.04, value_distance: float=0.04, seed: int=0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Add HSV Noise
        
        Randomize hue, saturation and value independently.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * holdness (default: 2) - A high value lowers the randomness of the
          noise.
        
        * hue_distance (default: 3.0)
        
        * saturation_distance (default: 0.04)
        
        * value_distance (default: 0.04)
        
        * seed (default: 0)
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__noise_hurl(self, drawable_: Gimp.Drawable=None, pct_random: float=50.0, repeat: int=1, seed: int=0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Randomly Shuffle Pixels
        
        Completely randomize a fraction of pixels.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * pct_random (default: 50.0)
        
        * repeat (default: 1)
        
        * seed (default: 0)
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__noise_pick(self, drawable_: Gimp.Drawable=None, pct_random: float=50.0, repeat: int=1, seed: int=0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Noise Pick
        
        Randomly interchange some pixels with neighbors.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * pct_random (default: 50.0)
        
        * repeat (default: 1)
        
        * seed (default: 0)
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__noise_reduction(self, drawable_: Gimp.Drawable=None, iterations: int=4, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Noise Reduction
        
        Anisotropic smoothing operation.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * iterations (default: 4) - Controls the number of iterations; lower
          values give less plastic results.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__noise_rgb(self, drawable_: Gimp.Drawable=None, correlated: bool=False, independent: bool=True, linear: bool=True, gaussian: bool=True, red: float=0.2, green: float=0.2, blue: float=0.2, alpha: float=0.0, seed: int=0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Add RGB Noise
        
        Distort colors by random amounts.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * correlated (default: False)
        
        * independent (default: True) - Control amount of noise for each RGB
          channel separately.
        
        * linear (default: True) - Operate on linearized RGB color data.
        
        * gaussian (default: True) - Use a gaussian noise distribution, when
          unticked a linear noise distribution is used instead.
        
        * red (default: 0.2)
        
        * green (default: 0.2)
        
        * blue (default: 0.2)
        
        * alpha (default: 0.0)
        
        * seed (default: 0)
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__noise_slur(self, drawable_: Gimp.Drawable=None, pct_random: float=50.0, repeat: int=1, seed: int=0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Noise Slur
        
        Randomly slide some pixels downward (similar to melting).
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * pct_random (default: 50.0)
        
        * repeat (default: 1)
        
        * seed (default: 0)
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__noise_solid(self, drawable_: Gimp.Drawable=None, x_size: float=4.0, y_size: float=4.0, detail: int=1, tileable: bool=False, turbulent: bool=False, seed: int=0, width: int=1024, height: int=768, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Solid Noise
        
        Create a random cloud-like texture.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * x_size (default: 4.0) - Horizontal texture size.
        
        * y_size (default: 4.0) - Vertical texture size.
        
        * detail (default: 1) - Detail level.
        
        * tileable (default: False) - Create a tileable output.
        
        * turbulent (default: False) - Make a turbulent noise.
        
        * seed (default: 0)
        
        * width (default: 1024) - Width of the generated buffer.
        
        * height (default: 768) - Height of the generated buffer.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__noise_spread(self, drawable_: Gimp.Drawable=None, amount_x: int=5, amount_y: int=5, seed: int=0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Noise Spread
        
        Move pixels around randomly.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * amount_x (default: 5) - Horizontal spread amount.
        
        * amount_y (default: 5) - Vertical spread amount.
        
        * seed (default: 0)
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__nop(self, drawable_: Gimp.Drawable=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """No Operation
        
        No operation (can be used as a routing point).
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__normal_map(self, drawable_: Gimp.Drawable=None, scale: float=10.0, x_component: str='red', y_component: str='green', flip_x: bool=False, flip_y: bool=False, full_z: bool=False, tileable: bool=False, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Normal Map
        
        Generate a normal map from a height map.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * scale (default: 10.0) - The amount by which to scale the height
          values.
        
        * x_component (default: red) - The component used for the X
          coordinates.
        
        * y_component (default: green) - The component used for the Y
          coordinates.
        
        * flip_x (default: False) - Flip the X coordinates.
        
        * flip_y (default: False) - Flip the Y coordinates.
        
        * full_z (default: False) - Use the full [0,1] range to encode the Z
          coordinates.
        
        * tileable (default: False) - Generate a tileable map.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__npd(self, drawable_: Gimp.Drawable=None, model: GObject.Value=None, square_size: int=20, rigidity: int=100, asap_deformation: bool=False, mls_weights: bool=False, mls_weights_alpha: float=1.0, preserve_model: bool=False, sampler_type: str='cubic', blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """
        
        Performs n-point image deformation.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * model - Model - basic element we operate on.
        
        * square_size (default: 20) - Size of an edge of square the mesh
          consists of.
        
        * rigidity (default: 100) - The number of deformation iterations.
        
        * asap_deformation (default: False) - ASAP deformation is performed
          when TRUE, ARAP deformation otherwise.
        
        * mls_weights (default: False) - Use MLS weights.
        
        * mls_weights_alpha (default: 1.0) - Alpha parameter of MLS weights.
        
        * preserve_model (default: False) - When TRUE the model will not be
          freed.
        
        * sampler_type (default: cubic) - Sampler used internally.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__npy_save(self, drawable_: Gimp.Drawable=None, path: str='', blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """NumPy File Saver
        
        NumPy (Numerical Python) image saver.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * path (default: ) - Target path and filename, use '-' for stdout.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__oilify(self, drawable_: Gimp.Drawable=None, mask_radius: int=4, exponent: int=8, intensities: int=128, use_inten: bool=True, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Oilify
        
        Emulate an oil painting.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * mask_radius (default: 4) - Radius of circle around pixel, can also
          be scaled per pixel by a buffer on the aux pad.
        
        * exponent (default: 8) - Exponent for processing; controls smoothness
          - can be scaled per pixel with a buffer on the aux2 pad.
        
        * intensities (default: 128) - Histogram size.
        
        * use_inten (default: True) - Use pixel luminance values.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__opacity(self, drawable_: Gimp.Drawable=None, value: float=1.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Opacity
        
        Weights the opacity of the input both the value of the aux input and
        the global value property.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * value (default: 1.0) - Global opacity value that is always used on
          top of the optional auxiliary input buffer.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__open_buffer(self, drawable_: Gimp.Drawable=None, path: str='', blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Open GEGL Buffer
        
        Use an on-disk GeglBuffer as data source.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * path (default: ) - a GeglBuffer on disk to open.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__pack(self, drawable_: Gimp.Drawable=None, gap: float=0.0, align: float=0.0, orientation: str='horizontal', blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Pack
        
        Packs an image horizontally or vertically next to each other with
        optional gap, aux right of input.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * gap (default: 0.0) - How many pixels of space between items.
        
        * align (default: 0.0) - How to align items, 0.0 is start 0.5 middle
          and 1.0 end.
        
        * orientation (default: horizontal)
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__paint_select(self, drawable_: Gimp.Drawable=None, mode: str='add', use_local_region: bool=False, region_x: int=0, region_y: int=0, region_width: int=0, region_height: int=0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Paint Select
        
        
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * mode (default: add) - Either to add to or subtract from the mask.
        
        * use_local_region (default: False) - Perform graphcut in a local
          region.
        
        * region_x (default: 0)
        
        * region_y (default: 0)
        
        * region_width (default: 0)
        
        * region_height (default: 0)
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__panorama_projection(self, drawable_: Gimp.Drawable=None, pan: float=0.0, tilt: float=0.0, spin: float=0.0, zoom: float=100.0, width: int=-1, height: int=-1, inverse: bool=False, sampler_type: str='nearest', blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Panorama Projection
        
        Do panorama viewer rendering mapping or its inverse for an
        equirectangular input image. (2:1 ratio containing 360x180
        degree panorama).
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * pan (default: 0.0) - Horizontal camera panning.
        
        * tilt (default: 0.0) - Vertical camera panning.
        
        * spin (default: 0.0) - Spin angle around camera axis.
        
        * zoom (default: 100.0) - Zoom level.
        
        * width (default: -1) - output/rendering width in pixels, -1 for input
          width.
        
        * height (default: -1) - output/rendering height in pixels, -1 for
          input height.
        
        * inverse (default: False) - Do the inverse mapping, useful for
          touching up zenith, nadir or other parts of panorama.
        
        * sampler_type (default: nearest) - Image resampling method to use,
          for good results with double resampling when retouching
          panoramas, use nearest to generate the view and cubic or
          better for the inverse transform back to panorama.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__path(self, drawable_: Gimp.Drawable=None, fill: Gegl.Color=None, stroke: Gegl.Color=None, stroke_width: float=2.0, stroke_opacity: float=1.0, stroke_hardness: float=0.6, fill_rule: str='nonzero', transform: str='', fill_opacity: float=1.0, d: Gegl.Path=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Render Path
        
        Renders a brush stroke.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * fill - Color of paint to use for filling, use 0 opacity to disable
          filling.
        
        * stroke - Color of paint to use for stroking.
        
        * stroke_width (default: 2.0) - The width of the brush used to stroke
          the path.
        
        * stroke_opacity (default: 1.0) - Opacity of stroke, note, does not
          behave like SVG since at the moment stroking is done using
          an airbrush tool.
        
        * stroke_hardness (default: 0.6) - Hardness of the brush, 0.0 for a
          soft brush, 1.0 for a hard brush.
        
        * fill_rule (default: nonzero) - How to determine what to fill
          (nonzero|evenodd).
        
        * transform (default: ) - SVG style description of transform.
        
        * fill_opacity (default: 1.0) - The fill opacity to use.
        
        * d - A GeglVector representing the path of the stroke.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__pdf_load(self, drawable_: Gimp.Drawable=None, path: str='', uri: str='', page: int=1, pages: int=1, ppi: float=200.0, password: str='', blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """pdf loader
        
        PDF page decoder.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * path (default: ) - file to load.
        
        * uri (default: ) - uri of file to load.
        
        * page (default: 1) - Page to render.
        
        * pages (default: 1) - Total pages, provided as a visual read-only
          property.
        
        * ppi (default: 200.0) - Point/pixels per inch.
        
        * password (default: ) - Password to use for decryption of PDF, or
          blank for none.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__perlin_noise(self, drawable_: Gimp.Drawable=None, alpha: float=1.2, scale: float=1.8, zoff: float=-1.0, n: int=3, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Perlin Noise
        
        Perlin noise generator.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * alpha (default: 1.2)
        
        * scale (default: 1.8)
        
        * zoff (default: -1.0)
        
        * n (default: 3)
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__photocopy(self, drawable_: Gimp.Drawable=None, mask_radius: float=10.0, sharpness: float=0.5, black: float=0.2, white: float=0.2, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Photocopy
        
        Simulate color distortion produced by a copy machine.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * mask_radius (default: 10.0)
        
        * sharpness (default: 0.5)
        
        * black (default: 0.2)
        
        * white (default: 0.2)
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__piecewise_blend(self, drawable_: Gimp.Drawable=None, levels: int=0, gamma: float=1.0, linear_mask: bool=True, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Piecewise Blend
        
        Blend a chain of inputs using a mask.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * levels (default: 0) - Number of blend levels.
        
        * gamma (default: 1.0) - Gamma factor for blend-level spacing.
        
        * linear_mask (default: True) - Use linear mask values.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__pixbuf(self, drawable_: Gimp.Drawable=None, pixbuf: gi.overrides.GdkPixbuf.Pixbuf=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """GdkPixbuf Source
        
        Uses the GdkPixbuf located at the memory location in <em>pixbuf</em>.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * pixbuf - GdkPixbuf to use.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__pixelize(self, drawable_: Gimp.Drawable=None, norm: str='square', size_x: int=16, size_y: int=16, offset_x: int=0, offset_y: int=0, ratio_x: float=1.0, ratio_y: float=1.0, background: Gegl.Color=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Pixelize
        
        Simplify image into an array of solid-colored rectangles.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * norm (default: square) - The shape of pixels.
        
        * size_x (default: 16) - Width of blocks in pixels.
        
        * size_y (default: 16) - Height of blocks in pixels.
        
        * offset_x (default: 0) - Horizontal offset of blocks in pixels.
        
        * offset_y (default: 0) - Vertical offset of blocks in pixels.
        
        * ratio_x (default: 1.0) - Horizontal size ratio of a pixel inside
          each block.
        
        * ratio_y (default: 1.0) - Vertical size ratio of a pixel inside each
          block.
        
        * background - Color used to fill the background.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__plasma(self, drawable_: Gimp.Drawable=None, turbulence: float=1.0, x: int=0, y: int=0, width: int=1024, height: int=768, seed: int=0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Plasma
        
        Creates an image filled with a plasma effect.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * turbulence (default: 1.0) - High values give more variation in
          details.
        
        * x (default: 0) - X start of the generated buffer.
        
        * y (default: 0) - Y start of the generated buffer.
        
        * width (default: 1024) - Width of the generated buffer.
        
        * height (default: 768) - Height of the generated buffer.
        
        * seed (default: 0)
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__png_load(self, drawable_: Gimp.Drawable=None, path: str='', uri: str='', metadata: Gegl.Metadata=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """PNG File Loader
        
        PNG image loader.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * path (default: ) - Path of file to load.
        
        * uri (default: ) - URI for file to load.
        
        * metadata - Object to supply image metadata.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__png_save(self, drawable_: Gimp.Drawable=None, path: str='', compression: int=3, bitdepth: int=16, metadata: Gegl.Metadata=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """PNG File Saver
        
        PNG image saver, using libpng.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * path (default: ) - Target path and filename, use '-' for stdout.
        
        * compression (default: 3) - PNG compression level from 1 to 9.
        
        * bitdepth (default: 16) - 8 and 16 are the currently accepted values.
        
        * metadata - Object to supply image metadata.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__polar_coordinates(self, drawable_: Gimp.Drawable=None, depth: float=100.0, angle: float=0.0, bw: bool=False, top: bool=True, polar: bool=True, pole_x: int=0, pole_y: int=0, middle: bool=True, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Polar Coordinates
        
        Convert image to or from polar coordinates.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * depth (default: 100.0)
        
        * angle (default: 0.0)
        
        * bw (default: False) - Start from the right instead of the left.
        
        * top (default: True) - Put the top row in the middle and the bottom
          row on the outside.
        
        * polar (default: True) - Map the image to a circle.
        
        * pole_x (default: 0) - Origin point for the polar coordinates.
        
        * pole_y (default: 0) - Origin point for the polar coordinates.
        
        * middle (default: True) - Let origin point to be the middle one.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__posterize(self, drawable_: Gimp.Drawable=None, levels: int=8, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Posterize
        
        Reduces the number of levels in each color component of the image.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * levels (default: 8) - number of levels per component.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__ppm_load(self, drawable_: Gimp.Drawable=None, path: str='', uri: str='', blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """PPM File Loader
        
        PPM image loader.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * path (default: ) - Path of file to load.
        
        * uri (default: ) - URI of image to load.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__ppm_save(self, drawable_: Gimp.Drawable=None, path: str='', rawformat: bool=True, bitdepth: int=16, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """PPM File Saver
        
        PPM image saver (Portable pixmap saver.).
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * path (default: ) - Target path and filename, use '-' for stdout.
        
        * rawformat (default: True)
        
        * bitdepth (default: 16) - 8 and 16 are the currently accepted values.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__radial_gradient(self, drawable_: Gimp.Drawable=None, start_x: float=25.0, start_y: float=25.0, end_x: float=50.0, end_y: float=50.0, start_color: Gegl.Color=None, end_color: Gegl.Color=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Radial Gradient
        
        Radial gradient renderer.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * start_x (default: 25.0)
        
        * start_y (default: 25.0)
        
        * end_x (default: 50.0)
        
        * end_y (default: 50.0)
        
        * start_color - The color at (x1, y1).
        
        * end_color - The color at (x2, y2).
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__rawbayer_load(self, drawable_: Gimp.Drawable=None, path: str='/tmp/test.raw', blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """
        
        Raw image loader, wrapping dcraw with pipes, provides the raw bayer
        grid as grayscale, if the fileformat is .rawbayer it will use
        this loader instead of the normal dcraw loader, if the
        fileformat is .rawbayerS it will swap the returned 16bit
        numbers (the pnm loader is apparently buggy).
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * path (default: /tmp/test.raw) - Path of file to load.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__rectangle(self, drawable_: Gimp.Drawable=None, x: float=42.0, y: float=42.0, width: float=23.0, height: float=42.0, color: Gegl.Color=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Rectangle
        
        A rectangular source of a fixed size with a solid color.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * x (default: 42.0) - Horizontal position.
        
        * y (default: 42.0) - Vertical position.
        
        * width (default: 23.0) - Horizontal extent.
        
        * height (default: 42.0) - Vertical extent.
        
        * color - Color to render.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__recursive_transform(self, drawable_: Gimp.Drawable=None, transform: str='matrix (1, 0, 0, 0, 1, 0, 0, 0, 1)', first_iteration: int=0, iterations: int=3, fade_color: Gegl.Color=None, fade_opacity: float=1.0, paste_below: bool=False, sampler_type: str='linear', blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Recursive Transform
        
        Apply a transformation recursively.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * transform (default: matrix (1, 0, 0, 0, 1, 0, 0, 0, 1)) -
          Transformation matrix, using SVG syntax (or multiple
          matrices, separated by semicolons).
        
        * first_iteration (default: 0) - First iteration.
        
        * iterations (default: 3) - Number of iterations.
        
        * fade_color - Color to fade transformed images towards, with a rate
          depending on its alpha.
        
        * fade_opacity (default: 1.0) - Amount by which to scale the opacity
          of each transformed image.
        
        * paste_below (default: False) - Paste transformed images below each
          other.
        
        * sampler_type (default: linear) - Mathematical method for
          reconstructing pixel values.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__red_eye_removal(self, drawable_: Gimp.Drawable=None, threshold: float=0.4, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Red Eye Removal
        
        Remove the red eye effect caused by camera flashes.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * threshold (default: 0.4) - Red eye threshold.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__reflect(self, drawable_: Gimp.Drawable=None, origin_x: float=0.0, origin_y: float=0.0, near_z: float=0.0, sampler: Gegl.SamplerType=Gegl.SamplerType.LINEAR, x: float=0.0, y: float=0.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Reflect
        
        Reflect an image about a line, whose direction is specified by the
        vector that is defined by the x and y properties.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * origin_x (default: 0.0) - X coordinate of origin.
        
        * origin_y (default: 0.0) - Y coordinate of origin.
        
        * near_z (default: 0.0) - Z coordinate of the near clipping plane.
        
        * sampler (default: Gegl.SamplerType.LINEAR) - Sampler used
          internally.
        
        * x (default: 0.0) - Direction vector's X component.
        
        * y (default: 0.0) - Direction vector's Y component.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__reinhard05(self, drawable_: Gimp.Drawable=None, brightness: float=0.0, chromatic: float=0.0, light: float=1.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Reinhard 2005 Tone Mapping
        
        Adapt an image, which may have a high dynamic range, for presentation
        using a low dynamic range. This is an efficient global
        operator derived from simple physiological observations,
        producing luminance within the range 0.0-1.0.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * brightness (default: 0.0) - Overall brightness of the image.
        
        * chromatic (default: 0.0) - Adaptation to color variation across the
          image.
        
        * light (default: 1.0) - Adaptation to light variation across the
          image.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__remap(self, drawable_: Gimp.Drawable=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Remap
        
        Stretch components of pixels individually based on luminance
        envelopes.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__reset_origin(self, drawable_: Gimp.Drawable=None, origin_x: float=0.0, origin_y: float=0.0, near_z: float=0.0, sampler: Gegl.SamplerType=Gegl.SamplerType.LINEAR, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Reset origin
        
        Translate top-left to 0,0.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * origin_x (default: 0.0) - X coordinate of origin.
        
        * origin_y (default: 0.0) - Y coordinate of origin.
        
        * near_z (default: 0.0) - Z coordinate of the near clipping plane.
        
        * sampler (default: Gegl.SamplerType.LINEAR) - Sampler used
          internally.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__rgb_clip(self, drawable_: Gimp.Drawable=None, clip_low: bool=True, low_limit: float=0.0, clip_high: bool=True, high_limit: float=1.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Clip RGB
        
        Keep RGB pixels values inside a specific range.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * clip_low (default: True) - Clip low pixel values.
        
        * low_limit (default: 0.0) - Pixels values lower than this limit will
          be set to it.
        
        * clip_high (default: True) - Clip high pixel values.
        
        * high_limit (default: 1.0) - Pixels values higher than this limit
          will be set to it.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__rgbe_load(self, drawable_: Gimp.Drawable=None, path: str='', blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """RGBE File Loader
        
        RGBE image loader (Radiance HDR format).
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * path (default: ) - Path of file to load.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__rgbe_save(self, drawable_: Gimp.Drawable=None, path: str='', blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """RGBE File Saver
        
        RGBE image saver (Radiance HDR format).
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * path (default: ) - Target path and filename, use '-' for stdout.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__ripple(self, drawable_: Gimp.Drawable=None, amplitude: float=25.0, period: float=200.0, phi: float=0.0, angle: float=0.0, sampler_type: str='cubic', wave_type: str='sine', abyss_policy: str='none', tileable: bool=False, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Ripple
        
        Displace pixels in a ripple pattern.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * amplitude (default: 25.0)
        
        * period (default: 200.0)
        
        * phi (default: 0.0)
        
        * angle (default: 0.0)
        
        * sampler_type (default: cubic)
        
        * wave_type (default: sine)
        
        * abyss_policy (default: none) - How image edges are handled.
        
        * tileable (default: False) - Retain tilebility.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__rotate(self, drawable_: Gimp.Drawable=None, origin_x: float=0.0, origin_y: float=0.0, near_z: float=0.0, sampler: Gegl.SamplerType=Gegl.SamplerType.LINEAR, degrees: float=0.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Rotate
        
        Rotate the buffer around the specified origin.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * origin_x (default: 0.0) - X coordinate of origin.
        
        * origin_y (default: 0.0) - Y coordinate of origin.
        
        * near_z (default: 0.0) - Z coordinate of the near clipping plane.
        
        * sampler (default: Gegl.SamplerType.LINEAR) - Sampler used
          internally.
        
        * degrees (default: 0.0) - Angle to rotate (counter-clockwise).
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__rotate_on_center(self, drawable_: Gimp.Drawable=None, near_z: float=0.0, sampler: Gegl.SamplerType=Gegl.SamplerType.LINEAR, degrees: float=0.0, origin_x: float=0.0, origin_y: float=0.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Rotate on center
        
        Rotate the buffer around its center, taking care of possible offsets.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * near_z (default: 0.0) - Z coordinate of the near clipping plane.
        
        * sampler (default: Gegl.SamplerType.LINEAR) - Sampler used
          internally.
        
        * degrees (default: 0.0) - Angle to rotate (counter-clockwise).
        
        * origin_x (default: 0.0) - Ignored. Always uses center of input
          buffer.
        
        * origin_y (default: 0.0) - Ignored. Always uses center of input
          buffer.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__saturation(self, drawable_: Gimp.Drawable=None, scale: float=1.0, colorspace: str='Native', blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Saturation
        
        Changes the saturation.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * scale (default: 1.0) - Scale, strength of effect.
        
        * colorspace (default: Native)
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__save(self, drawable_: Gimp.Drawable=None, path: str='', metadata: Gegl.Metadata=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Save
        
        Multipurpose file saver, that uses other native save handlers
        depending on extension, use the format specific save ops to
        specify additional parameters.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * path (default: ) - Path of file to save.
        
        * metadata - Object providing image metadata.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__save_pixbuf(self, drawable_: Gimp.Drawable=None, pixbuf: gi.overrides.GdkPixbuf.Pixbuf=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Store in GdkPixbuf
        
        Store image in a GdkPixbuf.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * pixbuf - The output pixbuf produced by process is stored in this
          property.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__scale_ratio(self, drawable_: Gimp.Drawable=None, origin_x: float=0.0, origin_y: float=0.0, near_z: float=0.0, sampler: Gegl.SamplerType=Gegl.SamplerType.LINEAR, abyss_policy: Gegl.AbyssPolicy=Gegl.AbyssPolicy.NONE, x: float=0.0, y: float=0.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Scale ratio
        
        Scales the buffer according to a ratio.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * origin_x (default: 0.0) - X coordinate of origin.
        
        * origin_y (default: 0.0) - Y coordinate of origin.
        
        * near_z (default: 0.0) - Z coordinate of the near clipping plane.
        
        * sampler (default: Gegl.SamplerType.LINEAR) - Sampler used
          internally.
        
        * abyss_policy (default: Gegl.AbyssPolicy.NONE) - How image edges are
          handled.
        
        * x (default: 0.0) - Horizontal scale factor.
        
        * y (default: 0.0) - Vertical scale factor.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__scale_size(self, drawable_: Gimp.Drawable=None, origin_x: float=0.0, origin_y: float=0.0, near_z: float=0.0, sampler: Gegl.SamplerType=Gegl.SamplerType.LINEAR, abyss_policy: Gegl.AbyssPolicy=Gegl.AbyssPolicy.NONE, x: float=100.0, y: float=100.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Scale size
        
        Scales the buffer according to a size.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * origin_x (default: 0.0) - X coordinate of origin.
        
        * origin_y (default: 0.0) - Y coordinate of origin.
        
        * near_z (default: 0.0) - Z coordinate of the near clipping plane.
        
        * sampler (default: Gegl.SamplerType.LINEAR) - Sampler used
          internally.
        
        * abyss_policy (default: Gegl.AbyssPolicy.NONE) - How image edges are
          handled.
        
        * x (default: 100.0) - Horizontal size.
        
        * y (default: 100.0) - Vertical size.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__scale_size_keepaspect(self, drawable_: Gimp.Drawable=None, origin_x: float=0.0, origin_y: float=0.0, near_z: float=0.0, sampler: Gegl.SamplerType=Gegl.SamplerType.LINEAR, abyss_policy: Gegl.AbyssPolicy=Gegl.AbyssPolicy.NONE, x: float=-1.0, y: float=-1.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Scale size keep aspect
        
        Scales the buffer to a size, preserving aspect ratio.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * origin_x (default: 0.0) - X coordinate of origin.
        
        * origin_y (default: 0.0) - Y coordinate of origin.
        
        * near_z (default: 0.0) - Z coordinate of the near clipping plane.
        
        * sampler (default: Gegl.SamplerType.LINEAR) - Sampler used
          internally.
        
        * abyss_policy (default: Gegl.AbyssPolicy.NONE) - How image edges are
          handled.
        
        * x (default: -1.0) - Horizontal size.
        
        * y (default: -1.0) - Vertical size.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__seamless_clone(self, drawable_: Gimp.Drawable=None, max_refine_scale: int=5, xoff: int=0, yoff: int=0, error_msg: str='', blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """
        
        Seamless cloning operation.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * max_refine_scale (default: 5) - Maximal scale of refinement points
          to be used for the interpolation mesh.
        
        * xoff (default: 0) - How much horizontal offset should applied to the
          paste.
        
        * yoff (default: 0) - How much horizontal offset should applied to the
          paste.
        
        * error_msg (default: ) - An error message in case of a failure.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__seamless_clone_compose(self, drawable_: Gimp.Drawable=None, max_refine_scale: int=2000, xoff: int=0, yoff: int=0, error_msg: str='', blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """
        
        Seamless cloning composite operation.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * max_refine_scale (default: 2000) - Maximal amount of refinement
          points to be used for the interpolation mesh.
        
        * xoff (default: 0) - How much horizontal offset should applied to the
          paste.
        
        * yoff (default: 0) - How much vertical offset should applied to the
          paste.
        
        * error_msg (default: ) - An error message in case of a failure.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__segment_kmeans(self, drawable_: Gimp.Drawable=None, n_clusters: int=5, max_iterations: int=5, seed: int=0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """K-means Segmentation
        
        Segment colors using K-means clustering.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * n_clusters (default: 5) - Number of clusters.
        
        * max_iterations (default: 5) - Maximum number of iterations.
        
        * seed (default: 0)
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__selective_hue_saturation(self, drawable_: Gimp.Drawable=None, hue_sel_center: float=180.0, hue_sel_width: float=50.0, hue: float=0.0, saturation: float=0.0, lightness: float=0.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Selective Hue-Saturation
        
        Selective adjust Hue, Saturation and Lightness.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * hue_sel_center (default: 180.0) - Center of Hue selection interval
          .
        
        * hue_sel_width (default: 50.0) - Width of Hue selection interval  .
        
        * hue (default: 0.0) - Hue adjustment.
        
        * saturation (default: 0.0) - Saturation adjustment.
        
        * lightness (default: 0.0) - Lightness adjustment.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__sepia(self, drawable_: Gimp.Drawable=None, scale: float=1.0, srgb: bool=True, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Sepia
        
        Apply a sepia tone to the input image.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * scale (default: 1.0) - Strength of the sepia effect.
        
        * srgb (default: True) - Use sRGB gamma instead of linear.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__shadows_highlights(self, drawable_: Gimp.Drawable=None, shadows: float=0.0, highlights: float=0.0, whitepoint: float=0.0, radius: float=100.0, compress: float=50.0, shadows_ccorrect: float=100.0, highlights_ccorrect: float=50.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Shadows-Highlights
        
        Perform shadows and highlights correction.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * shadows (default: 0.0) - Adjust exposure of shadows.
        
        * highlights (default: 0.0) - Adjust exposure of highlights.
        
        * whitepoint (default: 0.0) - Shift white point.
        
        * radius (default: 100.0) - Spatial extent.
        
        * compress (default: 50.0) - Compress the effect on shadows/highlights
          and preserve midtones.
        
        * shadows_ccorrect (default: 100.0) - Adjust saturation of shadows.
        
        * highlights_ccorrect (default: 50.0) - Adjust saturation of
          highlights.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__shadows_highlights_correction(self, drawable_: Gimp.Drawable=None, shadows: float=0.0, highlights: float=0.0, whitepoint: float=0.0, compress: float=50.0, shadows_ccorrect: float=100.0, highlights_ccorrect: float=50.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """
        
        Lighten shadows and darken highlights.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * shadows (default: 0.0) - Adjust exposure of shadows.
        
        * highlights (default: 0.0) - Adjust exposure of highlights.
        
        * whitepoint (default: 0.0) - Shift white point.
        
        * compress (default: 50.0) - Compress the effect on shadows/highlights
          and preserve midtones.
        
        * shadows_ccorrect (default: 100.0) - Adjust saturation of shadows.
        
        * highlights_ccorrect (default: 50.0) - Adjust saturation of
          highlights.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__shear(self, drawable_: Gimp.Drawable=None, origin_x: float=0.0, origin_y: float=0.0, near_z: float=0.0, sampler: Gegl.SamplerType=Gegl.SamplerType.LINEAR, x: float=0.0, y: float=0.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Shear
        
        Shears the buffer.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * origin_x (default: 0.0) - X coordinate of origin.
        
        * origin_y (default: 0.0) - Y coordinate of origin.
        
        * near_z (default: 0.0) - Z coordinate of the near clipping plane.
        
        * sampler (default: Gegl.SamplerType.LINEAR) - Sampler used
          internally.
        
        * x (default: 0.0) - Horizontal shear amount.
        
        * y (default: 0.0) - Vertical shear amount.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__shift(self, drawable_: Gimp.Drawable=None, shift: int=5, direction: str='horizontal', seed: int=0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Shift
        
        Shift each row or column of pixels by a random amount.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * shift (default: 5) - Maximum amount to shift.
        
        * direction (default: horizontal)
        
        * seed (default: 0)
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__shuffle_search(self, drawable_: Gimp.Drawable=None, iterations: int=3, chance: int=100, phase: int=0, levels: int=3, center_bias: int=18, seed: int=0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Optimize Dither
        
        Shuffles pixels, and quantization with neighbors to optimize dither,
        by shuffling neighboring pixels.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * iterations (default: 3) - How many times to run optimization.
        
        * chance (default: 100) - Chance of doing optimization.
        
        * phase (default: 0)
        
        * levels (default: 3) - Only used if no aux image is provided.
        
        * center_bias (default: 18)
        
        * seed (default: 0)
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__simplex_noise(self, drawable_: Gimp.Drawable=None, scale: float=1.0, iterations: int=1, seed: int=0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Simplex Noise
        
        Generates a solid noise texture.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * scale (default: 1.0) - The scale of the noise function.
        
        * iterations (default: 1) - The number of noise octaves.
        
        * seed (default: 0) - The random seed for the noise function.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__sinus(self, drawable_: Gimp.Drawable=None, x_scale: float=15.0, y_scale: float=15.0, complexity: float=1.0, seed: int=0, tiling: bool=True, perturbation: bool=True, color1: Gegl.Color=None, color2: Gegl.Color=None, blend_mode: str='sinusoidal', blend_power: float=0.0, width: int=1024, height: int=768, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Sinus
        
        Generate complex sinusoidal textures.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * x_scale (default: 15.0) - Scale value for x axis.
        
        * y_scale (default: 15.0) - Scale value for y axis.
        
        * complexity (default: 1.0) - Complexity factor.
        
        * seed (default: 0)
        
        * tiling (default: True) - If set, the pattern generated will tile.
        
        * perturbation (default: True) - If set, the pattern will be a little
          more distorted.
        
        * color1
        
        * color2
        
        * blend_mode (default: sinusoidal)
        
        * blend_power (default: 0.0) - Power used to stretch the blend.
        
        * width (default: 1024) - Width of the generated buffer.
        
        * height (default: 768) - Height of the generated buffer.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__slic(self, drawable_: Gimp.Drawable=None, cluster_size: int=32, compactness: int=20, iterations: int=1, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Simple Linear Iterative Clustering
        
        Superpixels based on k-means clustering.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * cluster_size (default: 32) - Size of a region side.
        
        * compactness (default: 20) - Cluster size.
        
        * iterations (default: 1) - Number of iterations.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__snn_mean(self, drawable_: Gimp.Drawable=None, radius: int=8, pairs: int=2, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Symmetric Nearest Neighbor
        
        Noise reducing edge preserving blur filter based on Symmetric Nearest
        Neighbors.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * radius (default: 8) - Radius of square pixel region, (width and
          height will be radius*2+1).
        
        * pairs (default: 2) - Number of pairs; higher number preserves more
          acute features.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__soft_burn(self, drawable_: Gimp.Drawable=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """soft-burn
        
        Image blending operation 'soft-burn' (<tt>c = (cA+cB<1.0)?0.5*cB /
        (1.0 - cA):1.0-0.5*(1.0 - cA) / cB</tt>).
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__soft_dodge(self, drawable_: Gimp.Drawable=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """soft-dodge
        
        Image blending operation 'soft-dodge' (<tt>c = (cA+cB<1.0)?0.5*cA /
        (1.0 - cB):1.0-0.5*(1.0 - cB)/cA</tt>).
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__soft_light(self, drawable_: Gimp.Drawable=None, srgb: bool=False, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Soft-light
        
        SVG blend operation soft-light (<code>if 2 * cA < aA: d = cB * (aA -
        (aB == 0 ? 1 : 1 - cB / aB) * (2 * cA - aA)) + cA * (1 - aB)
        + cB * (1 - aA); if 8 * cB <= aB: d = cB * (aA - (aB == 0 ? 1
        : 1 - cB / aB) * (2 * cA - aA) * (aB == 0 ? 3 : 3 - 8 * cB /
        aB)) + cA * (1 - aB) + cB * (1 - aA); otherwise: d = (aA * cB
        + (aB == 0 ? 0 : sqrt (cB / aB) * aB - cB) * (2 * cA - aA)) +
        cA * (1 - aB) + cB * (1 - aA)</code>).
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * srgb (default: False) - Use sRGB gamma instead of linear.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__softglow(self, drawable_: Gimp.Drawable=None, glow_radius: float=10.0, brightness: float=0.3, sharpness: float=0.85, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Softglow
        
        Simulate glow by making highlights intense and fuzzy.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * glow_radius (default: 10.0)
        
        * brightness (default: 0.3)
        
        * sharpness (default: 0.85)
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__spherize(self, drawable_: Gimp.Drawable=None, mode: str='radial', angle_of_view: float=0.0, curvature: float=1.0, amount: float=1.0, sampler_type: str='linear', blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Spherize
        
        Wrap image around a spherical cap.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * mode (default: radial) - Displacement mode.
        
        * angle_of_view (default: 0.0) - Camera angle of view.
        
        * curvature (default: 1.0) - Spherical cap apex angle, as a fraction
          of the co-angle of view.
        
        * amount (default: 1.0) - Displacement scaling factor (negative values
          refer to the inverse displacement).
        
        * sampler_type (default: linear) - Mathematical method for
          reconstructing pixel values.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__spiral(self, drawable_: Gimp.Drawable=None, type: str='linear', x: float=0.5, y: float=0.5, radius: float=100.0, base: float=2.0, balance: float=0.0, rotation: float=0.0, direction: str='cw', color1: Gegl.Color=None, color2: Gegl.Color=None, width: int=1024, height: int=768, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Spiral
        
        Spiral renderer.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * type (default: linear) - Spiral type.
        
        * x (default: 0.5) - Spiral origin X coordinate.
        
        * y (default: 0.5) - Spiral origin Y coordinate.
        
        * radius (default: 100.0) - Spiral radius.
        
        * base (default: 2.0) - Logarithmic spiral base.
        
        * balance (default: 0.0) - Area balance between the two colors.
        
        * rotation (default: 0.0) - Spiral rotation.
        
        * direction (default: cw) - Spiral swirl direction.
        
        * color1
        
        * color2
        
        * width (default: 1024) - Width of the generated buffer.
        
        * height (default: 768) - Height of the generated buffer.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__stereographic_projection(self, drawable_: Gimp.Drawable=None, pan: float=0.0, tilt: float=90.0, spin: float=0.0, zoom: float=100.0, width: int=-1, height: int=-1, inverse: bool=False, sampler_type: str='nearest', blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Little Planet
        
        Do a stereographic/little planet transform of an equirectangular
        image.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * pan (default: 0.0) - Horizontal camera panning.
        
        * tilt (default: 90.0) - Vertical camera panning.
        
        * spin (default: 0.0) - Spin angle around camera axis.
        
        * zoom (default: 100.0) - Zoom level.
        
        * width (default: -1) - output/rendering width in pixels, -1 for input
          width.
        
        * height (default: -1) - output/rendering height in pixels, -1 for
          input height.
        
        * inverse (default: False) - Do the inverse mapping, useful for
          touching up zenith, nadir or other parts of panorama.
        
        * sampler_type (default: nearest) - Image resampling method to use,
          for good results with double resampling when retouching
          panoramas, use nearest to generate the view and cubic or
          better for the inverse transform back to panorama.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__stress(self, drawable_: Gimp.Drawable=None, radius: int=300, samples: int=5, iterations: int=5, enhance_shadows: bool=False, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Spatio Temporal Retinex-like Envelope with Stochastic Sampling
        
        Spatio Temporal Retinex-like Envelope with Stochastic Sampling.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * radius (default: 300) - Neighborhood taken into account, for
          enhancement ideal values are close to the longest side of
          the image, increasing this increases the runtime.
        
        * samples (default: 5) - Number of samples to do per iteration looking
          for the range of colors.
        
        * iterations (default: 5) - Number of iterations, a higher number of
          iterations provides a less noisy rendering at a
          computational cost.
        
        * enhance_shadows (default: False) - When enabled also enhances shadow
          regions - when disabled a more natural result is yielded.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__stretch_contrast(self, drawable_: Gimp.Drawable=None, keep_colors: bool=True, perceptual: bool=False, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Stretch Contrast
        
        Scales the components of the buffer to be in the 0.0-1.0 range. This
        improves images that make poor use of the available contrast
        (little contrast, very dark, or very bright images).
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * keep_colors (default: True) - Impact each channel with the same
          amount.
        
        * perceptual (default: False) - When set operate on gamma corrected
          values instead of linear RGB - acting like the old normalize
          filter in GIMP.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__stretch_contrast_hsv(self, drawable_: Gimp.Drawable=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Stretch Contrast HSV
        
        Scales the components of the buffer to be in the 0.0-1.0 range. This
        improves images that make poor use of the available contrast
        (little contrast, very dark, or very bright images). This
        version differs from Contrast Autostretch in that it works in
        HSV space, and preserves hue.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__styles(self, drawable_: Gimp.Drawable=None, guichange: str='outlineshadow', color_fill: Gegl.Color=None, color_policy: str='multiply', enableoutline: bool=False, outline_opacity: float=1.0, outline_x: float=0.0, outline_y: float=0.0, outline_grow_shape: str='circle', outline_blur: float=0.0, outline: float=12.0, outline_color: Gegl.Color=None, shadow_opacity: float=0.0, shadow_x: float=10.0, shadow_y: float=10.0, shadow_color: Gegl.Color=None, shadow_grow_radius: float=0.0, shadow_radius: float=12.0, enablebevel: bool=False, bevel_blend: str='multiply', bevel_type: str='bumpbevel', bevel_depth: int=100, bevel_elevation: float=55.0, bevel_azimuth: float=75.0, bevel_radius: float=5.0, bevel_outlow: float=0.0, bevel_outhigh: float=1.0, bevel_dark: float=0.0, enableinnerglow: bool=False, ig_blend: str='normal', ig_radius: float=6.0, ig_grow_radius: float=5.0, ig_opacity: float=1.0, ig_value: Gegl.Color=None, ig_treatment: float=60.0, enableimage: bool=False, image_src: str='', image_opacity: float=1.0, image_saturation: float=1.0, image_lightness: float=0.0, enablespecialoutline: bool=False, enableoutlinebevel: bool=True, os_blend: str='multiply', os_depth: int=15, os_elevation: float=47.0, os_azimuth: float=55.0, os_radius: float=3.0, enableimageoutline: bool=False, os_src: str='', os_src_opacity: float=1.0, os_outlow: float=0.0, os_outhigh: float=1.0, os_dark: float=0.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """GEGL Styles
        
        An engine to style text and add popular effects to alpha channel
        images. Effects include outline, bevel, shadow, and inner
        glow all in one place.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * guichange (default: outlineshadow) - Display a different part of the
          GUI.
        
        * color_fill - Color overlay setting.
        
        * color_policy (default: multiply)
        
        * enableoutline (default: False) - Disable or enable the outline.
        
        * outline_opacity (default: 1.0) - Opacity of the outline.
        
        * outline_x (default: 0.0) - Horizontal outline offset.
        
        * outline_y (default: 0.0) - Vertical outline offset.
        
        * outline_grow_shape (default: circle) - The shape to expand or
          contract the outline in.
        
        * outline_blur (default: 0.0) - A mild blur for the outline.
        
        * outline (default: 12.0) - The distance to expand the outline.
        
        * outline_color - Color of the outline (defaults to 'black') .
        
        * shadow_opacity (default: 0.0) - Shadow opacity which will also
          enable or disable the shadow glow effect.
        
        * shadow_x (default: 10.0) - Horizontal axis of the shadow glow.
        
        * shadow_y (default: 10.0) - Vertical axis of the shadow glow.
        
        * shadow_color - The shadow’s color (defaults to 'black').
        
        * shadow_grow_radius (default: 0.0) - The distance to expand the
          shadow before blurring.
        
        * shadow_radius (default: 12.0) - The shadow’s blur range.
        
        * enablebevel (default: False) - Whether to add a bevel effect.
        
        * bevel_blend (default: multiply)
        
        * bevel_type (default: bumpbevel) - Type of bevel .
        
        * bevel_depth (default: 100) - Emboss depth for the bevel.
        
        * bevel_elevation (default: 55.0) - Emboss elevation of the bevel.
        
        * bevel_azimuth (default: 75.0) - Emboss azimuth of the bevel.
        
        * bevel_radius (default: 5.0) - Internal gaussian blur to inflate the
          bump bevel. This option does not work on chamfer.
        
        * bevel_outlow (default: 0.0) - Levels low output as a light
          adjustment for the bevel.
        
        * bevel_outhigh (default: 1.0) - Levels high output as a light
          adjustment for the bevel.
        
        * bevel_dark (default: 0.0) - This instructs the bevel to ignore image
          details if there is an image file overlay below it. It also
          allows bevel to work better when the user selects darker
          colors. The effect is noticeable on bump bevel but barely
          effects chamfer bevel.
        
        * enableinnerglow (default: False) - Whether to add the inner glow
          effect.
        
        * ig_blend (default: normal)
        
        * ig_radius (default: 6.0) - Blur control of the inner glow.
        
        * ig_grow_radius (default: 5.0) - The distance to expand the inner
          glow before blurring.
        
        * ig_opacity (default: 1.0) - Opacity of the inner glow.
        
        * ig_value - The color of the inner glow.
        
        * ig_treatment (default: 60.0) - Cover pixels that inner glow might
          miss.
        
        * enableimage (default: False) - Whether to enable or disable the
          image file upload.
        
        * image_src (default: ) - Upload an image file from your computer to
          be in the fill area. Allows (png, jpg, raw, svg, bmp, tif,
          ...).
        
        * image_opacity (default: 1.0) - Opacity of the image file overlay
          that was uploaded. .
        
        * image_saturation (default: 1.0) - Saturation adjustment of the
          uploaded image file or whatever is on canvas.
        
        * image_lightness (default: 0.0) - Lightness adjustment of the
          uploaded image file or whatever is on canvas.
        
        * enablespecialoutline (default: False) - Turn on advanced outline
          abilities.
        
        * enableoutlinebevel (default: True) - Turn on outlines ability to
          bevel.
        
        * os_blend (default: multiply)
        
        * os_depth (default: 15) - Emboss depth for the outline bevel.
        
        * os_elevation (default: 47.0) - Emboss elevation for the outline
          bevel.
        
        * os_azimuth (default: 55.0) - Emboss azimuth for the outline bevel.
        
        * os_radius (default: 3.0) - Internal gaussian blur to inflate the
          outline bevel.
        
        * enableimageoutline (default: False) - Whether to enable or disable
          the image file upload.
        
        * os_src (default: ) - Upload an image file from your computer to be
          in the outline area. Allows (png, jpg, raw, svg, bmp, tif,
          ...).
        
        * os_src_opacity (default: 1.0) - Outline image opacity adjustment.
        
        * os_outlow (default: 0.0) - Levels low output as a light adjustment
          for the outline bevel.
        
        * os_outhigh (default: 1.0) - Levels high output as a light adjustment
          for the outline bevel.
        
        * os_dark (default: 0.0) - This instructs the outline bevel to ignore
          image details if there is an image file overlay below it. It
          also allows outline bevel to work better when the user
          selects darker colors.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__subtract(self, drawable_: Gimp.Drawable=None, value: float=0.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Subtract
        
        Math operation subtract, performs the operation per pixel, using
        either the constant provided in 'value' or the corresponding
        pixel from the buffer on aux as operands. The result is the
        evaluation of the expression result = input - value.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * value (default: 0.0) - global value used if aux doesn't contain
          data.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__subtractive(self, drawable_: Gimp.Drawable=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """subtractive
        
        Image blending operation 'subtractive' (<tt>c = cA+cB-1.0</tt>).
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__supernova(self, drawable_: Gimp.Drawable=None, center_x: float=0.5, center_y: float=0.5, radius: int=20, spokes_count: int=100, random_hue: int=0, color: Gegl.Color=None, seed: int=0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Supernova
        
        This plug-in produces an effect like a supernova burst. The amount of
        the light effect is approximately in proportion to 1/r, where
        r is the distance from the center of the star.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * center_x (default: 0.5) - X coordinates of the center of supernova.
        
        * center_y (default: 0.5) - Y coordinates of the center of supernova.
        
        * radius (default: 20) - Radius of supernova.
        
        * spokes_count (default: 100) - Number of spokes.
        
        * random_hue (default: 0) - Random hue.
        
        * color - The color of supernova.
        
        * seed (default: 0) - The random seed for spokes and random hue.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__svg_huerotate(self, drawable_: Gimp.Drawable=None, values: str='', blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """SVG Hue Rotate
        
        SVG color matrix operation svg_huerotate.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * values (default: ) - list of <number>s.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__svg_load(self, drawable_: Gimp.Drawable=None, path: str='', uri: str='', width: int=-1, height: int=-1, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """SVG File Loader
        
        Load an SVG file using librsvg.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * path (default: ) - Path of file to load.
        
        * uri (default: ) - URI for file to load.
        
        * width (default: -1) - Width for rendered image.
        
        * height (default: -1) - Height for rendered image.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__svg_luminancetoalpha(self, drawable_: Gimp.Drawable=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """SVG Luminance to Alpha
        
        SVG color matrix operation svg_luminancetoalpha.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__svg_matrix(self, drawable_: Gimp.Drawable=None, values: str='', blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """SVG Matrix
        
        SVG color matrix operation svg_matrix.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * values (default: ) - list of <number>s.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__svg_saturate(self, drawable_: Gimp.Drawable=None, values: str='', blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """SVG Saturate
        
        SVG color matrix operation svg_saturate.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * values (default: ) - list of <number>s.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__text(self, drawable_: Gimp.Drawable=None, string: str='Hello', font: str='Sans', size: float=10.0, color: Gegl.Color=None, wrap: int=-1, vertical_wrap: int=-1, alignment: int=0, vertical_alignment: int=0, width: int=0, height: int=0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Render Text
        
        Display a string of text using pango and cairo.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * string (default: Hello) - String to display (utf8).
        
        * font (default: Sans) - Font family (utf8).
        
        * size (default: 10.0) - Font size in pixels.
        
        * color - Color for the text (defaults to 'black').
        
        * wrap (default: -1) - Sets the width in pixels at which long lines
          will wrap. Use -1 for no wrapping.
        
        * vertical_wrap (default: -1) - Sets the height in pixels according to
          which the text is vertically justified. Use -1 for no
          vertical justification.
        
        * alignment (default: 0) - Alignment for multi-line text (0=Left,
          1=Center, 2=Right).
        
        * vertical_alignment (default: 0) - Vertical text alignment (0=Top,
          1=Middle, 2=Bottom).
        
        * width (default: 0) - Rendered width in pixels. (read only).
        
        * height (default: 0) - Rendered height in pixels. (read only).
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__texturize_canvas(self, drawable_: Gimp.Drawable=None, direction: str='top-right', depth: int=4, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Texturize Canvas
        
        Textures the image as if it were an artist's canvas.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * direction (default: top-right) - Position of the light source which
          lightens the canvas: Top-right, Top-left, Bottom-left or
          Bottom-right.
        
        * depth (default: 4) - Apparent depth of the rendered canvas effect;
          from 1 (very flat) to 50 (very deep).
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__threshold(self, drawable_: Gimp.Drawable=None, value: float=0.5, high: float=1.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Threshold
        
        Thresholds the image to white/black based on either the global values
        set in the value (low) and high properties, or per pixel from
        the aux input.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * value (default: 0.5) - Lowest value to be included.
        
        * high (default: 1.0) - Highest value to be included as white.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__tiff_load(self, drawable_: Gimp.Drawable=None, path: str='', uri: str='', directory: int=1, metadata: Gegl.Metadata=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """TIFF File Loader
        
        TIFF image loader using libtiff.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * path (default: ) - Path of file to load.
        
        * uri (default: ) - URI for file to load.
        
        * directory (default: 1) - Image file directory (subfile).
        
        * metadata - Object to receive image metadata.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__tiff_save(self, drawable_: Gimp.Drawable=None, path: str='', bitdepth: int=-1, fp: int=-1, metadata: Gegl.Metadata=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """TIFF File Saver
        
        TIFF image saver using libtiff.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * path (default: ) - Target path and filename, use '-' for stdout.
        
        * bitdepth (default: -1) - -1, 8, 16, 32 and 64 are the currently
          accepted values, -1 means auto.
        
        * fp (default: -1) - floating point -1 means auto, 0 means integer, 1
          means float.
        
        * metadata - Object to receive image metadata.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__tile(self, drawable_: Gimp.Drawable=None, offset_x: int=0, offset_y: int=0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Tile
        
        Infinitely repeats the input image.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * offset_x (default: 0)
        
        * offset_y (default: 0)
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__tile_glass(self, drawable_: Gimp.Drawable=None, tile_width: int=25, tile_height: int=25, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Tile Glass
        
        Simulate distortion caused by rectangular glass tiles.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * tile_width (default: 25)
        
        * tile_height (default: 25)
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__tile_paper(self, drawable_: Gimp.Drawable=None, tile_width: int=155, tile_height: int=56, move_rate: float=25.0, wrap_around: bool=False, fractional_type: str='force', centering: bool=True, background_type: str='invert', bg_color: Gegl.Color=None, seed: int=0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Paper Tile
        
        Cut image into paper tiles, and slide them.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * tile_width (default: 155) - Width of the tile.
        
        * tile_height (default: 56) - Height of the tile.
        
        * move_rate (default: 25.0) - Move rate.
        
        * wrap_around (default: False) - Wrap the fractional tiles.
        
        * fractional_type (default: force) - Fractional Type.
        
        * centering (default: True) - Centering of the tiles.
        
        * background_type (default: invert) - Background type.
        
        * bg_color - The tiles' background color.
        
        * seed (default: 0)
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__tile_seamless(self, drawable_: Gimp.Drawable=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Make Seamlessly tileable
        
        Make the input buffer seamlessly tileable. The algorithm is not
        content-aware, so the result may need post-processing.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__transform(self, drawable_: Gimp.Drawable=None, origin_x: float=0.0, origin_y: float=0.0, near_z: float=0.0, sampler: Gegl.SamplerType=Gegl.SamplerType.LINEAR, transform: str='', blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Transform
        
        Do a transformation using SVG syntax transformation.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * origin_x (default: 0.0) - X coordinate of origin.
        
        * origin_y (default: 0.0) - Y coordinate of origin.
        
        * near_z (default: 0.0) - Z coordinate of the near clipping plane.
        
        * sampler (default: Gegl.SamplerType.LINEAR) - Sampler used
          internally.
        
        * transform (default: ) - Transformation SVG syntax transformation
          string.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__translate(self, drawable_: Gimp.Drawable=None, origin_x: float=0.0, origin_y: float=0.0, near_z: float=0.0, sampler: Gegl.SamplerType=Gegl.SamplerType.LINEAR, x: float=0.0, y: float=0.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Translate
        
        Repositions the buffer (with subpixel precision), if integer
        coordinates are passed a fast-path without resampling is
        used.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * origin_x (default: 0.0) - X coordinate of origin.
        
        * origin_y (default: 0.0) - Y coordinate of origin.
        
        * near_z (default: 0.0) - Z coordinate of the near clipping plane.
        
        * sampler (default: Gegl.SamplerType.LINEAR) - Sampler used
          internally.
        
        * x (default: 0.0) - Horizontal translation.
        
        * y (default: 0.0) - Vertical translation.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__unpremultiply(self, drawable_: Gimp.Drawable=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Unpremultiply alpha
        
        Unpremultiplies a buffer that contains pre-multiplied colors (but
        according to the babl format is not.).
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__unsharp_mask(self, drawable_: Gimp.Drawable=None, std_dev: float=3.0, scale: float=0.5, threshold: float=0.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Sharpen (Unsharp Mask)
        
        Sharpen image, by adding difference to blurred image, a technique for
        sharpening originally used in darkrooms.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * std_dev (default: 3.0) - Expressed as standard deviation, in pixels.
        
        * scale (default: 0.5) - Scaling factor for unsharp-mask, the strength
          of effect.
        
        * threshold (default: 0.0)
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__value_invert(self, drawable_: Gimp.Drawable=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Value Invert
        
        Invert the value component, the result has the brightness inverted,
        keeping the color.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__value_propagate(self, drawable_: Gimp.Drawable=None, mode: str='white', lower_threshold: float=0.0, upper_threshold: float=1.0, rate: float=1.0, color: Gegl.Color=None, top: bool=True, left: bool=True, right: bool=True, bottom: bool=True, value: bool=True, alpha: bool=True, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Value Propagate
        
        Propagate certain values to neighboring pixels. Erode and dilate any
        color or opacity.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * mode (default: white) - Mode of value propagation.
        
        * lower_threshold (default: 0.0) - The minimum difference in value at
          which to propagate a pixel.
        
        * upper_threshold (default: 1.0) - The maximum difference in value at
          which to propagate a pixel.
        
        * rate (default: 1.0) - The strength with which to propagate a pixel
          to its neighbors.
        
        * color - Color to use for the "Only color" and "Color to peaks"
          modes.
        
        * top (default: True) - Propagate to top.
        
        * left (default: True) - Propagate to left.
        
        * right (default: True) - Propagate to right.
        
        * bottom (default: True) - Propagate to bottom.
        
        * value (default: True) - Whether to propagate a pixel's color.
        
        * alpha (default: True) - Whether to propagate a pixel's opacity.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__variable_blur(self, drawable_: Gimp.Drawable=None, radius: float=10.0, linear_mask: bool=False, high_quality: bool=False, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Variable Blur
        
        Blur the image by a varying amount using a mask.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * radius (default: 10.0) - Maximal blur radius.
        
        * linear_mask (default: False) - Use linear mask values.
        
        * high_quality (default: False) - Generate more accurate and
          consistent output (slower).
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__vector_stroke(self, drawable_: Gimp.Drawable=None, color: Gegl.Color=None, width: float=2.0, opacity: float=1.0, transform: str='', d: Gegl.Path=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Vector Stroke
        
        Renders a vector stroke.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * color - Color of paint to use for stroking.
        
        * width (default: 2.0) - The width of the brush used to stroke the
          path.
        
        * opacity (default: 1.0) - Opacity of stroke, note, does not behave
          like SVG since at the moment stroking is done using an
          airbrush tool.
        
        * transform (default: ) - svg style description of transform.
        
        * d - A GeglVector representing the path of the stroke.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__video_degradation(self, drawable_: Gimp.Drawable=None, pattern: str='striped', additive: bool=True, rotated: bool=False, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Video Degradation
        
        This function simulates the degradation of being on an old
        low-dotpitch RGB video monitor.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * pattern (default: striped) - Type of RGB pattern to use.
        
        * additive (default: True) - Whether the function adds the result to
          the original image.
        
        * rotated (default: False) - Whether to rotate the RGB pattern by
          ninety degrees.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__vignette(self, drawable_: Gimp.Drawable=None, shape: str='circle', color: Gegl.Color=None, radius: float=1.2, softness: float=0.8, gamma: float=2.0, proportion: float=1.0, squeeze: float=0.0, x: float=0.5, y: float=0.5, rotation: float=0.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Vignette
        
        Applies a vignette to an image. Simulates the luminance fall off at
        the edge of exposed film, and some other fuzzier border
        effects that can naturally occur with analog photography.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * shape (default: circle)
        
        * color - Defaults to 'black', you can use transparency here to erase
          portions of an image.
        
        * radius (default: 1.2) - How far out vignetting goes as portion of
          half image diagonal.
        
        * softness (default: 0.8)
        
        * gamma (default: 2.0) - Falloff linearity.
        
        * proportion (default: 1.0) - How close we are to image proportions.
        
        * squeeze (default: 0.0) - Aspect ratio to use, -0.5 = 1:2, 0.0 = 1:1,
          0.5 = 2:1, -1.0 = 1:inf 1.0 = inf:1, this is applied after
          proportion is taken into account, to directly use squeeze
          factor as proportions, set proportion to 0.0.
        
        * x (default: 0.5)
        
        * y (default: 0.5)
        
        * rotation (default: 0.0)
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__voronoi_diagram(self, drawable_: Gimp.Drawable=None, metric: str='euclidean', mask: Gegl.Color=None, invert: bool=False, seed_edges: bool=False, abyss_policy: str='none', blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Voronoi Diagram
        
        Paints each non-seed pixel with the color of the nearest seed pixel.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * metric (default: euclidean) - Metric to use for the distance
          calculation.
        
        * mask - Unseeded region color.
        
        * invert (default: False) - Invert mask.
        
        * seed_edges (default: False) - Whether the image edges are also
          seeded.
        
        * abyss_policy (default: none) - How image edges are handled.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__warp(self, drawable_: Gimp.Drawable=None, strength: float=50.0, size: float=40.0, hardness: float=0.5, spacing: float=0.01, stroke: Gegl.Path=None, behavior: str='move', blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Warp
        
        Compute a relative displacement mapping from a stroke.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * strength (default: 50.0)
        
        * size (default: 40.0)
        
        * hardness (default: 0.5)
        
        * spacing (default: 0.01)
        
        * stroke
        
        * behavior (default: move) - Behavior of the op.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__waterpixels(self, drawable_: Gimp.Drawable=None, size: int=32, smoothness: float=1.0, regularization: int=0, fill: str='average', blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Waterpixels
        
        Superpixels based on the watershed transformation.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * size (default: 32)
        
        * smoothness (default: 1.0)
        
        * regularization (default: 0) - trade-off between superpixel
          regularity and adherence to object boundaries.
        
        * fill (default: average) - How to fill superpixels.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__watershed_transform(self, drawable_: Gimp.Drawable=None, flag_component: int=-1, flag: GObject.Value=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Watershed Transform
        
        Labels propagation by watershed transformation. Output buffer will
        keep the input format. Unlabelled pixels are marked with a
        given flag value (by default: last component with NULL
        value). The aux buffer is a "Y u8" image representing the
        priority levels (lower value is higher priority). If aux is
        absent, all labellized pixels have the same priority and
        propagated labels have a lower priority.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * flag_component (default: -1) - Index of component flagging
          unlabelled pixels.
        
        * flag - Pointer to flag value for unlabelled pixels.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__wavelet_blur(self, drawable_: Gimp.Drawable=None, radius: float=1.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Wavelet Blur
        
        This blur is used for the wavelet decomposition filter, each pixel is
        computed from another by the HAT transform.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * radius (default: 1.0) - Radius of the wavelet blur.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__wavelet_blur_1d(self, drawable_: Gimp.Drawable=None, radius: float=1.0, orientation: str='horizontal', blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """1D Wavelet-blur
        
        This blur is used for the wavelet decomposition filter, each pixel is
        computed from another by the HAT transform.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * radius (default: 1.0) - Radius of the wavelet blur.
        
        * orientation (default: horizontal) - The orientation of the blur -
          hor/ver.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__waves(self, drawable_: Gimp.Drawable=None, x: float=0.5, y: float=0.5, amplitude: float=25.0, period: float=100.0, phi: float=0.0, aspect: float=1.0, sampler_type: str='cubic', clamp: bool=False, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Waves
        
        Distort the image with waves.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * x (default: 0.5)
        
        * y (default: 0.5)
        
        * amplitude (default: 25.0) - Amplitude of the ripple.
        
        * period (default: 100.0) - Period (wavelength) of the ripple.
        
        * phi (default: 0.0)
        
        * aspect (default: 1.0)
        
        * sampler_type (default: cubic) - Mathematical method for
          reconstructing pixel values.
        
        * clamp (default: False) - Limit deformation in the image area.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__webp_load(self, drawable_: Gimp.Drawable=None, path: str='', uri: str='', blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """WebP File Loader
        
        WebP image loader.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * path (default: ) - Path of file to load.
        
        * uri (default: ) - URI for file to load.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__webp_save(self, drawable_: Gimp.Drawable=None, path: str='', quality: int=90, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """WebP File Saver
        
        WebP image saver.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * path (default: ) - Target path and filename, use '-' for stdout.
        
        * quality (default: 90) - WebP compression quality.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__weighted_blend(self, drawable_: Gimp.Drawable=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Weighted Blend
        
        Blend two images using alpha values as weights.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__whirl_pinch(self, drawable_: Gimp.Drawable=None, whirl: float=90.0, pinch: float=0.0, radius: float=1.0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Whirl Pinch
        
        Distort an image by whirling and pinching.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * whirl (default: 90.0) - Whirl angle (degrees).
        
        * pinch (default: 0.0) - Pinch amount.
        
        * radius (default: 1.0) - Radius (1.0 is the largest circle that fits
          in the image, and 2.0 goes all the way to the corners).
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__wind(self, drawable_: Gimp.Drawable=None, style: str='wind', direction: str='left', edge: str='leading', threshold: int=10, strength: int=10, seed: int=0, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Wind
        
        Wind-like bleed effect.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * style (default: wind) - Style of effect.
        
        * direction (default: left) - Direction of the effect.
        
        * edge (default: leading) - Edge behavior.
        
        * threshold (default: 10) - Higher values restrict the effect to fewer
          areas of the image.
        
        * strength (default: 10) - Higher values increase the magnitude of the
          effect.
        
        * seed (default: 0)
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def gegl__write_buffer(self, drawable_: Gimp.Drawable=None, buffer: Gegl.Buffer=None, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Write Buffer
        
        Write input data into an existing GEGL buffer destination surface.
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * buffer - A pre-existing GeglBuffer to write incoming buffer data to.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def svg__clear(self, drawable_: Gimp.Drawable=None, srgb: bool=False, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Clear
        
        Porter Duff operation clear (d = 0.0f).
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * srgb (default: False) - Use sRGB gamma instead of linear.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def svg__color_burn(self, drawable_: Gimp.Drawable=None, srgb: bool=False, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Color-burn
        
        SVG blend operation color-burn (<code>if cA * aB + cB * aA <= aA *
        aB: d = cA * (1 - aB) + cB * (1 - aA) otherwise: d = (cA == 0
        ? 1 : (aA * (cA * aB + cB * aA - aA * aB) / cA) + cA * (1 -
        aB) + cB * (1 - aA))</code>).
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * srgb (default: False) - Use sRGB gamma instead of linear.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def svg__color_dodge(self, drawable_: Gimp.Drawable=None, srgb: bool=False, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Color-dodge
        
        SVG blend operation color-dodge (<code>if cA * aB + cB * aA >= aA *
        aB: d = aA * aB + cA * (1 - aB) + cB * (1 - aA) otherwise: d
        = (cA == aA ? 1 : cB * aA / (aA == 0 ? 1 : 1 - cA / aA)) + cA
        * (1 - aB) + cB * (1 - aA)</code>).
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * srgb (default: False) - Use sRGB gamma instead of linear.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def svg__darken(self, drawable_: Gimp.Drawable=None, srgb: bool=False, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """
        
        SVG blend operation darken (<code>d = MIN (cA * aB, cB * aA) + cA *
        (1 - aB) + cB * (1 - aA)</code>).
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * srgb (default: False) - Use sRGB gamma instead of linear.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def svg__difference(self, drawable_: Gimp.Drawable=None, srgb: bool=False, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """
        
        SVG blend operation difference (<code>d = cA + cB - 2 * (MIN (cA *
        aB, cB * aA))</code>).
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * srgb (default: False) - Use sRGB gamma instead of linear.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def svg__dst(self, drawable_: Gimp.Drawable=None, srgb: bool=False, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Dst
        
        Porter Duff operation dst (d = cB).
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * srgb (default: False) - Use sRGB gamma instead of linear.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def svg__dst_atop(self, drawable_: Gimp.Drawable=None, srgb: bool=False, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Dst-atop
        
        Porter Duff operation dst-atop (d = cB * aA + cA * (1.0f - aB)).
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * srgb (default: False) - Use sRGB gamma instead of linear.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def svg__dst_in(self, drawable_: Gimp.Drawable=None, srgb: bool=False, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Dst-in
        
        Porter Duff operation dst-in (d = cB * aA).
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * srgb (default: False) - Use sRGB gamma instead of linear.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def svg__dst_out(self, drawable_: Gimp.Drawable=None, srgb: bool=False, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Dst-out
        
        Porter Duff operation dst-out (d = cB * (1.0f - aA)).
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * srgb (default: False) - Use sRGB gamma instead of linear.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def svg__dst_over(self, drawable_: Gimp.Drawable=None, srgb: bool=False, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Dst-over
        
        Porter Duff operation dst-over (d = cB + cA * (1.0f - aB)).
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * srgb (default: False) - Use sRGB gamma instead of linear.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def svg__exclusion(self, drawable_: Gimp.Drawable=None, srgb: bool=False, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """
        
        SVG blend operation exclusion (<code>d = (cA * aB + cB * aA - 2 * cA
        * cB) + cA * (1 - aB) + cB * (1 - aA)</code>).
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * srgb (default: False) - Use sRGB gamma instead of linear.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def svg__hard_light(self, drawable_: Gimp.Drawable=None, srgb: bool=False, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Hard-light
        
        SVG blend operation hard-light (<code>if 2 * cA < aA: d = 2 * cA * cB
        + cA * (1 - aB) + cB * (1 - aA) otherwise: d = aA * aB - 2 *
        (aB - cB) * (aA - cA) + cA * (1 - aB) + cB * (1 -
        aA)</code>).
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * srgb (default: False) - Use sRGB gamma instead of linear.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def svg__lighten(self, drawable_: Gimp.Drawable=None, srgb: bool=False, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """
        
        SVG blend operation lighten (<code>d = MAX (cA * aB, cB * aA) + cA *
        (1 - aB) + cB * (1 - aA)</code>).
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * srgb (default: False) - Use sRGB gamma instead of linear.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def svg__overlay(self, drawable_: Gimp.Drawable=None, srgb: bool=False, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Overlay
        
        SVG blend operation overlay (<code>if 2 * cB > aB: d = 2 * cA * cB +
        cA * (1 - aB) + cB * (1 - aA) otherwise: d = aA * aB - 2 *
        (aB - cB) * (aA - cA) + cA * (1 - aB) + cB * (1 -
        aA)</code>).
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * srgb (default: False) - Use sRGB gamma instead of linear.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def svg__plus(self, drawable_: Gimp.Drawable=None, srgb: bool=False, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Plus
        
        SVG blend operation plus (<code>d = cA + cB</code>).
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * srgb (default: False) - Use sRGB gamma instead of linear.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def svg__screen(self, drawable_: Gimp.Drawable=None, srgb: bool=False, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """
        
        SVG blend operation screen (<code>d = cA + cB - cA * cB</code>).
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * srgb (default: False) - Use sRGB gamma instead of linear.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def svg__src(self, drawable_: Gimp.Drawable=None, srgb: bool=False, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Src
        
        Porter Duff operation src (d = cA).
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * srgb (default: False) - Use sRGB gamma instead of linear.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def svg__src_atop(self, drawable_: Gimp.Drawable=None, srgb: bool=False, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Src-atop
        
        Porter Duff operation src-atop (d = cA * aB + cB * (1.0f - aA)).
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * srgb (default: False) - Use sRGB gamma instead of linear.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def svg__src_in(self, drawable_: Gimp.Drawable=None, srgb: bool=False, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Src-in
        
        Porter Duff compositing operation src-in (formula:   cA * aB).
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * srgb (default: False) - Use sRGB gamma instead of linear.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def svg__src_out(self, drawable_: Gimp.Drawable=None, srgb: bool=False, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Src-out
        
        Porter Duff operation src-out (d = cA * (1.0f - aB)).
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * srgb (default: False) - Use sRGB gamma instead of linear.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def svg__src_over(self, drawable_: Gimp.Drawable=None, srgb: bool=False, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Normal compositing
        
        Porter Duff operation over (also known as normal mode, and src-over)
        (d = cA + cB * (1 - aA)).
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * srgb (default: False) - Use sRGB gamma instead of linear.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

    def svg__xor(self, drawable_: Gimp.Drawable=None, srgb: bool=False, blend_mode_: Gimp.LayerMode=Gimp.LayerMode.REPLACE, opacity_: float=1.0, merge_filter_: bool=False, visible_: bool=True, name_: str=''):
        """Xor
        
        Porter Duff operation xor (d = cA * (1.0f - aB)+ cB * (1.0f - aA)).
        
        Parameters:
        
        * drawable_ - Drawable.
        
        * srgb (default: False) - Use sRGB gamma instead of linear.
        
        * blend_mode_ (default: Gimp.LayerMode.REPLACE) - Blend mode.
        
        * opacity_ (default: 1.0) - Opacity.
        
        * merge_filter_ (default: False) - Merge filter.
        
        * visible_ (default: True) - Visible.
        
        * name_ (default: ) - Filter name.
        """
        pass

class PDBProcedure(metaclass=abc.ABCMeta):

    def __init__(self, pypdb_instance, name):
        self._pypdb_instance = None
        self._name = None

    @abc.abstractmethod
    def __call__(self, **kwargs):
        pass

    @property
    @abc.abstractmethod
    def arguments(self):
        pass

    @property
    @abc.abstractmethod
    def aux_arguments(self):
        pass

    @property
    @abc.abstractmethod
    def return_values(self):
        pass

    @property
    @abc.abstractmethod
    def authors(self):
        pass

    @property
    @abc.abstractmethod
    def blurb(self):
        pass

    @property
    @abc.abstractmethod
    def copyright(self):
        pass

    @property
    @abc.abstractmethod
    def date(self):
        pass

    @property
    @abc.abstractmethod
    def help(self):
        pass

    @property
    @abc.abstractmethod
    def menu_label(self):
        pass

    @property
    @abc.abstractmethod
    def menu_paths(self):
        pass

    @property
    def name(self):
        pass

    @abc.abstractmethod
    def create_config(self):
        pass

class GimpPDBProcedure(PDBProcedure):

    def __init__(self, pypdb_instance, name):
        self._proc = None
        super().__init__(pypdb_instance, name)

    def __call__(self, **kwargs):
        pass

    @property
    def proc(self):
        pass

    @property
    def arguments(self):
        pass

    @property
    def aux_arguments(self):
        pass

    @property
    def return_values(self):
        pass

    @property
    def authors(self):
        pass

    @property
    def blurb(self):
        pass

    @property
    def copyright(self):
        pass

    @property
    def date(self):
        pass

    @property
    def help(self):
        pass

    @property
    def menu_label(self):
        pass

    @property
    def menu_paths(self):
        pass

    def create_config(self):
        pass

    def _create_config_for_call(self, **proc_kwargs):
        pass

class GeglProcedure(PDBProcedure):

    def __init__(self, pypdb_instance, name):
        self._filter_properties = None
        self._drawable_param = None
        self._blend_mode_param = None
        self._opacity_param = None
        self._merge_filter_param = None
        self._visible_param = None
        self._filter_name_param = None
        self._keys = None
        self._properties = None
        super().__init__(pypdb_instance, name)

    def __call__(self, *args, **kwargs):
        pass

    @property
    def arguments(self):
        pass

    @property
    def aux_arguments(self):
        pass

    @property
    def return_values(self):
        pass

    @property
    def authors(self):
        pass

    @property
    def blurb(self):
        pass

    @property
    def copyright(self):
        pass

    @property
    def date(self):
        pass

    @property
    def help(self):
        pass

    @property
    def menu_label(self):
        pass

    @property
    def menu_paths(self):
        pass

    def create_config(self):
        pass

    def _get_properties(self):
        pass

def _get_set_property_func_for_gimp_pdb_procedure(arg_type_name, config):
    pass

class PDBProcedureError(Exception):

    def __init__(self, message, status):
        super().__init__(message)
        self.message = None
        self.status = None

    def __str__(self):
        pass
pdb = _PyPDB()